float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
int is_array_sorted(float values[], int n_values){    int i;    for(i=1;i<=n_values;i++)    {        if(values[i]<values[i-1])        {            return 0;        }    }    return 1;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float* suppress_value(float value_to_suppress, float values[],int n_values){    void *temp = realloc(values, (array_length - 1) * sizeof(int) );    n_values = n_values - 1;    return *temp}
float* suppress_value(float value_to_suppress, float values[],int n_values){    void *temp = realloc(values, (array_length - 1) * sizeof(int) );    n_values = n_values - 1;    return temp}
float* suppress_value(float value_to_suppress, float values[],int n_values){    int i,*p;    p=(int*)malloc(sizeof(int)*(n_values-1));    for(i=0;i<n_values-1;i++)    {        values[i]=values[i-1];    }    for(i=0;i<n_value-1;i++)    {        p[i]=values[i];    }    return p;}
float* suppress_value(float value_to_suppress, float values[],int n_values){    int i,*p;    p=(int*)malloc(sizeof(int)*(n_values-1));    for(i=0;i<n_values-1;i++)    {        values[i]=values[i-1];    }    for(i=0;i<n_values-1;i++)    {        p[i]=values[i];    }    return p;}
float* suppress_value(float value_to_suppress, float values[],int n_values){    int i,*p;    p=(float*)malloc(sizeof(float)*(n_values-1));    for(i=0;i<n_values-1;i++)    {        values[i]=values[i-1];    }    for(i=0;i<n_values-1;i++)    {        p[i]=values[i];    }    return p;}
float* suppress_value(float value_to_suppress, float values[],int n_values){    int i,*p;    p=(float*)malloc(sizeof(float)*(n_values-1));    for(i=0;i<n_values-1;i++)    {        values[i]=values[i-1];    }    for(i=0;i<n_values-1;i++)    {        p[i]=values[i];    }    return *p;}
float* suppress_value(float value_to_suppress, float values[],int n_values){    int i, tab[50],j;    for(i=0;i<n_values;i++)    {        if(values[i]==value_to_suppress)        {            for(j=i;j<n_values-1;j++)            {                values[j]=values[j+1];            }            return values[];        }    }}
float* suppress_value(float value_to_suppress, float values[],int n_values){    int i, tab[50],j;    for(i=0;i<n_values;i++)    {        if(values[i]==value_to_suppress)        {            for(j=i;j<n_values-1;j++)            {                values[j]=values[j+1];            }            return values;        }    }}
float* supress_value(float value_to_suppress, float values[],int n_values){    int i,j;    for(i=0;i<n_values;i++)    {        if(values[i]==value_to_suppress)        {            for(j=i;j<n_values-1;j++)            {                values[j]=values[j+1];            }            return values;        }    }}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    p = (int*)malloc(sizeof(int)*value_to_supress-1);        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    p = (int*)malloc(sizeof(int)*value_to_supress-1);        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    p = (int*)malloc(sizeof(int)*(value_to_supress-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    *p = (int*)malloc(sizeof(int)*(value_to_supress-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    *p = (float*)malloc(sizeof(int)*(value_to_supress-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    *p = (float*)malloc(sizeof(float)*(value_to_supress-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    *p = (float*)malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    *p = malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    *p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                (p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        (p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                (p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        (p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                (p+cpt) = &values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        (p+i) = &values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return *p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt+1;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt+2;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt-1;    for (cpt = cpt+2; cpt < n_values; cpt++){        *(p+i) = values[cpt];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i, j;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt;    for (j = cpt+2; j < n_values; cpt++){        *(p+i) = values[j];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i, j;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt;    for (j = cpt+2; j < n_values; cpt++){        *(p+i) = values[j];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i, j;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt;    for (j = cpt+2; j < n_values; cpt++){        *(p+i) = values[j];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i, j;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt;    for (j = cpt+2; j < n_values; cpt++){        *(p+i) = values[j];    }    return p;}
#include <stdio.h>#include <stdlib.h>void shift_values_to_left(float* values, int n_values){    float first = values[0];    int i=0;    for(i=0; i<n_values; i++){        values[i]=values[i+1];    }    values[n_values-1]=first;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i, j;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt;    for (j = cpt; j < n_values; cpt++){        *(p+i) = values[j];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i, j;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt;    for (j = cpt; j < n_values; j++){        *(p+i) = values[j];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i, j;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt;    for (j = cpt+1; j < n_values; j++){        *(p+i) = values[j];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i, j;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt;    for (j = cpt+1; j < n_values; j++){        *(p+i) = values[j];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i, j;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt;    for (j = cpt-1; j < n_values; j++){        *(p+i) = values[j];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;    int len = n_values - 1, cpt=0, i, j;    p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt;    for (j = cpt+1; j < n_values; j++){        *(p+i) = values[j];        i++;    }    return p;}
float* suppress_value(float value_to_suppress, float value[], int n_values){    int cpt    for (cpt = value_to_suppress -1; cpt<n_values; cpt++){        value[cpt] = value[cpt+1];    }}
float* suppress_value(float value_to_suppress, float value[], int n_values){    int cpt;    for (cpt = value_to_suppress -1; cpt<n_values; cpt++){        value[cpt] = value[cpt+1];    }}
float* suppress_value(float value_to_suppress, float value[], int n_values){    int cpt;    for (cpt = value_to_suppress -1; cpt<n_values; cpt++){        value[cpt] = value[cpt+1];    }}
float* suppress_value(float value_to_suppress, float value[], int n_values){    int cpt;    for (cpt = value_to_suppress -1; cpt<n_values; cpt++){        value[cpt] = value[cpt+1];    }}
float* suppress_value(float value_to_suppress, float value[], int n_values){    int cpt;    for (cpt = value_to_suppress -1; cpt<n_values; cpt++){        value[cpt] = value[cpt+1];    }}
float* supress_value(float value_to_supress, float values[], int n_values){        float res[n_values-1]; //             //            return res;         }
float* suppress_value (float value_to_supress, float values[], int n_values){        float res[n_values-1]; //             //            return res;         }
float* suppress_value (float value_to_supress, float values[], int n_values){        float res[30]; //             //            return res;         }
float* suppress_value (float value_to_supress, float values[],                     int n_values){        //float res[30]; //marche po             // on doit utiliser les pointeur        //pointeur = une variable qui contient l'addresse mémoire    //d'une autre variable  ?????            float * res; //pointeur (variable qui contiendra une addresse)            //malloc permet de créer des tableaux qui    // ne SERONT PAS détruit à la fin de la fonction        //pour créer un tableau  en mémoire    //il faut spécifier la taille du tableau     // il faut 2 ingrédients :     // il faut savoir quel la taille de chaque élément    // combien d'élement vous voulez dans votre tableau        //int size_element = sizeof(float);        //int n_element = n_values -1;         //malloc est une fonction qui renvoie une adresse    //res = malloc(n_element * size_element);        res = malloc(sizeof(float) * n_element);    //à partir de la j'ai un tableau de n_element float !        res[0] = 1            return res;         } 
float* suppress_value (float value_to_supress, float values[],                     int n_values){        //float res[30]; //marche po             // on doit utiliser les pointeur        //pointeur = une variable qui contient l'addresse mémoire    //d'une autre variable  ?????            float * res; //pointeur (variable qui contiendra une addresse)            //malloc permet de créer des tableaux qui    // ne SERONT PAS détruit à la fin de la fonction        //pour créer un tableau  en mémoire    //il faut spécifier la taille du tableau     // il faut 2 ingrédients :     // il faut savoir quel la taille de chaque élément    // combien d'élement vous voulez dans votre tableau        //int size_element = sizeof(float);        //int n_element = n_values -1;         //malloc est une fonction qui renvoie une adresse    //res = malloc(n_element * size_element);        res = malloc(sizeof(float) * n_element);    //à partir de la j'ai un tableau de n_element float !        res[0] = 1;            return res;         } 
float* suppress_value (float value_to_supress, float values[],                     int n_values){        //float res[30]; //marche po             // on doit utiliser les pointeur        //pointeur = une variable qui contient l'addresse mémoire    //d'une autre variable  ?????            float * res; //pointeur (variable qui contiendra une addresse)            //malloc permet de créer des tableaux qui    // ne SERONT PAS détruit à la fin de la fonction        //pour créer un tableau  en mémoire    //il faut spécifier la taille du tableau     // il faut 2 ingrédients :     // il faut savoir quel la taille de chaque élément    // combien d'élement vous voulez dans votre tableau        //int size_element = sizeof(float);        int n_element = n_values -1;         //malloc est une fonction qui renvoie une adresse    //res = malloc(n_element * size_element);        res = malloc(sizeof(float) * n_element);    //à partir de la j'ai un tableau de n_element float !        res[0] = 1;            return res;         } 
float* suppress_value (float value_to_supress, float values[],                     int n_values){        //float res[30]; //marche po             // on doit utiliser les pointeur        //pointeur = une variable qui contient l'addresse mémoire    //d'une autre variable  ?????            float * res; //pointeur (variable qui contiendra une addresse)            //malloc permet de créer des tableaux qui    // ne SERONT PAS détruit à la fin de la fonction        //pour créer un tableau  en mémoire    //il faut spécifier la taille du tableau     // il faut 2 ingrédients :     // il faut savoir quel la taille de chaque élément    // combien d'élement vous voulez dans votre tableau        //int size_element = sizeof(float);        int n_element = n_values -1;         //malloc est une fonction qui renvoie une adresse    //res = malloc(n_element * size_element);        res = (float *) malloc(sizeof(float) * n_element);    //à partir de la j'ai un tableau de n_element float !        res[0] = 1;            return res;         } 
float* suppress_value (float value_to_supress, float values[],                     int n_values){        //float res[30]; //marche po             // on doit utiliser les pointeur        //pointeur = une variable qui contient l'addresse mémoire    //d'une autre variable  ?????            float * res; //pointeur (variable qui contiendra une addresse)            //malloc permet de créer des tableaux qui    // ne SERONT PAS détruit à la fin de la fonction        //pour créer un tableau  en mémoire    //il faut spécifier la taille du tableau     // il faut 2 ingrédients :     // il faut savoir quel la taille de chaque élément    // combien d'élement vous voulez dans votre tableau        //int size_element = sizeof(float);        int n_element = n_values -1;         //malloc est une fonction qui renvoie une adresse    //res = malloc(n_element * size_element);        res = (float *) malloc(sizeof(float) * n_element);    //à partir de la j'ai un tableau de n_element float !            tableau_char = (char*) malloc(sizeof(char) * n_char);    res[0] = 1;            return res;         } 
float* suppress_value (float value_to_supress, float values[],                     int n_values){        //float res[30]; //marche po             // on doit utiliser les pointeur        //pointeur = une variable qui contient l'addresse mémoire    //d'une autre variable  ?????            float * res; //pointeur (variable qui contiendra une addresse)            //malloc permet de créer des tableaux qui    // ne SERONT PAS détruit à la fin de la fonction        //pour créer un tableau  en mémoire    //il faut spécifier la taille du tableau     // il faut 2 ingrédients :     // il faut savoir quel la taille de chaque élément    // combien d'élement vous voulez dans votre tableau        //int size_element = sizeof(float);        int n_element = n_values -1;         //malloc est une fonction qui renvoie une adresse    //res = malloc(n_element * size_element);        res = (float *) malloc(sizeof(float) * n_element);    //à partir de la j'ai un tableau de n_element float !            char *tableau_char = (char*) malloc(sizeof(char) * n_char);    res[0] = 1;            return res;         } 
float* suppress_value (float value_to_supress, float values[],                     int n_values){        //float res[30]; //marche po             // on doit utiliser les pointeur        //pointeur = une variable qui contient l'addresse mémoire    //d'une autre variable  ?????            float * res; //pointeur (variable qui contiendra une addresse)            //malloc permet de créer des tableaux qui    // ne SERONT PAS détruit à la fin de la fonction        //pour créer un tableau  en mémoire    //il faut spécifier la taille du tableau     // il faut 2 ingrédients :     // il faut savoir quel la taille de chaque élément    // combien d'élement vous voulez dans votre tableau        //int size_element = sizeof(float);        int n_element = n_values -1;         //malloc est une fonction qui renvoie une adresse    //res = malloc(n_element * size_element);        res = (float *) malloc(sizeof(float) * n_element);    //à partir de la j'ai un tableau de n_element float !            char *tableau_char = (char*) malloc(sizeof(char) * 22);    res[0] = 1;            return res;         } 
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(n_element * size_element);        int cpt;    for(cpt=0; cpt<n_values; cpt++ ){        if(values != value_to_suppress){            res[cpt] = value[cpt];        }    }    return res;}
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(n_element * size_element);        int cpt;    for(cpt=0; cpt<n_values; cpt++ ){        if(value[cpt] != value_to_suppress){            res[cpt] = value[cpt];        }    }    return res;}
float* suppress_value (float value_to_supress, float values[],                     int n_values){        //float res[30]; //marche po             // on doit utiliser les pointeur        //pointeur = une variable qui contient l'addresse mémoire    //d'une autre variable  ?????            float * res; //pointeur (variable qui contiendra une addresse)            //malloc permet de créer des tableaux qui    // ne SERONT PAS détruit à la fin de la fonction        //pour créer un tableau  en mémoire    //il faut spécifier la taille du tableau     // il faut 2 ingrédients :     // il faut savoir quel la taille de chaque élément    // combien d'élement vous voulez dans votre tableau        //int size_element = sizeof(float);        int n_element = n_values -1;         //malloc est une fonction qui renvoie une adresse    //res = malloc(n_element * size_element);        res = (float *) malloc(sizeof(float) * n_element);    //à partir de la j'ai un tableau de n_element float !            char *tableau_char = (char*) malloc(sizeof(char) * 22);    res[0] = 1;            return res;         }
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(n_element * size_element);        int cpt;    for(cpt=0; cpt<n_values; cpt++ ){        if(value[cpt] != value_to_suppress){            res[cpt] = value[cpt];            printf(res)        }    }    return res;}
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(n_element * size_element);        int cpt;    for(cpt=0; cpt<n_values; cpt++ ){        if(value[cpt] != value_to_suppress){            res[cpt] = value[cpt];            printf(res);        }    }    return res;}
float* suppress_value (float value_to_supress, float values[],                     int n_values){        //float res[30]; //marche po             // on doit utiliser les pointeur        //pointeur = une variable qui contient l'addresse mémoire    //d'une autre variable  ?????            float * res; //pointeur (variable qui contiendra une addresse)            //malloc permet de créer des tableaux qui    // ne SERONT PAS détruit à la fin de la fonction        //pour créer un tableau  en mémoire    //il faut spécifier la taille du tableau     // il faut 2 ingrédients :     // il faut savoir quel la taille de chaque élément    // combien d'élement vous voulez dans votre tableau        //int size_element = sizeof(float);        int n_element = n_values -1;         //malloc est une fonction qui renvoie une adresse    //res = malloc(n_element * size_element);        res = (float *) malloc(sizeof(float) * n_element);    //à partir de la j'ai un tableau de n_element float !            char *tableau_char = (char*) malloc(sizeof(char) * 22);    res[0] = 1;            return res;         } 
float* supress_value(float value_to_suppress, float values[],int n_values){    int i,j;    for(i=0;i<n_values;i++)    {        if(values[i]==value_to_suppress)        {            for(j=i;j<n_values-1;j++)            {                values[j]=values[j+1];            }            return values;        }    }}
float* supress_value(float value_to_suppress, float values[],int n_values){    int i,j;    for(i=0;i<n_values;i++)    {        if(values[i]==value_to_suppress)        {            for(j=i;j<n_values-1;j++)            {                values[j]=values[j+1];            }            return values;        }    }}
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(n_element * size_element);        int cpt;    for(cpt=0; cpt<n_values; cpt++ ){        if(value[cpt] != value_to_suppress){            res[cpt] = value[cpt];        }    }    return res;}
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt;    for(cpt=0; cpt<n_values; cpt++ ){        if(value[cpt] != value_to_suppress){            res[cpt] = value[cpt];        }    }    return res;}
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;     end = (float *) malloc(sizeof(float) * n_values-1);    end[0] = 1;        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;     end = (float *) malloc(sizeof(float) * n_values-1);    end[0] = 1;        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;     end = (float *) malloc(sizeof(float) * n_values-1);    end[0] = 1;        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values, i++){        if (*values+i==value_to_supress){            for (int j=i; j<n_values-1; j++)                *(values+j)=*(values+j+1)        }    }    float *newtab = (float *) malloc(sizeof(float)*(n_values-1));    return *newtab;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values, i++){        if (*values+i==value_to_supress){            for (int j=i; j<n_values-1; j++)                *(values+j)=*(values+j+1)        }    }    float *newtab = (float *) malloc(sizeof(float)*(n_values-1));    return newtab;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values, i++){        if (*values+i==value_to_supress){            for (int j=i; j<n_values-1; j++)                *(values+j)=*(values+j+1)        }    }    float *newtab = (float *) malloc(sizeof(float)*(n_values-1));    return newtab;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values, i++){        if (*values+i==value_to_supress){            for (int j=i; j<n_values-1; j++)                *(values+j)=*(values+j+1);        }    }    float *newtab = (float *) malloc(sizeof(float)*(n_values-1));    return newtab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * res;        int size_element = sizeof(float);    int n_element = n_values - 1;    res = malloc(n_element * size_element);        return res}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * res;        int size_element = sizeof(float);    int n_element = n_values - 1;    res = malloc(n_element * size_element);        return res;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * res;        int size_element = sizeof(float);    int n_element = n_values - 1;    res = malloc(n_element * size_element);        return res;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++){        if (*values+i==value_to_supress){            for (int j=i; j<n_values-1; j++)                *(values+j)=*(values+j+1);        }    }    float *newtab = (float *) malloc(sizeof(float)*(n_values-1));    return newtab;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++){        if (*values+i==value_to_supress){            for (int j=i; j<n_values; j++)                *(values+j)=*(values+j+1);        }    }    float *newtab = (float *) malloc(sizeof(float)*(n_values-1));    return newtab;}
float* suppress_value(float value_to_supress, float values[], int n_values){    float * res;        int size_element = sizeof(float);    int n_element = n_values - 1;    res = malloc(n_element * size_element);        return res;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++){        if (*values+i==value_to_supress){            for (int j=i; j<n_values; j++)                *(values+j)=*(values+j+1);        }    }    return (float *newtab = (float *) malloc(sizeof(float)*(n_values-1)));}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++){        if (*values+i==value_to_supress){            for (int j=i; j<n_values; j++)                *(values+j)=*(values+j+1);        }    }    return float *newtab = (float *) malloc(sizeof(float)*(n_values-1));}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++){        if (*values+i==value_to_supress){            for (int j=i; j<n_values; j++)                *(values+j)=*(values+j+1);        }    }    float *newtab = (float *) malloc(sizeof(float)*(n_values-1));    return newtab;}
float* suppress_value(float value_to_supress, float values[], int n_values){    float * res;        int size_element = sizeof(float);    int n_element = n_values - 1;    res = malloc(n_element * size_element);    for(cpt= 0; cpt < n_values;cpt++)    {        if(value_to_find = values)        values[cpt] = values[cpt+1];    }    return res;}
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i<n_values-1; i++){        if (values[i] != value_to_supress)            end[i] = values[i];            }        return end; }
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res[];    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt;            for(cpt=0; cpt<n_values; cpt++){        if(value[cpt] != value_to_suppress){            res[cpt] = value[cpt];        }    }    return res;}
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i<n_values-1; i++){        if (value_to_supress == values[i])            end[i] = values[i+1];        else            end[i] = values[i];            }        return end; }
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt;            for(cpt=0; cpt<n_values; cpt++){        if(value[cpt] != value_to_suppress){            res[cpt] = value[cpt];        }    }    return res;}
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i<n_values-1; i++){        if (value_to_supress == values[i])            end[i] = values[i+1];        else            end[i] = values[i];            }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *newtab = (float *) malloc(sizeof(float)*(n_values-1));    for (int i=0; i<n_values; i++){        if (*values+i==value_to_supress){            for (int j=i; j<n_values; j++)                *(values+j)=*(values+j+1);            n_values--        }        *(newtab+i)=*(values+i)    }    return newtab;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *newtab = (float *) malloc(sizeof(float)*(n_values-1));    for (int i=0; i<n_values; i++){        if (*values+i==value_to_supress){            for (int j=i; j<n_values; j++)                *(values+j)=*(values+j+1);            n_values--;        }        *(newtab+i)=*(values+i)    }    return newtab;}
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i<n_values-1; i++){        if (value_to_supress == values[i])            end[i] = values[i+1];        else            end[i] = values[i];            }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i<n_values-1; i++){        if (value_to_supress == values[i])            end[i] = values[i+1];        else            end[i] = values[i];            }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *newtab = (float *) malloc(sizeof(float)*(n_values-1));    for (int i=0; i<n_values; i++){        if (*values+i==value_to_supress){            for (int j=i; j<n_values; j++)                *(values+j)=*(values+j+1);            n_values--;        }        *(newtab+i)=*(values+i);    }    return newtab;}
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt;            for(cpt=0; cpt<n_values; cpt++){        if(value[cpt] != value_to_suppress){            res[cpt] = value[cpt];        }    }    return res;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i<n_values-1; i++){        if (value_to_supress == values[i])            end[i] = values[i+1];        else            end[i] = values[i];            }        return end; }
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt;            for(cpt=0; cpt<n_values; cpt++){        if(value[cpt] == value_to_suppress){            res[cpt] = value[cpt+1];        else            res[cpt] = value[cpt];        }    }    return res;}
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i<n_values-1; i++){        if (value_to_supress == values[i])            end[i] = values[i+1];        else            end[i] = values[i];            }        return end; }
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt;            for(cpt=0; cpt<n_values; cpt++){        if(value[cpt] == value_to_suppress){            res[cpt] = value[cpt+1];        else            res[cpt] = value[cpt];        }    }    return res;}
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt;            for(cpt=0; cpt<n_values; cpt++){        if(value[cpt] == value_to_suppress){            res[cpt] = value[cpt+1];        }        else{            res[cpt] = value[cpt];        }    }    return res;}
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt;            for(cpt=0; cpt<n_values; cpt++){        if(value[cpt] != value_to_suppress){            res[cpt] = value[cpt];        }    }    return res;}
float* suppress_value (float value_to_supress, float values[], int n_values){        float *p;    int len = n_values - 1, cpt=0, i, j;    p = (float*)malloc(sizeof(float)*len);        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt;    for (j = cpt+2; j < n_values; cpt++){        *(p+i) = values[j];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values){        float *p;    int len = n_values - 1, cpt=0, i, j;    p = (float*)malloc(sizeof(float)*len);        while (values[cpt] != value_to_supress){                *(p+cpt) = values[cpt];        cpt++;            }    i = cpt;    for (j = cpt+1; j < n_values; cpt++){        *(p+i) = values[j];    }    return p;}
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress != values[i]){                end[i] = values[j];            else                j += 1;                end[i] = values[j];            }        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt=0, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));    while (values[cpt] != value_to_supress){ *(p+cpt) = values[cpt];     cpt++; }     i = cpt;     for (j = cpt+1; j < n_values; j++){         *(p+i) = values[j];         i++; }         return p;     }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress != values[i])                end[i] = values[j];            else                j += 1;                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt=0, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     for (j = cpt+2; j < n_values; j++){         *(p+i) = values[j];         i++; }         return p;     }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt=0, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     for (j = cpt; j < n_values; j++){         *(p+i) = values[j];         i++; }         return p;     }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt=0, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     for (j = cpt+1; j < n_values; j++){         *(p+i) = values[j];         i++; }         return p;     }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt=0, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     for (j = cpt-1; j < n_values; j++){         *(p+i) = values[j];         i++; }         return p;     }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt=0, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     for (j = cpt+1; j < n_values; j++){         *(p+i) = values[j];         i++; }         return p;     }
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt = 0;            while(value[cpt] != value_to_suppress){        res[cpt] = value[cpt];        cpt++;    }    for (cpt; cpt<n_value; cpt++){        res[cpt] = value[cpt+1];    }    return res;}
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt = 0;            while(value[cpt] != value_to_suppress){        res[cpt] = value[cpt];        cpt++;    }    for (cpt; cpt<n_values; cpt++){        res[cpt] = value[cpt+1];    }    return res;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt=0, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt+1;     for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;             }         return p;     }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt=0, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt-1;     for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;             }         return p;     }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt=0, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;             }         return p;     }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i])                j += 1;                end[i] = values[j];            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i])                j += 1;                end[i] = values[j];            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;             }         return p;     }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;             }         return p;     }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i])                end[i] = values[j];            else                j += 1;                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i])                end[i] = values[j];            else                j += 1;                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i])                end[i] = values[j];            else                j += 1;                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress != values[i])                end[i] = values[j];            else                j += 1;                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;             }    for (cpt = 0; cpt < n_values-1; cpt++){        printf("%d", *(p+cpt))    }        return p;     }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;             }    for (cpt = 0; cpt < n_values-1; cpt++){        printf("%d", *(p+cpt));    }        return p;     }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;             }    for (cpt = 0; cpt < n_values-1; cpt++){        printf("%d ", *(p+cpt));    }        return p;     }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;             }    for (cpt = 0; cpt < n_values-1; cpt++){        printf("%d ", (p+cpt));    }        return p;     }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress != values[j])                end[i] = values[j];            else                j += 1;                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress != values[i])                end[i] = values[j];            else                j += 1;                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;             }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;             }        return p; }
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt = 0;            do         res[cpt] = value[cpt]        cpt++    while (value[cpt] != value_to_suppress)        for (cpt; cpt<n_values; cpt++){        res[cpt] = value[cpt+1];    }    return res;}
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt = 0;            do         res[cpt] = value[cpt];        cpt++;    while (value[cpt] != value_to_suppress)        for (cpt; cpt<n_values; cpt++){        res[cpt] = value[cpt+1];    }    return res;}
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j];            else                end[i] = values[j];            }        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i])                j += 1;                end[i] = values[j];            else                end[i] = values[j];                    }    }        return end; }
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt = 0;            do{        res[cpt] = value[cpt];        cpt++;    }    while (value[cpt] != value_to_suppress)        for (cpt; cpt<n_values; cpt++){        res[cpt] = value[cpt+1];    }    return res;}
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt = 0;            do{        res[cpt] = value[cpt];        cpt++;    }    while (value[cpt] != value_to_suppress);        for (cpt; cpt<n_values; cpt++){        res[cpt] = value[cpt+1];    }    return res;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j];            else                end[i] = values[j];            }        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;         printf("%d",*(p+cpt));    }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;         printf("%d",(p+cpt));    }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;         printf("%d",*(p+cpt));    }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j+1];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[i+1];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[i+1];            }            else                end[i] = values[i];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 (p+cpt) = values[cpt];         cpt++;         printf("%d",*(p+cpt));    }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 p+cpt = values[cpt];         cpt++;         printf("%d",*(p+cpt));    }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[i+1];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 (p+cpt) = &values[cpt];         cpt++;         printf("%d",*(p+cpt));    }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 p+cpt = &values[cpt];         cpt++;         printf("%d",*(p+cpt));    }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[i+1];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt = 0;            do{        res[cpt] = value[cpt];        cpt++;    }    while (value[cpt] != value_to_suppress);        for (cpt; cpt<n_values; cpt++){        res[cpt] = value[cpt+1];    }    return res;}
float* suppress_value(float value_to_suppress, float value[], int n_values){    float *res;    int size_element = sizeof(float);    int n_element = n_values -1;        res =(float*) malloc(size_element * n_element);        int cpt = 0;            do{        res[cpt] = value[cpt];        cpt++;    }    while (value[cpt] != value_to_suppress);        for (cpt; cpt<n_values; cpt++){        res[cpt] = value[cpt+1];    }    return res;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[i+1];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[i+1];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[i+1];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float p;     int len = n_values - 1, cpt, i, j;     p = (float) malloc(sizeof(float)*(n_values-1));    cpt = 0;    while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){         *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float p;     int len = n_values - 1, cpt, i, j;     p = (float) malloc(sizeof(float)*(n_values-1));    cpt = 0;    while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){         *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[i+1];            }            else                end[i] = values[i];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = i; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[i+1];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = i; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[i+1];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = i; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[i+1];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = i; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[i+1];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = i; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[i+1];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i<n_values-1; i++){        if (value_to_supress == values[i])            end[i] = values[i+1];        else            end[i] = values[i];            }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = i; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j];            }            else                end[i] = values[j];        }    }        return end; }
float* supress_value(float value_to_suppress, float values[],int n_values){    int i,j;    for(i=0;i<n_values;i++)    {        if(values[i]==value_to_suppress)        {            for(j=i;j<n_values-1;j++)            {                values[j]=values[j+1];            }            return values;        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float p;     int len = n_values - 1, cpt, i, j;     p = (float) malloc(sizeof(float)*(n_values-1));    cpt = 0;    while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){         *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values){    float p;     int len = n_values - 1, cpt, i, j;     p = (float) malloc(sizeof(float)*(n_values-1));    cpt = 0;    while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){         *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values){    float p;     int len = n_values - 1, cpt, i, j;     p = (float) malloc(sizeof(float)*(n_values-1));    cpt = 0;    while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){         *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = i; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 1; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 5; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 2; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = -1; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = i; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = i; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = i; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = 0; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = i; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[i+1];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = i; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[i+1];            }            else                end[i] = values[i];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        for(j = i; j < n_values-1; j++){            if (value_to_supress == values[i]){                j += 1;                end[i] = values[j];            }            else                end[i] = values[j];        }    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j, cpt = 0;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        j = i + cpt        if (value_to_supress == values[i]){            cpt += 1;            end[i] = values[j];        }        else            end[i] = values[j];    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j, cpt = 0;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        j = i + cpt;        if (value_to_supress == values[i]){            cpt += 1;            end[i] = values[j];        }        else            end[i] = values[j];    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j, cpt = 0;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        j = i + cpt;        if (value_to_supress == values[i]){            cpt += 1;            end[i] = values[j+1];        }        else            end[i] = values[j];    }        return end; }
float* suppress_value (float value_to_supress, float values[], int n_values){        float * end;    int i, j, cpt = 0;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        j = i + cpt;        if (value_to_supress == values[i]){            cpt += 1;            end[i] = values[j+1];        }        else            end[i] = values[j];    }        return end; }
float* suppress_value (float value_to_supress, float values[],                     int n_values){        //float res[30]; //marche po             // on doit utiliser les pointeur        //pointeur = une variable qui contient l'addresse mémoire    //d'une autre variable  ?????            float * res; //pointeur (variable qui contiendra une addresse)            //malloc permet de créer des tableaux qui    // ne SERONT PAS détruit à la fin de la fonction        //pour créer un tableau  en mémoire    //il faut spécifier la taille du tableau     // il faut 2 ingrédients :     // il faut savoir quel la taille de chaque élément    // combien d'élement vous voulez dans votre tableau        //int size_element = sizeof(float);        int n_element = n_values -1;         //malloc est une fonction qui renvoie une adresse    //res = malloc(n_element * size_element);        res = (float *) malloc(sizeof(float) * n_element);                res = (float *) calloc(n_element, sizeof(float));    //à partir de la j'ai un tableau de n_element float !        //char *tableau_char = (char*) malloc(sizeof(char) * 22);    res[0] = 1;            return res;         } 
float* suppress_value (float value_to_supress, float values[],                     int n_values){        //float res[30]; //marche po             // on doit utiliser les pointeur        //pointeur = une variable qui contient l'addresse mémoire    //d'une autre variable  ?????            float * res; //pointeur (variable qui contiendra une addresse)            //malloc permet de créer des tableaux qui    // ne SERONT PAS détruit à la fin de la fonction        //pour créer un tableau  en mémoire    //il faut spécifier la taille du tableau     // il faut 2 ingrédients :     // il faut savoir quel la taille de chaque élément    // combien d'élement vous voulez dans votre tableau        //int size_element = sizeof(float);        int n_element = n_values -1;         //malloc est une fonction qui renvoie une adresse    //res = malloc(n_element * size_element);        //res = (float *) malloc(sizeof(float) * n_element);                res = (float *) calloc(n_element, sizeof(float));    //à partir de la j'ai un tableau de n_element float !        //char *tableau_char = (char*) malloc(sizeof(char) * 22);    res[0] = 1;            return res;         } 
float* suppress_value (float value_to_supress, float values[], int n_values){    float p;     int len = n_values - 1, cpt, i, j;     p = (float) malloc(sizeof(float)*(n_values-1));    cpt = 0;    while (values[cpt] != value_to_supress){         *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){         *(p+i) = values[j];         i++;     }        return p; }
float suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (l=i; l<(n_values-1); l++ ){    values[l]=values[l+1];    values[n_values]=values[n_values-1];    }    }    }}
float suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (int l=i; l<(n_values-1); l++ ){    values[l]=values[l+1];    values[n_values]=values[n_values-1];    }    }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (int l=i; l<(n_values-1); l++ ){    values[l]=values[l+1];    values[n_values]=values[n_values-1];    }    }    }}
float suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (int l=i; l<(n_values-1); l++ ){    values[l]=values[l+1];    values[n_values]=values[n_values-1];    }    }    }}
float suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (int l=i; l<(n_values-1); l++ ){    values[l]=values[l+1];    values[n_values]=values[n_values-1];    return 0;    }    }    }}
float* suppress_value (float value_to_supress, float* values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (int l=i; l<(n_values-1); l++ ){    values[l]=values[l+1];    values[n_values]=values[n_values-1];    }    }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (int l=i; l<(n_values-1); l++ ){    values[l]=values[l+1];    values[n_values]=values[n_values-1];    }    }    }}
void suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (int l=i; l<(n_values-1); l++ ){    values[l]=values[l+1];    values[n_values]=values[n_values-1];    }    }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (int l=i; l<(n_values-1); l++ ){    values[l]=values[l+1];    values[l]=values[n_values-1];    }    return &values[i]    }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (int l=i; l<(n_values-1); l++ ){    values[l]=values[l+1];    values[l]=values[n_values-1];    }    return &values[i];    }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    return &values[i];    for (int l=i; l<(n_values-1); l++ ){    values[l]=values[l+1];    values[l]=values[n_values-1];    }    }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (int l=i; l<(n_values-1); l++ ){    values[l]=values[l+1];    float* values[l]=values[n_values-1];    }    }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (int l=i; l<(n_values-1); l++ ){    values[l]=values[l+1];    float* values[l]=values[n_values];    }    }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (int l=i; l<(n_values-1); l++ ){    float* values[n_values-1]=values[n_values];    }    }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (int l=i; l<(n_values-1); l++ ){    float* values[n_values]=values[n_values-1];    }    }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (int l=i; l<(n_values-1); l++ ){    int n_values=n_values-1;    float* values[n_values]    }    }    }}
float* suppress_value (float value_to_supress, float* values[], int n_values) {    for (int i=0; i<n_values; i++) {    if (values[i]== value_to_supress){    for (int l=i; l<(n_values-1); l++ ){    int n_values=n_values-1;    float* values[n_values]    }    }    }}
float* suppress_value (float value_to_supress, float values[], int n_values)  {    int i, ii;    float tempo;    for (i=0; i<n_values; ++i) {        if (*(values+i) == value_to_supress) {            for (ii = i; ii < n_values; ++ii)                *(values + ii - 1) = *(values + ii);        }    }    return values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float* suppress_value (float value_to_supress, float values[], int n_values)  {    int i, ii;    float tempo;    for (i=0; i<n_values; ++i) {        if (*(values+i) == value_to_supress) {            for (ii = i; ii < n_values - 1; ++ii)                *(values + ii) = *(values + ii + 1);        }    }    return values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1, temp;    while (i < n_values && test) {        if (*(values + i) == value_to_find) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        temp = *(values + index);        for (i = index; i < n_values - 1; i++)            *(values + i) = *(values + i + 1);        *(values + n_values - 1) = 0;    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1, temp;    while (i < n_values && test) {        if (*(values + i) == value_to_supress) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        temp = *(values + index);        for (i = index; i < n_values - 1; i++)            *(values + i) = *(values + i + 1);        *(values + n_values - 1) = 0;    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1;    while (i < n_values && test) {        if (*(values + i) == value_to_supress) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        new_values = (int*) malloc ((n_values - 1) * sizeof(int))        for (i = 0; i < index; i++)            *(new_values + i) = *(values + i)        for (i = index; i < n_values - 1; i++)            *(new_values + i) = *(values + i + 1);        return new_values;    }    else        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1;    while (i < n_values && test) {        if (*(values + i) == value_to_supress) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        new_values = (int*) malloc ((n_values - 1) * sizeof(int));        for (i = 0; i < index; i++)            *(new_values + i) = *(values + i)        for (i = index; i < n_values - 1; i++)            *(new_values + i) = *(values + i + 1);        return new_values;    }    else        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1;    while (i < n_values && test) {        if (*(values + i) == value_to_supress) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        new_values = (int*) malloc ((n_values - 1) * sizeof(int));        for (i = 0; i < index; i++)            *(new_values + i) = *(values + i);        for (i = index; i < n_values - 1; i++)            *(new_values + i) = *(values + i + 1);        return new_values;    }    else        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1, *new_values;    while (i < n_values && test) {        if (*(values + i) == value_to_supress) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        new_values = (int*) malloc ((n_values - 1) * sizeof(int));        for (i = 0; i < index; i++)            *(new_values + i) = *(values + i);        for (i = index; i < n_values - 1; i++)            *(new_values + i) = *(values + i + 1);        return new_values;    }    else        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1;    float* new_values;    while (i < n_values && test) {        if (*(values + i) == value_to_supress) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        new_values = (int*) malloc ((n_values - 1) * sizeof(int));        for (i = 0; i < index; i++)            *(new_values + i) = *(values + i);        for (i = index; i < n_values - 1; i++)            *(new_values + i) = *(values + i + 1);        return new_values;    }    else        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1;    float* new_values;    while (i < n_values && test) {        if (*(values + i) == value_to_supress) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        new_values = (float*) malloc ((n_values - 1) * sizeof(float));        for (i = 0; i < index; i++)            *(new_values + i) = *(values + i);        for (i = index; i < n_values - 1; i++)            *(new_values + i) = *(values + i + 1);        return new_values;    }    else        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;index = -1;    for(i=0;i<n_values;i++){        if(value_to_supress == values[i]){            index = i;            break;        }    }        if(index == -1){        return values[];    }        for(i=index; i<n_values;i++){        values[i] = values[i+1];    }    return values[];    } 
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;index = -1;    float *arr;    arr = values;        for(i=0;i<n_values;i++){        if(value_to_supress == *(arr+i)){            index = i;            break;        }    }        if(index == -1){        return arr;    }        for(i=index; i<n_values-1;i++){        *(arr+i) = *(arr+i+1);    }    return values[];    } 
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;index = -1;    float *arr;    arr = values;        for(i=0;i<n_values;i++){        if(value_to_supress == *(arr+i)){            index = i;            break;        }    }        if(index == -1){        return arr;    }        for(i=index; i<n_values-1;i++){        *(arr+i) = *(arr+i+1);    }    return arr;    } 
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,index = -1;    float *arr;    arr = values;        for(i=0;i<n_values;i++){        if(value_to_supress == *(arr+i)){            index = i;            break;        }    }        if(index == -1){        return arr;    }        for(i=index; i<n_values-1;i++){        *(arr+i) = *(arr+i+1);    }    return arr;    } 
float* suppress_value (float value_to_supress, float values[], int n_values) {        int i=0;        while (i<n_values)    {        if (*(values+i) == value_to_supress)            {                for (i;i<n_values-1;i++)                    *(values+i) = *(values+1+i);                n_values--;                break;            }        i++;    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {        int i=0;        while (i<n_values-1)    {        if (*(values+i) == value_to_supress)            {                for (i;i<n_values-1;i++)                    *(values+i) = *(values+1+i);                n_values--;                break;            }        i++;    }}
float* suppress_value(float value_to_supress, float values[], int n_values){    int i=0, j, check = 1;    float* A;    while(i < n_values && check == 1)    {        if(values[i] == value_to_supress)        {            for(j=i;j<n_values-1;j++)            {                values[j] = values[j+1];            }            A = (float*) malloc((n_values-1)*sizeof(float));            for(j=0;j<n_values-1;j++)                *(A+j) = values[j];            check = 0;        }        i ++;    }    return A;}
float* suppress_value (float value_to_supress, float values[], int n_values) {        int i=j=0;    float new_values[n_values-1];    while (i<n_values-1)    {        if (*(values+i) == value_to_supress)            {                for (j=0;j<i;j++)                    *(new_values+j) = *(values+j);                for (j=i+1;j<n_values-1;j++)                    *(new_values+j) = *(values+j+1);                break;            }        i++;    }    return new_values;}
float* suppress_value(float value_to_supress, float values[], int n_values){    int i=0, j, check = 1;    float* A;    while(i < n_values && check == 1)    {        if(*(values + i) == value_to_supress)        {            for(j=i;j<n_values-1;j++)            {                *(values+j) = *(values+j+1);            }            A = (float*) malloc((n_values-1)*sizeof(float));            for(j=0;j<n_values-1;j++)                *(A+j) = *(values+j);            check = 0;        }        i ++;    }    return A;}
float *suppress_value(float value_to_supress, float values[], int n_values) {  for (int i = 0; i < n_values; i++) {    if (*(values + i) == value_to_supress) {      for (int j = i; j < n_values - 1; j++) {        *(values + j) = *(values + j + 1);      }      return values;    }  }  return values;}
float* suppress_value (float value_to_suppress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values-1) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_suppress)            *(list2+cpt2) = *(values+cpt);    return list2;}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values) {    float temp;    temp = *values;    int i = 0;    while(values[i]!= value_to_supress)        i++;    for( i; i<n_values-1; i++)    {        (values[i]) = (values[i+1]);    }    n_values--;    new_tab=(float *) malloc(n_values * sizeof(float));    for( i=0; i <n_values; i++)    {        *(new_tab+i) = (values[i]);    }    return new_tab;}
float* suppress_value (float value_to_suppress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values-1) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_suppress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1*    return list2;}
float* suppress_value (float value_to_suppress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values-1) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_suppress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1*    return &list2;}
float* suppress_value (float value_to_suppress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values-1) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_suppress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1;    return list2;}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values) {    float temp;    tab = &values;    int i = 0;    while(*(tab+i)!= value_to_supress && i<n_values)        i++;    for( i; i<n_values-1; i++)    {        *(tab+i) = *(tab+i+1);    }    n_values--;    new_tab=(float *) malloc(n_values * sizeof(float));    for( i=0; i <n_values; i++)    {        *(new_tab+i) = (tab+i);    }    return new_tab;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values-1) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_supress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1;    return list2;}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values) {    float temp;    tab = &values;    int i = 0;    while(*(tab+i)!= value_to_supress && i<n_values)        i++;    for( i; i<n_values-1; i++)    {        *(tab+i) = *(tab+i+1);    }    n_values--;    new_tab float*;    new_tab=(float *) malloc(n_values * sizeof(float));    for( i=0; i <n_values; i++)    {        *(new_tab+i) = (tab+i);    }    return new_tab;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0, j=0;    float* new_values;    new_values = (float*)malloc( (n_values-1) * sizeof(float));    if (new_values == NULL)        exit(0);    while (i<n_values-1)    {        if (*(values+i) == value_to_supress)            {                for (j=0;j<i;j++)                    *(new_values+j) = *(values+j);                for (j=i;j<n_values-1;j++)                    *(new_values+j) = *(values+j+1);                break;            }        i++;    }    return new_values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values) {    float temp;    float* tab,new_tab;    tab = &values;    int i = 0;    while(*(tab+i)!= value_to_supress && i<n_values)        i++;    for( i; i<n_values-1; i++)    {        *(tab+i) = *(tab+i+1);    }    n_values--;    new_tab=(float *) malloc(n_values * sizeof(float));    for( i=0; i <n_values; i++)    {        *(new_tab+i) = (tab+i);    }    return new_tab;}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    float temp;    float* tab, * new_tab;    tab = &values;    int i = 0;    while(*(tab+i)!= value_to_supress && i<n_values)        i++;    for( i; i<n_values-1; i++)    {        *(tab+i) = *(tab+i+1);    }    n_values--;    new_tab = (float *) malloc(n_values * sizeof(float));    for( i=0; i <n_values; i++)    {        *(new_tab+i) = *(tab+i);    }    return new_tab;}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    float temp;    float* tab, * new_tab;    tab = values;    int i = 0;    while(*(tab+i)!= value_to_supress && i<n_values)        i++;    for( i; i<n_values-1; i++)    {        *(tab+i) = *(tab+i+1);    }    n_values--;    new_tab = (float *) malloc(n_values * sizeof(float));    for( i=0; i <n_values; i++)    {        *(new_tab+i) = *(tab+i);    }    return new_tab;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_supress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1;    return list2;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_supress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1;    return list2;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_supress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1;    return list2;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values-1) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_supress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1;    return *list2;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values-1) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_supress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1;    return *(list2);}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values-1) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_supress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1;    return &(list2);}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values-1) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_supress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1;    return &(list2);}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,j=0,test=0;    while(i<n_values && test=0){        if(*(values+i)==value_to_supress){            for(j=i;j<n_values-1;j++)            *(values+j)=*(values+j+1);            test=1;                                }        i++;    }    n_values--;    return 1;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,j=0,test=0;    while(i<n_values && test=0){        if(*(values+i)==value_to_supress){            for(j=i;j<n_values-1;j++)            *(values+j)=*(values+j+1);            test=1;                                }        i++;    }    n_values--;   }
float* suppress_value (float value_to_supress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values-1) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_supress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1;    return list2;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,j=0,test=0;    while(i<n_values && test==0){        if(*(values+i)==value_to_supress){            for(j=i;j<n_values-1;j++)            *(values+j)=*(values+j+1);            test=1;                                }        i++;    }    n_values--;   }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,j=0,test=0;    while(i<n_values && test==0){        if(*(values+i)==value_to_supress){            for(j=i;j<n_values-1;j++)            *(values+j)=*(values+j+1);            test=1;                                }        i++;    }    n_values--;    return values;   }
float* suppress_value (float value_to_supress, float values, int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values-1) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_supress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1;    return list2;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,j=0,test=0;    while(i<n_values && test==0){        if(*(values+i)==value_to_supress){            for(j=i;j<n_values-1;j++)            *(values+j)=*(values+j+1);            test=1;                                }        i++;    }    n_values--;    return values;   }
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    i, found=0;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(i < n_values)        {            *(values+i) = *(values+i+1);            i++;            found=1;        }    }}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, found=0;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(i < n_values)        {            *(values+i) = *(values+i+1);            i++;            found=1;        }    }}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i,     for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(i < n_values)        {            *(values+i) = *(values+i+1);            i++;        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values-1) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (values[cpt]) != value_to_supress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1;    return list2;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values-1) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) == value_to_supress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1;    return list2;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(i < n_values)        {            *(values+i) = *(values+i+1);            i++;        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values-1) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_supress)            *(list2+cpt2) = *(values+cpt);            cpt2 += 1;    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int cpt, cpt2;    float *list2;    list2 = (float*) malloc((n_values-1) * sizeof(float));    cpt2 = 0;    for (cpt = 0; cpt < n_values; cpt++)        if (*(values+cpt) != value_to_supress) {            *(list2+cpt2) = *(values+cpt);            cpt2 += 1;        }    return list2;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,j=0,test=0;    while(i<n_values && test==0){        if(*(values+i)==value_to_supress){            for(j=i;j<n_values-1;j++)            *(values+j)=*(values+j+1);            test=1;                                }        i++;    }       return values;   }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,j=0,test=0;    while(i<n_values && test==0){        if(*(values+i)==value_to_supress){            for(j=i;j<n_values-1;j++)            *(values+j)=*(values+j+1);            test=1;                                }        i++;    }       return values;   }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,j=0,test=0;    while(i<n_values && test==0){        if(*(values+i)==value_to_supress){            for(j=i;j<n_values-1;j++)            *(values+j)=*(values+j+1);            test=1;                                }        i++;    }       return values;   }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,j=0,test=0;    while(i<n_values && test==0){        if(*(values+i)==value_to_supress){            for(j=i;j<n_values-1;j++)            *(values+j)=*(values+j+1);            test=1;                                }        i++;    }       return values;   }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,j=0,test=0;    while(i<n_values && test==0){        if(*(values+i)==value_to_supress){            for(j=i;j<n_values-1;j++)            *(values+j)=*(values+j+1);            test=1;                                }        i++;    }       return values;   }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,j=0,test=0;    while(i<n_values && test==0){        if(*(values+i)==value_to_supress){            for(j=i;j<n_values-1;j++)            *(values+j)=*(values+j+1);            test=1;                                }        i++;    }     n_values--;    return values;   }
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }}
float* suppress_value(float value_to_suppress, float values[], int n_values){    int i;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);      {        while(i < n_values)        {            *(values+i) = *(values+i+1);            i++;        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;        // Search value in array    for (i = 0; i< n_values; i++)        if (arr[i] == values_to_supress)            break;                // If value found    if (i < n_values){        for (int j=i; j < n_values - 1; j++){            arr[j] = arr[j+1];        }    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr = values[]        // Search value in array    for (i = 0; i< n_values; i++)        if (*(arr+i) == values_to_supress)            break;                // If value found    if (i < n_values){        for (int j=i; j < n_values - 1; j++){            *(arr + j) = *(arr + j + 1);        }    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr = values[]        // Search value in array    for (i = 0; i< n_values; i++){        if (*(arr+i) == values_to_supress){            break;        }                }                        // If value found    if (i < n_values){        for (int j=i; j < n_values - 1; j++){            *(arr + j) = *(arr + j + 1);        }    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr = values[];        // Search value in array    for (i = 0; i< n_values; i++)        if (*(arr+i) == values_to_supress)            break;                // If value found    if (i < n_values){        for (int j=i; j < n_values - 1; j++){            *(arr + j) = *(arr j + 1);        }    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr = values[];        // Search value in array    for (i = 0; i< n_values; i++)        if (*(arr+i) == value_to_supress)            break;                // If value found    if (i < n_values){        for (int j=i; j < n_values - 1; j++){            *(arr + j) = *(arr j + 1);        }    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr = values;        // Search value in array    for (i = 0; i< n_values; i++)        if (*(arr+i) == value_to_supress)            break;                // If value found    if (i < n_values){        for (int j=i; j < n_values - 1; j++){            *(arr + j) = *(arr j + 1);        }    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr = values;        // Search value in array    for (i = 0; i< n_values; i++)        if (*(arr+i) == value_to_supress)            break;                // If value found    if (i < n_values){        for (int j=i; j < n_values - 1; j++){            *(arr + j) = *(arr + j + 1);        }    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr = values;        // Search value in array    for (i = 0; i< n_values; i++)        if (*(arr+i) == value_to_supress)            break;                // If value found    if (i < n_values){        for (int j=i; j < n_values - 1; j++){            *(arr + j) = *(arr + j + 1);        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* new_values    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){                        *(new_values+i) = *(values +i);        }    }    return new_values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* new_values;    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){                        *(new_values+i) = *(values +i);        }    }    return new_values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    arr = values;        // Search value in array    for (i = 0; i< n_values; i++)        if (*(arr+i) == value_to_supress)            break;                // If value found    if (i < n_values){        for (int j=i; j < n_values - 1; j++){            *(arr + j) = *(arr + j + 1);        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    arr = values;        }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    arr = values;        // Search value in array    for (i = 0; i< n_values; i++){        if (*(arr+i) == value_to_supress){            break;        }                }                        // If value found    if (i < n_values){        for (int j=i; j < n_values - 1; j++){            *(arr + j) = *(arr + j + 1);        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    arr = values;        // Search value in array    for (i = 0; i< n_values; i++){        if (*(arr+i) == value_to_supress){            break;        }    }                       }
float* suppress_value (float value_to_supress, float values[], int n_values){    int new_values = 0;    float* new_values;    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){            new_values++;        }    }    new_values = (float*)malloc(new_values*sizeof(float));    for(int i=0; i < new_values; i++){        *(new_values+i) = *(values +i);    }    return new_values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    arr = values;        // Search value in array    for (i = 0; i< n_values; i++){        if (*(arr+i) == value_to_supress){            break;        }    }                        // If value found        for (int j = i; j < n_values - 1; j++){            *(arr + j) = *(arr + j + 1);        }    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    arr = values;        // Search value in array    for (i = 0; i< n_values; i++){        if (*(arr+i) == value_to_supress){            break;        }    }        }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    arr = values;        // Search value in array    for (i = 0; i< n_values; i++){        if (*(arr+i) == value_to_supress){            break;        }    }    printf("%d", i);}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    arr = values;        // Search value in array    for (i = 0; i< n_values; i++){        if (*(arr+i) == value_to_supress){            break;        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    int new_values = 0;    float* new_array;    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){            new_values++;        }    }    new_array = (float*)malloc(new_values*sizeof(float));    for(int i=0; i < new_values; i++){        *(new_array+i) = *(values +i);    }    return new_values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int new_values = 0;    float* new_array;    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){            new_values++;        }    }    new_array = (float*)malloc(new_values*sizeof(float));    for(int i=0; i < new_values; i++){        *(new_array+i) = *(values +i);    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    arr = values;                // If value found    if (i < n_values){        for (int j = i; j < n_values - 1; j++){            *(arr + j) = *(arr + j + 1);        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){            *(values+i) = *(values +i);        }        if (*(values +i) == value_to_supress){            *(values +i) = *(values +i+1)        }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    arr = values;        // Search value index in array    for (i = 0; i< n_values; i++){        if (*(arr+i) == value_to_supress){            break;        }    }                    }
float* suppress_value (float value_to_supress, float values[], int n_values){    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){            *(values+i) = *(values +i);        }        if (*(values +i) == value_to_supress){            *(values +i) = *(values +i+1);        }    }    return values;}
#include <stdio.h>#include <stdlib.h>printf("Hello world")
#include <stdio.h>#include <stdlib.h>printf("Hello world");
#include <stdio.h>#include <stdlib.h>void main(void){    printf("Hello world");}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    arr = values;        // Search value index in array    for (i = 0; i< n_values; i++){        if (*(arr+i) == value_to_supress){            break;        }    }        // Remove value        for (i; i < n_values; i++){        *(arr + i) = *(arr + i + 1);    }}
#include <stdio.h>#include <stdlib.h>void suppress_value(void){    printf("Hello world");}
float* suppress_value (float value_to_supress, float values[], int n_values){    int new_values = 0;    float* new_array;    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){            new_values++;        }    }    new_array = (float*)malloc(new_values*sizeof(float));    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){            *(new_array+i) = *(values+i)        }    }    return new_array;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    printf("Hello world");}
float* suppress_value (float value_to_supress, float values[], int n_values){    int new_values = 0;    float* new_array;    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){            new_values++;        }    }    new_array = (float*)malloc(new_values*sizeof(float));    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){            *(new_array+i) = *(values+i);        }    }    return new_array;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_supress, float values[], int n_values){    printf("Hello world");}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_supress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        return 0;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int new_values = 0;    float* new_array;    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){            new_values++;        }    }    new_array = (float*)malloc(new_values*sizeof(float));    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){            *(new_array+i) = *(values+i);        }        else{            *(new_array+i) = *(values+i+1)        }    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int new_values = 0;    float* new_array;    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){            new_values++;        }    }    new_array = (float*)malloc(new_values*sizeof(float));    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){            *(new_array+i) = *(values+i);        }        else{            *(new_array+i) = *(values+i+1);        }    }    return new_array;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        return 0;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        return 0;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    float *pol    arr = values;        // Search value index in array    for (i = 0; i< n_values; i++){        if (*(arr+i) == value_to_supress){            break;        }    }        // Remove value}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    arr = values;        // Search value index in array    for (i = 0; i< n_values; i++){        if (*(arr+i) == value_to_supress){            break;        }    }        // Remove value}
float* suppress_value (float value_to_supress, float values[], int n_values){    }
float* suppress_value (float value_to_supress, float values[], int n_values) 
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    printf("Hello");        return 0;}
float* suppress_value(float value_to_suppress, float values[], int n_values){    printf("Hello");        return 0;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    printf("Hello");        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    float *res;    arr = values;        // Search value index in array    for (i = 0; i< n_values; i++){        if (*(arr+i) == value_to_supress){            break;            *(res + i) = *(arr + i);        }    }        // Remove value}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){     int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    float *res;    arr = values;        // Search value index in array    for (i = 0; i < n_values; i++){        *(res + i) = *(arr + i);        if (*(arr+i) == value_to_supress){            break;        }    }        // Remove value}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    float *res;    arr = values;        // Search value index in array    for (i = 0; i < n_values; i++){        *res + i = *(arr + i);        if (*(arr+i) == value_to_supress){            break;        }    }        // Remove value}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p, o;    float *result;    p=-1;    o=0;    result = (float*)malloc(n_values*sizeof(float));    for (i=0; i<n values; i++)        if(*(values+i)== value_to_supress)            p=i;    for (i=0;i<n_values-1; i++){        if (i!=p)            *(result+i-o) = *(values+i);        else            if(o==0)                o=1;            }       return result;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){     int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values-1)        {            *(values+j) = *(values+j+1);            j++;        }    }    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){     int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values-1)        {            *(values+j) = *(values+j+1);            j++;        }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int new_values = 0;    float* new_array;    for(int i=0; i< n_values; i++){        if (*(values +i) != value_to_supress){            new_values++;        }    }        new_array = (float*)malloc(new_values*sizeof(float));        int i=0;    while(*(values+i) != value_to_supress){        *(new_array+i) = *(values+i);        i++;    }    for(i; i < n_values-1; i++){        *(new_array+i) = *(values+i+1);    }    return new_array;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){     int i, j;    for (i = 0; i < n_values-1 && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values-1)        {            *(values+j) = *(values+j+1);            j++;        }    }    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){     int i, j;    for (i = 0; i < n_values-1 && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values-1)        {            *(values+j) = *(values+j+1);            j++;        }    }    return values;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, del=0;    for(i=0;i<n_values-1;i++){        if(del==0 && *(values+i)==value_to_supress){            *(values+i)=*(values+i+1);            del=1;        }        if(del==1){            *(values+i)=*(values+i+1);        }    }    free(*(values+n_values-1));}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){     int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values-1)        {            *(values+j) = *(values+j+1);            j++;        }    }    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){     int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values-1)        {            *(values+j) = *(values+j+1);            j++;        }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    arr = values;        float res[n_values - 1];    float* res;        // Search value index in array    for (i = 0; i < n_values; i++){        *res + i = *(arr + i);        if (*(arr+i) == value_to_supress){            break;        }    }        // Remove value}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){     int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values-1)        {            *(values+j) = *(values+j+1);            j++;        }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    float *arr;    float *res;    arr = values;        // Search value index in array    for (i = 0; i < n_values; i++){        *(res + i) = *(arr + i);        if (*(arr+i) == value_to_supress){            break;        }    }        // Remove value}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1;    float* new_values;    while (i < n_values && test) {        if (*(values + i) == value_to_supress) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        new_values = (float*) malloc ((n_values - 1) * sizeof(float));        for (i = 0; i < index; i++)            *(new_values + i) = *(values + i);        for (i = index; i < n_values - 1; i++)            *(new_values + i) = *(values + i + 1);        return new_values;    }    else        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p, o;    float *result;    p=-1;    o=0;    result = (float*)malloc(n_values*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i)== value_to_supress)            p=i;                for (i=0; i<n_values-1; i++){        if (i!=p)            *(result+i-o) = *(values+i);        else            if(o==0)                o=1;            }       return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p, o;    float *result;    p=-1;    o=0;    result = (float*)malloc(n_values*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i)== value_to_supress)            p=i;                for (i=0; i<n_values-1; i++){        if (i!=p)            *(result+i) = *(values+i+o);        else            if(o==0)                o=1;            }       return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p, o;    float *result;    p=-1;    o=0;    result = (float*)malloc(n_values*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i)== value_to_supress)            p=i;                for (i=0; i<n_values-1; i++){        if (i!=p)            *(result+i) = *(values+i+o);        else            if(o==0)                o=1;            }       return result;}
float* suppress_value(float value_to_suppress, float values[], int n_values){    int i,j;    for (i=0;i<n_values;i++){        if (*(values+i) == value_to_suppress){            for (j=i; j<n_values-1; j++){                *(values + j) = *(values + j + 1);            }            return values;        }    }    return values;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, del=0;    for(i=0;i<n_values-1;i++){        if(del==0 && *(values+i)==value_to_supress){            *(values+i)=*(values+i+1);            del=1;        }        if(del==1){            *(values+i)=*(values+i+1);        }    }    free(values+n_values-1);}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, del=0;    for(i=0;i<n_values-1;i++){        if(del==0 && *(values+i)==value_to_supress){            *(values+i)=*(values+i+1);            del=1;        }        if(del==1){            *(values+i)=*(values+i+1);        }    }}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_supress, float values[], int n_values) {    float new_values[]}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt;    size = n_values - 1;    New_Arr = (int*)malloc(size*sizeof(int));}
float* suppress_value (float value_to_supress, float values[], int n_values) 
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p, o;    float *result;    p=-1;    o=0;    result = (float*)malloc(n_values*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i)== value_to_supress)            p=i;                for (i=0; i<n_values-1; i++){        if (i!=p)            *(result+i) = *(values+i+o);        else{            if(o==0)                o=1;            else                *(result+i) = *(values+i+o);            }    }       return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p, o;    float *result;    p=-1;    o=0;    result = (float*)malloc(n_values*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i)== value_to_supress)            p=i;                for (i=0; i<n_values-1; i++){        if (i!=p)            *(result+i) = *(values+i+o);        else{            if(o==0)                o=1;            else                *(result+i) = *(values+i+o);            }    }       return result;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt;    float *New_Arr;    size = n_values - 1;    New_Arr = (int*)malloc(size*sizeof(int));}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt;    float *New_Arr;    size = n_values - 1;    New_Arr = (float*)malloc(size*sizeof(float));}
float* suppress_value (float value_to_supress, float values[], int n_values){        int i = 0;        for (i=0; i<n_values; i++){        if (*(values+i) == value_to_find){}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc(n_values*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i)== value_to_supress)            p=i;                for (i=0; i<n_values-1; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)            *(result+i) = *(values+i+1);      return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc(n_values*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i)== value_to_supress)            p=i;                for (i=0; i<n_values-1; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)            *(result+i) = *(values+i+1);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){        int tableau[n_values-1];    int i;        for (i=0; i<n_values-1, i++){                *(tableau+i) == *(values+i+1)            }    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    float *arr;    arr = values;        // Search value index in array    for (i = 0; i < n_values; i++){        if (*(arr+i) == value_to_supress){            break;        }    }        // Remove value        for (i-1; i<n_values, i++){        j=i+1;        *(arr + i) = *(arr + j);    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    float *arr;    arr = values;        // Search value index in array    for (i = 0; i < n_values; i++){        if (*(arr+i) == value_to_supress){            break;        }    }        // Remove value        for (i-1; i<n_values; i++){        j=i+1;        *(arr + i) = *(arr + j);    }}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n",n);    for(i=0;i<n;i++)        printf("%d\n", *(A+i));    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt, cpt_bis;    float *New_Arr;    size = n_values - 1;    cpt_bis=0;    New_Arr = (float*)malloc(size*sizeof(float));    for (cpt = 0; cpt < n_values; cpt++){        if (*(values+cpt) != value_to_supress){            *(New_Arr+cpt_bis) = *(values+cpt);            cpt_bis++;        }    }    return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    float *arr;    arr = values;        // Search value index in array    for (i = 0; i < n_values; i++){        if (*(arr+i) == value_to_supress){            break;        }    }        // Remove value        for (i; i < n_values - 1 ; i++){        j=i+1;        *(arr + i) = *(arr + j);    }}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n",n);    for(i=0;i<n;i++)        printf("%d\n", *(values+i));    return values;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, del=0;    for(i=0;i<n_values-1;i++){        if(del==0 && *(values+i)==value_to_supress){            *(values+i)=*(values+i+1);            del=1;        }        if(del==1){            *(values+i)=*(values+i+1);        }    }}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n;i++)        printf("%d\n", *(values+i));    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    float *arr;    arr = values;        // Search value index in array    for (i = 0; i < n_values; i++){        if (*(arr+i) == value_to_supress){            break;        }    }        // Remove value}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%d\n", *(values+i));    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){        int size, cpt, cpt_bis;    float New_Arr;    size = n_values - 1;    cpt_bis=0;    New_Arr = (float)malloc(sizesizeof(float));    for (cpt = 0; cpt < n_values; cpt++){        if ((values+cpt) != value_to_supress){            *(New_Arr+cpt_bis) = *(values+cpt);            cpt_bis++;        }    }    return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt, cpt_bis;    float New_Arr;    size = n_values - 1;    cpt_bis=0;    New_Arr = (float)malloc(sizesizeof(float));    for (cpt = 0; cpt < n_values; cpt++){        if ((values+cpt) != value_to_supress){            *(New_Arr+cpt_bis) = *(values+cpt);            cpt_bis++;        }    }    return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc(n_values*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i)== value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i) = *(values+i+1);    }    return result;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%d\n", (values+i));    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%d\n", *(values+i));    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){        int size, cpt, cpt_bis;    float New_Arr;    size = n_values - 1;    cpt_bis=0;    New_Arr = (float)malloc(size sizeof(float));    for (cpt = 0; cpt < n_values; cpt++){        if ((values+cpt) != value_to_supress){            *(New_Arr+cpt_bis) = *(values+cpt);            cpt_bis++;        }    }    return New_Arr;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%d\n", *(values+i));    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%d\n", *(values+i));    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt, cpt_bis;    float New_Arr;    size = n_values - 1;    cpt_bis=0;    New_Arr = (float)malloc(sizesizeof(float));    for (cpt = 0; cpt < n_values; cpt++){        if ((values+cpt) != value_to_supress){            *(New_Arr+cpt_bis) = *(values+cpt);            cpt_bis++;        }    }    return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt, cpt_bis;    float New_Arr;    size = n_values - 1;    cpt_bis=0;    New_Arr = (float)malloc(sizesizeof(float));    for (cpt = 0; cpt < n_values; cpt++){        if ((values+cpt) != value_to_supress){            *(New_Arr+cpt_bis) = *(values+cpt);            cpt_bis++;        }    }    return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt, cpt_bis;    float New_Arr;    size = n_values - 1;    cpt_bis=0;    New_Arr = (float)malloc(sizesizeof(float));    for (cpt = 0; cpt < n_values; cpt++){        if ((values+cpt) != value_to_supress){            *(New_Arr+cpt_bis) = *(values+cpt);            cpt_bis++;        }    }    return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, i, i2;    float Arr;    size = n_values - 1;    i2=0;    Arr = (float)malloc(sizesizeof(float));    for (i = 0; i < n_values; i++){        if ((values+i) != value_to_supress){            *(Arr+cpt_bis) = *(values+i)        }    }    return Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc(n_values*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc(n_values*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){        int size, cpt, cpt_bis;        float New_Arr;        size = n_values - 1;        cpt_bis=0;        New_Arr = (float)malloc(sizesizeof(float));        for (cpt = 0; cpt < n_values; cpt++){                if ((values+cpt) != value_to_supress){                        *(New_Arr+cpt_bis) = *(values+cpt);                        cpt_bis++;        }    }        return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc(n_values*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc(n_values*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc(n_values*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt, cpt_bis;    float *New_Arr;    size = n_values - 1;    cpt_bis=0;    New_Arr = (float)malloc(sizesizeof(float));    for (cpt = 0; cpt < n_values; cpt++){        if (*(values+cpt) != value_to_supress){            *(New_Arr+cpt_bis) = *(values+cpt);            cpt_bis++;        }    }    return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float values2[100];    int i;    for(i=0; i<n_values; i++)    {        if (values[i]!=values_to supress)            values2[i]=values[i];        else            i++;    }    return values2}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt, cpt_bis;    float *New_Arr;    size = n_values - 1;    cpt_bis=0;    New_Arr = (float*)malloc(size*sizeof(float));    for (cpt = 0; cpt < n_values; cpt++){        if (*(values+cpt) != value_to_supress){            *(New_Arr+cpt_bis) = *(values+cpt);            cpt_bis++;        }    }    return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt, cpt_bis;    float *New_Arr;    size = n_values - 1;    cpt_bis=0;    New_Arr = (float*)malloc(size*sizeof(float));    for (cpt = 0; cpt < n_values; cpt++){        if (*(values+cpt) != value_to_supress){            *(New_Arr+cpt_bis) = *(values+cpt);            cpt_bis++;        }    }    return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);        printf("%d ",*(result+i))    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);        printf("%d ",*(result+i));    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt, cpt_bis;        float *New_Arr;        size = n_values - 1;        cpt_bis=0;        New_Arr = (float*)malloc(size*sizeof(float));        for (cpt = 0; cpt < n_values; cpt++){                if (*(values+cpt) != value_to_supress){                        *(New_Arr+cpt_bis) = *(values+cpt);                        cpt_bis++;                    }            }        return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt, cpt_bis;        float *New_Arr;        size = n_values - 1;        cpt_bis=0;        New_Arr = (float*)malloc(size*sizeof(float));        for (cpt = 0; cpt < n_values; cpt++){                if (*(values+cpt) != value_to_supress){                        *(New_Arr+cpt_bis) = *(values+cpt);                        cpt_bis++;                    }            }        return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);        printf("%f ",*(result+i));    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, i, i2;    float *Arr;    size = n_values - 1;    i2=0;    Arr = (float*)malloc(size*sizeof(float));    for (i = 0; i < n_values; i++){        if (*(values+i) != value_to_supress){            *(New_Arr+i2) = *(values+i);            i2++;        }    }    return Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, i, i2;    float *Arr;    size = n_values - 1;    i2=0;    Arr = (float*)malloc(size*sizeof(float));    for (i = 0; i < n_values; i++){        if (*(values+i) != value_to_supress){            *(Arr+i2) = *(values+i);            i2++;        }    }    return Arr;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %f values\n", n_values);    for(i=0;i<n_values;i++)        printf("%d\n", *(values+i));    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %f values\n", n_values);    for(i=0;i<n_values;i++)        printf("%d\n", *(values+i));    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %f values\n", n_values);    for(i=0;i<n_values;i++)        printf("%d\n", *(values+i));    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %f values\n", n_values);    for(i=0;i<n_values;i++)        printf("%d\n", *(values+i));    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%f \n", *(values+i));    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i) = *(values+i);        printf("%f ",*(result+i));    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i) = *(values+i);        printf("%f ",*(result+i));    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i) = *(values+i);        printf("%f ",*(result+i));    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i) = *(values+i);        printf("%f ",*(result+i));    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i) = *(values+i);        printf("%f ",*(result+i));    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt, cpt_bis;    float *New_Arr;    size = n_values - 1;    cpt_bis=0;    New_Arr = (float*)malloc(size*sizeof(float));    for (cpt = 0; cpt < n_values; cpt++){        if (*(values+cpt) != value_to_supress){            *(New_Arr+cpt_bis) = *(values+cpt);            cpt_bis++;        }    }    return New_Arr;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_supress, float values[], int n_values) {    float *new_values = malloc(sizeof(float)), SUPRESS=0;    for(int i=0; i<=n_values; i++) {        if(((values[i]==value_to_supress) && SUPRESS) || values[i] != value_to_supress) {            *(new_values+i) = values[i];        }        if((values[i]==value_to_supress) && not SUPRESS) {            SUPRESS = 1;        }    }    return *new_values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_supress, float values[], int n_values) {    float *new_values = malloc(sizeof(float)), SUPRESS=0;    for(int i=0; i<=n_values; i++) {        if(((values[i]==value_to_supress) && SUPRESS) || values[i] != value_to_supress) {            *(new_values+i) = values[i];        }        if((values[i]==value_to_supress) && not SUPRESS) {            SUPRESS = 1;        }    }    return new_values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++)  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%f \n", *(values+i));    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++)  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%f \n", *(values+i));    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0;    while(i<n_values){        if (*(values+i))==value_to_supress && test=0){            i++;            test=1;                    }        new_array[i]=*(values+i);                    }    if(test=1)    n_values--;    return new_array}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0;    while(i<n_values){        if (*(values+i))==value_to_supress && test=0){            i++;            test=1;                    }        new_array[i]=*(values+i);                    }    if(test=1)    n_values--;    return new_array;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1;    float* new_values;    while (i < n_values && test) {        if (*(values + i) == value_to_supress) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        new_values = (float*) malloc ((n_values - 1) * sizeof(float));        for (i = 0; i < index; i++)            *(new_values + i) = *(values + i);        for (i = index; i < n_values - 1; i++)            *(new_values + i) = *(values + i + 1);        return new_values;    }    else        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0;    while(i<n_values){        if (*(values+i))==value_to_supress && test=0){            i++;            test=1;                    }        new_array[i]=*(values+i);                    }    if(test==1)    n_values--;    return new_array;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    printf("Value to suppress: %f \n", value_to_suppress)    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++)  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%f \n", *(values+i));    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){            int cpt,cpt2;        float Array;            Array = (float*)malloc((n_values-1)*sizeof(float));            for (cpt=0;cpt<n_values;cpt++){                if (*(values+cpt)!=value_to_suppress){            *(Array+cpt2)= *(values+cpt);            cpt2++;        }                                                }            return Array;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    printf("Value to suppress: %f \n", value_to_suppress)    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%f \n", *(values+i));    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    printf("Value to suppress: %f \n", value_to_suppress)    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%f \n", *(values+i));    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    printf("Value to suppress: %f \n", value_to_suppress);    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++)  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%f \n", *(values+i));    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    printf("Value to suppress: %f \n", value_to_suppress);    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++)  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%f \n", *(values+i));    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    printf("Value to suppress: %f \n", value_to_suppress);    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++)  	{        while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%f \n", *(values+i));    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){            int cpt,cpt2=0;        float Array;            Array = (float*)malloc((n_values-1)*sizeof(float));            for (cpt=0;cpt<n_values;cpt++){                if (*(values+cpt)!=value_to_suppress){            *(Array+cpt2)= *(values+cpt);            cpt2++;        }                                                }            return Array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return *result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));    for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0;    while(i<n_values){        if (*(values+i))==value_to_supress && test=0){            i++;            test=1;                    }        new_array[i]=*(values+i);                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){            int cpt,cpt2=0;        float *Array;            Array = (float*)malloc((n_values-1)*sizeof(float));            for (cpt=0;cpt<n_values;cpt++){                if (*(values+cpt)!=value_to_suppress){            *(Array+cpt2)= *(values+cpt);            cpt2++;        }                                                }            return Array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));        for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;        printf("%d",p)                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));        for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;            printf("%d",p);                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i))==value_to_supress && test=0){            i++;            test=1;                    }        new_array[j++]=*(values+i);                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){            int cpt,cpt2=0;        float *Array;            Array = (float*)malloc((n_values-1)*sizeof(float));            for (cpt=0;cpt<n_values;cpt++){                if (*(values+cpt)!=value_to_supress){            *(Array+cpt2)= *(values+cpt);            cpt2++;        }                                                }            return Array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test=0){            i++;            test=1;                    }        new_array[j++]=*(values+i);                    }    if(test==1)    n_values--;    return new_array;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j;    printf("Value to suppress: %f \n", value_to_suppress);        for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++)  	{  	    for(i=0;i<n_values;i++)            printf("%f \n", *(values+i));                    while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%f \n", *(values+i));    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    printf("%d", value_to_supress)    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));        for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;            printf("%d",p);                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    printf("%d", value_to_supress);    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));        for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;            printf("%d",p);                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    printf("%f", value_to_supress);    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));        for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;            printf("%d",p);                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return result;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j=0;    printf("Value to suppress: %f \n", value_to_suppress);        for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++)  	{  	    for(i=0;i<n_values;i++)            printf("%f \n", *(values+i));                    while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%f \n", *(values+i));    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    if(test==1)    n_values--;    return new_array;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j=1;    printf("Value to suppress: %f \n", value_to_suppress);        for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++)  	{  	    for(i=0;i<n_values;i++)            printf("%f \n", *(values+i));                    while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%f \n", *(values+i));    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    printf("%f", value_to_supress);    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));        for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;            printf("\n %d",p);                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    if(test==1)    n_values--;    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    printf("%f", value_to_supress);    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));        for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;            i= n_values;            printf("\n%d",p);                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    printf("%f", value_to_supress);    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));        for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;            i= n_values;            printf("\n%d",p);                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,new_array[n_values],test=0,j=0;    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    printf("%f", value_to_supress);    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));        for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;            i= n_values;            printf("\n%f",p);                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    printf("%f", value_to_supress);    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));        for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress)            p=i;            i= n_values;            printf("\n%d",p);                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float new_array[n_values];    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float new_array[n_values];    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float new_array[n_values];    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, p;    float *result;    printf("%f", value_to_supress);    p=n_values;    result = (float*)malloc((n_values-1)*sizeof(float));        for (i=0; i<n_values; i++)        if(*(values+i) == value_to_supress){            p=i;            i= n_values;        }            printf("\n%d",p);                for (i=0; i<n_values; i++){        if (i<p)            *(result+i) = *(values+i);        else            if(i>p)                *(result+i-1) = *(values+i);    }    return result;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1;    float* new_values;    while (i < n_values && test) {        if (*(values + i) == value_to_supress) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        new_values = (float*) malloc ((n_values - 1) * sizeof(float));        for (i = 0; i < index; i++)            *(new_values + i) = *(values + i);        for (i = index; i < n_values - 1; i++)            *(new_values + i) = *(values + i + 1);        return new_values;    }    else        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float new_array[n_values];    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float new_array[n_values];    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float values2[100];    int i;    for(i=0; i<n_values; i++)    {        if (values[i]!=values_to supress)            values2[i]=values[i];        else            i++;    }    return values2}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt, cpt_bis;    float New_Arr;    size = n_values - 1;    cpt_bis=0;    New_Arr = (float)malloc(sizesizeof(float));    for (cpt = 0; cpt < n_values; cpt++){        if ((values+cpt) != value_to_supress){            *(New_Arr+cpt_bis) = *(values+cpt);            cpt_bis++;        }    }    return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt, cpt_bis;    float *New_Arr;    size = n_values - 1;    cpt_bis=0;    New_Arr = (float*)malloc(size*sizeof(float));    for (cpt = 0; cpt < n_values; cpt++){        if (*(values+cpt) != value_to_supress){            *(New_Arr+cpt_bis) = *(values+cpt);            cpt_bis++;        }    }    return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, i, i2;    float *Array2;    size = n_values - 1;    i2=0;    Array2 = (float*)malloc(size*sizeof(float));    for (i = 0; i < n_values; i++){        if (*(values+i) != value_to_supress){            *(Array2+i2) = *(values+i);            i2++;        }    }    return Array2;}
float suppress_value (float value_to_supress, float values[], int n_values){    }
float* suppress_value (float value_to_supress, float values[], int n_values){    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float new_array[10];    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float new_array[10];    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float new_array[10];    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float new_array[20];    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float new_array[20]={0};    while(i<n_values){        if (*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float new_array[20];    while(i<n_values){        if(*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float new_array[20];    float * new_array = (float*) malloc (sizeof(float) * (n_values -1));    while(i<n_values){        if(*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float * new_array = (float*) malloc (sizeof(float) * (n_values -1));    while(i<n_values){        if(*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        new_array[j++]=*(values+i);        i++;                    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float * new_array = (float*) malloc (sizeof(float) * (n_values -1));    while(i<n_values){        if(*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        *(new_array+j)=*(values+i);        i++;        j++;            }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1;    float* new_values;    while (i < n_values && test) {        if (*(values + i) == value_to_supress) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        new_values = (float*) malloc ((n_values - 1) * sizeof(float));        for (i = 0; i < index; i++)            *(new_values + i) = *(values + i);        for (i = index; i < n_values - 1; i++)            *(new_values + i) = *(values + i + 1);        return new_values;    }    else        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float new_array[n_values];    while(i<n_values){        if(*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        *(new_array+j)=*(values+i);        i++;        j++;            }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float new_array[n_values];    while(i<n_values){        if(*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        *(new_array+j)=*(values+i);        i++;        j++;            }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float new_array[20]    while(i<n_values){        if(*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        *(new_array+j)=*(values+i);        i++;        j++;            }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float * new_array = (float*) malloc (sizeof(float) * (n_values -1));    while(i<n_values){        if(*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        *(new_array+j)=*(values+i);        i++;        j++;            }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float * new_array = (float*) malloc (sizeof(float) * (n_values -1));    while(i<n_values){        if(*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        *(new_array+j++)=*(values+i++);          }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float * new_array = (float*) malloc (sizeof(float) * (n_values -1));    while(i<n_values){        if(*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        *(new_array+j++)=*(values+i++);          }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,test=0,j=0;    float * new_array = (float*) malloc (sizeof(float) * (n_values -1));    while(i<n_values){        if(*(values+i)==value_to_supress && test==0){            i++;            test=1;                    }        *(new_array+j++)=*(values+i++);          }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    for(i=0; i<n_values;i++){        if(*)    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, occ;    float *p;    p = values;    for(i=0; i<n_values;i++){        if(*(p+i) == value_to_supress)            occ = i;    }    for(i=occ; i<n_values;i++){        *(p+i) = *(p+i+1);    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, occ;    float *p;    p = values;    for(i=0; i<n_values;i++){        if(*(p+i) == value_to_supress){            occ = i;        }    }    for(i=occ; i<n_values;i++){        *(p+i) = *(p+i+1);    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, occ;    float *p;    p = values;    for(i=0; i<n_values;i++){        if(*(p+i) == value_to_supress){            occ = i;        }    }    for(i=occ; i<n_values;i++){        *(p+i) = *(p+i+1);    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i}
float *suppress_value(float value_to_suppress, float values[], int n_values){    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt, cpt_bis;    float New_Arr;    size = n_values - 1;    cpt_bis=0;    New_Arr = (float)malloc(sizesizeof(float));    for (cpt = 0; cpt < n_values; cpt++){        if ((values+cpt) != value_to_supress){            *(New_Arr+cpt_bis) = *(values+cpt);            cpt_bis++;        }    }    return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int size, cpt, cpt_bis;    float *New_Arr;    size = n_values - 1;    cpt_bis=0;    New_Arr = (float*)malloc(size*sizeof(float));    for (cpt = 0; cpt < n_values; cpt++){        if (*(values+cpt) != value_to_supress){            *(New_Arr+cpt_bis) = *(values+cpt);            cpt_bis++;        }    }    return New_Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int ,i,j,check=0,val,m,lsize,save=0;    for(i=0;i<lsize;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            check=1;            break;        }    }    for(j=save;j<lsize;j++)        *(values+i)=*(values+i+1);    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,check=0,val,m,lsize,save=0;    for(i=0;i<lsize;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            check=1;            break;        }    }    for(j=save;j<lsize;j++)        *(values+i)=*(values+i+1);    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,check=0,m,lsize,save=0;    for(i=0;i<lsize;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            check=1;            break;        }    }    for(j=save;j<lsize;j++)        *(values+i)=*(values+i+1);    return values;}
float *suppress_value(float value_to_suppress, float values[], int n_values){    for (int i = 0; i < n_values; i++)        if }
float *suppress_value(float value_to_suppress, float values[], int n_values){    for (int i = 0; i < n_values; i++)        if (*(values+i) == value_to_suppress)}
float *suppress_value(float value_to_suppress, float values[], int n_values){    for (int i = 0; i < n_values; i++)        if (*(values+i) == value_to_suppress)            *(values+i) = *(values+i+1);}
float *suppress_value(float value_to_suppress, float values[], int n_values){    for (int i = 0; i < n_values; i++)        if (*(values+i) == value_to_suppress)            *(values+i) = *(values+i+1);            n_values = n_values - 1            break;}
float *suppress_value(float value_to_suppress, float values[], int n_values){    for (int i = 0; i < n_values; i++)        if (*(values+i) == value_to_suppress)        {            *(values+i) = *(values+i+1);            n_values = n_values - 1;            break;        }}
float *suppress_value(float value_to_suppress, float values[], int n_values){    for (int i = 0; i < n_values; i++)        if (*(values+i) == value_to_suppress)        {            *(values+i) = *(values+i+1);            n_values = n_values - 1;            break;        }        else            i++;}
float *suppress_value (float value_to_supress, float values[], int n_values)  {    int i, occ;    float *p;    p = values;    for (i = 0; i < n_values; i++)    {	    if (*(p + i) == value_to_supress)	    {	        occ = i;	    }    }    for (i = occ; i < n_values; i++)    {	*(p + i) = *(p + i + 1);    }    return p;  }
float *suppress_value(float value_to_suppress, float values[], int n_values){    for (int i = 0; i < n_values; i++)        if (*(values+i) == value_to_suppress)        {            *(values+i) = *(values+i+1);            n_values = n_values - 1;            break;        }        else            i++;    return supress_value;}
float *suppress_value (float value_to_supress, float values[], int n_values){    int i, occ;    float *p;    p = values;    for (i = 0; i < n_values; i++){	    if (*(p + i) == value_to_supress){	        occ = i;	    }    }    for (i = occ; i < n_values; i++){	*(p + i) = *(p + i + 1);    }    return p;  }
float *suppress_value (float value_to_supress, float values[], int n_values){    int i, occ;    float *p;    p = values;    for (i = 0; i < n_values; i++){	    if (*(p + i) == value_to_supress){	        occ = i;	    }    }    for (i = occ; i < n_values; i++){	*(p + i) = *(p + i + 1);    }    return p;  }
float *suppress_value (float value_to_supress, float values[], int n_values){    int i, occ;    float *p;    p = values;    for (i = 0; i < n_values; i++){	    if (*(p + i) == value_to_supress){	        occ = i;	    }    }    for (i = occ; i < n_values; i++){	*(p + i) = *(p + i + 1);    }    return p;  }
float *suppress_value(float value_to_suppress, float values[], int n_values){    for (int i = 0; i < n_values; i++)        if (*(values+i) == value_to_suppress)        {            *(values+i) = *(values+i+1);            n_values = n_values - 1;            break;        }        else            i++;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,check=0,m,lsize,save=0;    for(i=0;i<lsize;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            check=1;            break;        }    }    for(j=save;j<lsize;j++)        *(values+i)=*(values+i+1);    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,check=0,m,lsize,save=0;    for(i=0;i<lsize;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            check=1;            break;        }    }    for(j=save;j<lsize;j++)        *(values+i)=*(values+i+1);    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,check=0,m,lsize,save=0;    for(i=0;i<lsize;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            check=1;            break;        }    }    for(j=save;j<lsize;j++)        *(values+i)=*(values+i+1);    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,check=0,m,lsize,save=0;    for(i=0;i<lsize;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            check=1;            break;        }    }    for(j=save;j<lsize;j++)        *(values+i)=*(values+i+1);    return values;}
float *suppress_value (float value_to_supress, float values[], int n_values){    int i, occ;    float *p;    p = values;    for (i = 0; i < n_values; i++){	    if (*(p + i) == value_to_supress){	        occ = i;	    }    }    for (i = occ; i < n_values; i++){	*(p + i) = *(p + i + 1);    }    /*return p*/;  }
float *suppress_value (float value_to_supress, float values[], int n_values){    int i, occ;    float *p;    p = values;    for (i = 0; i < n_values; i++){	    if (*(p + i) == value_to_supress){	        occ = i;	    }    }    for (i = occ; i < n_values; i++){	*(p + i) = *(p + i + 1);    }    return p;  }
float *suppress_value(float value_to_suppress, float values[], int n_values){    for (int i = 0; i < n_values; i++)        if (*(values+i) == value_to_suppress)        {            *(values+i) = *(values+i+1);            n_values = n_values - 1;            break;        }        else            i++;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,save=0;    for(i=0;i<lsize;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            break;        }    }    for(j=save;j<lsize;j++)        *(values+i)=*(values+i+1);    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,save=0;    for(i=0;i<n_values;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            break;        }    }    for(j=save;j<n_values;j++)        *(values+i)=*(values+i+1);    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    int val = *()}
float *suppress_value (float value_to_supress, float values[], int n_values){    int i, occ;    float *p;    p = values;    while(i< n_values){	    if (*(p + i) == value_to_supress){	        occ = i;	        break;	    }	    else	        i++;    }    for (i = occ; i < n_values; i++){	*(p + i) = *(p + i + 1);    }    return p;  }
float *suppress_value (float value_to_supress, float values[], int n_values){  int i, occ;  float *p;  p = values;  while (i < n_values){      if (*(p + i) == value_to_supress)	  {	    occ = i;	    break;	}      else	    i++;    }  for (i = occ; i < n_values; i++)    {      *(p + i) = *(p + i + 1);    }  return p;}
float *suppress_value (float value_to_supress, float values[], int n_values){  int i, occ;  float *p;  p = values;  while (i < n_values){      if (*(p + i) == value_to_supress)	  {	    occ = i;	    break;	    }      else	    i++;    }  for (i = occ; i < n_values; i++)    {      *(p + i) = *(p + i + 1);    }  return p;}
float *suppress_value (float value_to_supress, float values[], int n_values){  int i, occ;  float *p;  p = values;  while (i < n_values){      if (*(p + i) == value_to_supress){	    occ = i;	    break;	  }      else	    i++;    }  for (i = occ; i < n_values; i++)    {      *(p + i) = *(p + i + 1);    }  return p;}
float *suppress_value (float value_to_supress, float values[], int n_values){  int i=0, occ;  float *p;  p = values;  while (i < n_values){      if (*(p + i) == value_to_supress){	    occ = i;	    break;	  }      else	    i++;    }  for (i = occ; i < n_values; i++)    {      *(p + i) = *(p + i + 1);    }  return p;}
float* suppress_value (float value_to_supress, float values, int n_values){    int i;    int val = *(values);    for (i = 0; i < )}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_supress, float values[], int n_values) {    float *new_values = (float*) malloc(sizeof(float)*(n_values-1)), SUPRESS=0;    for(int i=0; i<=n_values; i++) {        if(((values[i]==value_to_supress) && SUPRESS) || values[i] != value_to_supress) {            *(new_values+i) = values[i];        }        if((values[i]==value_to_supress) && not SUPRESS) {            SUPRESS = 1;        }    }    return new_values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_supress, float values[], int n_values) {    float *new_values = (float*) malloc(sizeof(float)*(n_values-1)), SUPRESS=0;    for(int i=0; i<=n_values; i++) {        if(((values[i]==value_to_supress) && SUPRESS) || values[i] != value_to_supress) {            *(new_values+i) = values[i];        }        if((values[i]==value_to_supress) && not SUPRESS) {            SUPRESS = 1;        }    }    return new_values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,save=0;    for(i=0;i<n_values;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            break;        }    }    for(j=save;j<n_values;j++)        *(values+j)=*(values+j+1);    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    for (int i = 0; i < n_values; i++)        if (*(values+i) == value_to_supress)        {            *(values+i) = *(values+i+1);            n_values = n-values -1;            break;        }        else            i++;}
float* suppress_value (float value_to_supress, float values[], int n_values){    for (int i = 0; i < n_values; i++)        if (*(values+i) == value_to_suppress)        {            *(values+i) = *(values+i+1);            n_values = n-values -1;            break;        }        else            i++;}
float* suppress_value (float value_to_supress, float values[], int n_values){    for (int i = 0; i < n_values; i++)        if (*(values+i) == value_to_supress)        {            *(values+i) = *(values+i+1);            n_values = n_values -1;            break;        }        else            i++;}
float* suppress_value (float value_to_supress, float values[], int n_values){    for (int i = 0; i < n_values; i++)        if (*(values+i) == value_to_supress)        {            *(values+i) = *(values+i+1);            n_values = n_values - 1;            break;        }        else            i++;}
float* suppress_value (float value_to_supress, float values[], int n_values){    for (int i = 0; i < n_values; i++)        if (*(values+i) == value_to_supress)        {            *(values+i) = *(values+i+1);            n_values = n_values - 1;            break;        }        else            i++;}
float* suppress_value (float value_to_supress, float values[], int n_values){    for (int i = 0; i < n_values; i++)        if (*(values+i) == value_to_supress)        {            *(values+i) = *(values+i+1);            n_values = n_values - 1;            break;        }        else            i++;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_supress, float values[], int n_values) {    float *new_values = (float*) malloc(sizeof(float)*(n_values-1));    int j=0;    for(int i=0; i<n_values; i++) {        if(values[i] != value_to_supress) {            *(new_values+j) = *(values+i);            j++;        }    }    return new_values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_supress, float values[], int n_values) {    float *new_values = (float*) malloc(sizeof(float)*(n_values-1));    int j=0;    for(int i=0; i<n_values; i++) {        if(values[i] != value_to_supress) {            *(new_values+j) = *(values+i);            j++;        }    }    return new_values;}
float *suppress_value(float value_to_supress, float values[], int n_values) {    int i,j;    for ( i = 0; i < n_values; i++) {        if (*(values + i) == value_to_supress) {            for ( j = i; j < n_values - 1; j++) {                *(values + j) = *(values + j + 1);            }            return values;        }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * new_array = (float*) malloc (sizeof(float)*(n_values-1));    int j=0;    for (int i = 0; i < n_values; i++)        if (*(values+i) == value_to_supress)        {            *(values+i) = *(values+i+1);            n_values = n_values - 1;            break;        }        else            i++;} 
float* suppress_value (float value_to_supress, float values[], int n_values){    float * new_array = (float*) malloc (sizeof(float)*(n_values-1));    int j=0;    for (int i = 0; i < n_values; i++)        if (*(values+i) != value_to_supress)        {            *(new_array+j) = *(values+i);                    }        else            i++;} 
float* suppress_value (float value_to_supress, float values[], int n_values){    float * new_array = (float*) malloc (sizeof(float)*(n_values-1));    int j=0;    int found=0;    int    for (int i = 0; i < n_values; i++)        if (*(values+i) != value_to_supress)        {            *(new_array+j) = *(values+i);            j++;        }        else            i++;} 
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_supress, float values[], int n_values) {    float * new_values = (float*) malloc(sizeof(float)*(n_values-1));    int j=0, i=0, found=0;    while(i=0; i<n_values; i++) {        if (*(values+i) != value_to_supress) {            *(new_values+j) = *(values+i);            j++;        }    }    return new_values;}
float* suppress_value (float value_to_supress, float values[], int n_values){        float *new_array = (float*)malloc(sizeof(float)*(n_values-1));    int j=0;    int found =0;    for (int i =0; i<n_values;i++){        if (*(values+i)!= value_to_supress)){            *(new_array+j) =*(values+i)        }            }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float *new_array = (float*)malloc(sizeof(float)*(n_values-1));    int j=0;    int found =0;    for (int i =0; i<n_values;i++){        if (*(values+i)!= value_to_supress){            *(new_array+j) =*(values+i);        }    }    return new_array;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_supress, float values[], int n_values) {    float * new_values = (float*) malloc(sizeof(float)*(n_values-1));    int j=0, i=0, found=0;    for(i; i < n_values; i++) {        if (*(values+i) != value_to_supress) {            *(new_values+j) = *(values+i);            j++;        }    }    return new_values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * new_array = (float*) malloc (sizeof(float)*(n_values-1));    int j=0;    int found = 0;    for (int i = 0; i < n_values; i++)    {        if (*(values+i) != value_to_supress)        {            *(new_array+j) = *(values+i);            j++;        }        else            i++;    }    return new_array;} 
float* suppress_value (float value_to_supress, float values[], int n_values){    float *new_array = (float*)malloc(sizeof(float)*(n_values-1));    int j=0;    int found =0;    for (int i =0; i<n_values;i++){                if (*(values+i) != value_to_supress){            *(new_array+j) =*(values+i);        }    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float *new_array = (float*)malloc(sizeof(float)*(n_values-1));    int j=0;    int found =0;    for (int i =0; i<n_values;i++){                if (*(values+i) != value_to_supress){            *(new_array+j) =*(values+i);            j++;        }    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float *new_array = (float*)malloc(sizeof(float)*(n_values-1));    int j=0;    int found =0;    for (int i =0; i<n_values;i++){                if (*(values+i) != value_to_supress){            *(new_array+j) =*(values+i);            j++;        }    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * new_array = (float*) malloc (sizeof(float)*(n_values-1));    int j=0;    int found = 0;    for (int i = 0; i < n_values; i++)    {        if (*(values+i) != value_to_supress)        {            *(new_array+j) = *(values+i);            j++;        }    }    return new_array;} 
float *suppress_value(float value_to_suppress, float values[], int n_values){float * new_array = (float*) malloc (sizeof(float)*(n_values-1));int j=0;for (int i = 0; i < n_values; i++){if (*(values+i) != value_to_suppress){*(new_array+j) = *(values+i);j++;}}return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float new_array = (float)malloc(sizeof(float)(n_values-1));    int j=0;    int found =0;    for (int i =0; i<n_values;i++){        if ((values+i) != value_to_supress){            (new_array+j) =(values+i);            j++;        }    }    return new_array;}
float *suppress_value(float value_to_suppress, float values[], int n_values){float * new_array = (float*) malloc (sizeof(float)*(n_values-1));int j=0;for (int i = 0; i < n_values; i++){if (*(values+i) != value_to_suppress){*(new_array+j) = *(values+i);j++;}
float suppress_value (float value_to_supress, float values[], int n_values){    float new_array = (float)malloc(sizeof(float)(n_values-1));    int j=0;    int found =0;    for (int i =0; i<n_values;i++){        if ((values+i) != value_to_supress){            (new_array+j) =(values+i);            j++;        }    }    return new_array;}
float *suppress_value(float value_to_suppress, float values[], int n_values){float * new_array = (float*) malloc (sizeof(float)*(n_values-1));int j=0;for (int i = 0; i < n_values; i++){if (*(values+i) != value_to_suppress){*(new_array+j) = *(values+i);j++;}}return new_array;}
float *suppress_value(float value_to_suppress, float values[], int n_values){    float *new_array = (float*) malloc (sizeof(float)*(n_values-1));    int i = 0, j = 0;    for (int i = 0; i < n_values; i++)        if (*(values+i) != value_to_suppress)        {            *(new_array+j) = *(values+i);            j++;        }        return new_array;}
float *suppress_value(float value_to_suppress, float values[], int n_values){    float *new_array = (float*) malloc (sizeof(float)*(n_values-1));    int i = 0, j = 0;    for (int i = 0; i < n_values; i++)        if (*(values+i) != value_to_suppress)        {            *(new_array+j) = *(values+i);            j++;        }        return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values) float* newtab = (float*) malloc ((n_values-1)*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    if(*(values+i)==value_to_supress && j == 0){    i = ++j;    }    *(newtab+i)=*(value_to_supress+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {float* newtab = (float*) malloc ((n_values-1)*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    if(*(values+i)==value_to_supress && j == 0){    i = ++j;    }    *(newtab+i)=*(value_to_supress+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {float* newtab = (float*) malloc ((n_values-1)*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    if(*(values+i)==value_to_supress && j == 0){    i = ++j;    }    *(newtab+i)= *(value_to_supress+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {float* newtab = (float*) malloc ((n_values-1)*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    if(*(values+i)==value_to_supress && j == 0){    i = ++j;    }    *(newtab+i)= *(values+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {float* newtab = (float*) malloc ((n_values-1)*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    if(*(values+i)==value_to_supress && j == 0){    i = ++j;    }    *(newtab+i-j)= *(values+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {float* newtab = (float*) malloc ((n_values-1)*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    if(*(values+i)==value_to_supress && j == 0){    i = ++j;    }    *(newtab+i-j)= *(values+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {float* newtab = (float*) malloc ((n_values-1)*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    if(*(values+i)==value_to_supress && j == 0){    i = ++j;    printf("f")    }    *(newtab+i-j)= *(values+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {float* newtab = (float*) malloc ((n_values-1)*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    if(*(values+i)==value_to_supress && j == 0){    i = ++j;    printf("f");    }    *(newtab+i-j)= *(values+i);}}
float* suppress_value(float value_to_suppress, float values[], int n_values){    int i;    for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++);      {        while(i < n_values)        {            *(values+i) = *(values+i+1);            i++;        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int ,i,j,save=0;    for(i=0;i<lsize;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            check=1;            break;        }    }    for(j=save;j<n_values;j++)        *(values+i)=*(values+i+1);    return values;
float* suppress_value (float value_to_supress, float values[], int n_values) {    int ,i,j,save=0;    for(i=0;i<n_values;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            check=1;            break;        }    }    for(j=save;j<n_values;j++)        *(values+i)=*(values+i+1);    return values;
float* suppress_value (float value_to_supress, float values[], int n_values) {    int ,i,j,check,save=0;    for(i=0;i<n_values;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            check=1;            break;        }    }    for(j=save;j<n_values;j++)        *(values+i)=*(values+i+1);    return values;
float* suppress_value(float value_to_supress, float values[], int n_values){         int i;      for (i =  value_to_supress - 1; i < n_values - 1; i++)        values[i] = values[i+1];            return values;}
#include <stdio.h>#include <stdlib.h>float *suppress_value(float value_to_supress, float values[], int n_values) {  for (int i = 0; i < n_values; i++) {    if (*(values + i) == value_to_supress) {      for (int j = i; j < n_values; j++) {        *(values + j) = *(values + j + 1);      }      return values;    }  }  return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int ,i,j,check,save=0;    for(i=0;i<n_values;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            check=1;            break;        }    }    for(j=save;j<n_values;j++)        *(values+i)=*(values+i+1);    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,check,save=0;    for(i=0;i<n_values;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            check=1;            break;        }    }    for(j=save;j<n_values;j++)        *(values+i)=*(values+i+1);    return values;    }
float* suppress_value(float value_to_supress, float values[], int n_values){         int i;      for (i =  value_to_supress - 1; i < n_values - 1; i++)        *(values+i) = *(values+i+1);            return *values;}
float* suppress_value(float value_to_supress, float values[], int n_values){         int i;      for (i =  value_to_supress - 1; i < n_values - 1; i++)        *(values+i) = *(values+i+1);            return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,check,save=0;    for(i=0;i<n_values;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            check=1;            break;        }    }    for(j=save;j<n_values;j++)        *(values+j)=*(values+i+1);    return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,check,save=0;    for(i=0;i<n_values;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;            check=1;            break;        }    }    for(j=save;j<n_values;j++)        *(values+j)=*(values+j+1);    return values;    }
float *suppress_value(float value_to_suppress, float values[], int n_values){    float * new_array = (float*) malloc (sizeof(float)*(n_values-1));    int j=0;    for (int i = 0; i < n_values; i++)    {        if (*(values+i) != value_to_suppress)         {            *(new_array+j) = *(values+i);            j++;        }    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,save=0;    for(i=0;i<n_values;i++)    {        if(*(values+i)==value_to_supress)        {            save=i;                        break;        }    }    for(j=save;j<n_values;j++)        *(values+j)=*(values+j+1);    return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values) {float* newtab = (float*) malloc ((n_values-1)*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    //if(*(values+i)==value_to_supress && j == 0){    //i = ++j;    //printf("f");    //}    *(newtab+i-j)= *(values+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {float* newtab = (float*) malloc ((n_values-1)*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    //if(*(values+i)==value_to_supress && j == 0){    //i = ++j;    //printf("f");    //}    *(newtab+i-j)= *(values+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {float* newtab = (float*) malloc ((n_values)*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    //if(*(values+i)==value_to_supress && j == 0){    //i = ++j;    //printf("f");    //}    *(newtab+i-j)= *(values+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {float* newtab = (float*) malloc ((n_values)*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    //if(*(values+i)==value_to_supress && j == 0){    //i = ++j;    //printf("f");    //}    *(newtab+i-j)= *(values+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {float* newtab = (float*) malloc (n_values*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    //if(*(values+i)==value_to_supress && j == 0){    //i = ++j;    //printf("f");    //}    *(newtab+i-j)= *(values+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {float* newtab = (float*) malloc (n_values*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    //if(*(values+i)==value_to_supress && j == 0){    //i = ++j;    //printf("f");    //}    *(newtab+i-j)= *(values+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {float*newtab;newtab = (float*) malloc (n_values*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    //if(*(values+i)==value_to_supress && j == 0){    //i = ++j;    //printf("f");    //}    *(newtab+i-j)= *(values+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {float*newtab;newtab = (float*) malloc (n_values*sizeof(float));int j = 0;for(int i=0;i<n_values;i++){    //if(*(values+i)==value_to_supress && j == 0){    //i = ++j;    //printf("f");    //}    *(newtab+i-j)= *(values+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {float*newtab;newtab = (float*) malloc (n_values*sizeof(float));printf("f");int j = 0;for(int i=0;i<n_values;i++){    //if(*(values+i)==value_to_supress && j == 0){    //i = ++j;    //printf("f");    //}    *(newtab+i-j)= *(values+i);}}
#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values) {float*newtab;newtab = (float*) malloc (n_values*sizeof(float));printf("f");int j = 0;for(int i=0;i<n_values;i++){    //if(*(values+i)==value_to_supress && j == 0){    //i = ++j;    //printf("f");    //}    *(newtab+i-j)= *(values+i);}}
#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values) {float*newtab;newtab = (float*) malloc (n_values*sizeof(float));printf("f");int j = 0;for(int i=0;i<n_values;i++){    //if(*(values+i)==value_to_supress && j == 0){    //i = ++j;    //printf("f");    //}    *(newtab+i-j)= *(values+i);}}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float * new_array = (float*) malloc (sizeof(float)*(n_values-1));    int j=0        for (int i = 0; i < n_values; i++)    {         if (*(values+i) != value_to_suppress)        {            *(new_array+j) = *(values+i);            j++;                    }    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float * new_array = (float*) malloc (sizeof(float)*(n_values-1));    int j=0;        for (int i = 0; i < n_values; i++)    {         if (*(values+i) != value_to_suppress)        {            *(new_array+j) = *(values+i);            j++;                    }    }    return new_array;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1;    float* new_values;    while (i < n_values && test) {        if (*(values + i) == value_to_supress) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        new_values = (float*) malloc ((n_values - 1) * sizeof(float));        for (i = 0; i < index; i++)            *(new_values + i) = *(values + i);        for (i = index; i < n_values - 1; i++)            *(new_values + i) = *(values + i + 1);        return new_values;    }    else        return values;
float* suppress_value(float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1;    float* new_values;    while (i < n_values && test) {        if (*(values + i) == value_to_supress) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        new_values = (float*) malloc ((n_values - 1) * sizeof(float));        for (i = 0; i < index; i++)            *(new_values + i) = *(values + i);        for (i = index; i < n_values - 1; i++)            *(new_values + i) = *(values + i + 1);        return new_values;    }    else        return values;
float* suppress_value(float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1;    float* new_values;    while (i < n_values && test) {        if (*(values + i) == value_to_supress) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        new_values = (float*) malloc ((n_values - 1) * sizeof(float));        for (i = 0; i < index; i++)            *(new_values + i) = *(values + i);        for (i = index; i < n_values - 1; i++)            *(new_values + i) = *(values + i + 1);        return new_values;    }    else        return values;
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values) {    int i = 0, index=-1, test=1;    float* new_values;    while (i < n_values && test) {        if (*(values + i) == value_to_supress) {            test = 0;            index = i;        }        i++;    }    if (index != -1) {        new_values = (float*) malloc ((n_values - 1) * sizeof(float));        for (i = 0; i < index; i++)            *(new_values + i) = *(values + i);        for (i = index; i < n_values - 1; i++)            *(new_values + i) = *(values + i + 1);        return new_values;    }    else        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress)    {        i++;    }    for(j=i;j<n_values-1;j++)    {        *(values+i) = *(values+i+1);    }    *(&n_values)--; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress)    {        i++;    }    for(j=i;j<n_values-1;j++)    {        *(values+i) = *(values+i+1);    }    *(&n_values) = n_values - 1; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress)    {        i++;    }    for(j=i;j<n_values-1;j++)    {        *(values+i) = *(values+i+1);    }    *(&n_values) = n_values - 1; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress)    {        i++;    }    for(j=i;j<n_values-1;j++)    {        *(values+i) = *(values+i+1);    }    *(&n_values) = n_values - 1;     return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress)    {        i++;    }    for(j=i;j<n_values-1;j++)    {        *(values+i) = *(values+i+1);    }    *(&n_values) = n_values - 1;     return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress)    {        i++;    }    for(j=i;j<n_values-1;j++)    {        *(values+i) = *(values+i+1);    }    *(&n_values) = n_values - 1;     return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress)    {        i++;    }    for(j=i;j<n_values-1;j++)    {        *(values+i) = *(values+i+1);    }    *(&n_values) = n_values - 1;     return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress)    {        i++;    }    for(j=i;j<n_values-1;j++)    {        *(values+i) = *(values+i+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress)    {        i++;    }    for(j=i;j<n_values-1;j++)    {        *(values+i) = *(values+i+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0, j=0;    float *    while(i<n_values && *(values+i)!=value_to_supress)    {        i++;    }        for(j=i;j<n_values-1;j++)    {        *(values+j) = *(values+i+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress)    {        i++;    }    for(j=i;j<n_values-1;j++)    {        *(values+j) = *(values+i+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress)    {        i++;    }    for(j=i;j<n_values-1;j++)    {        *(values+j) = *(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress)    {        i++;    }    for(j=i;j<n_values-1;j++)    {        *(values+j) = *(values+i+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress)    {        i++;    }    for(j=i;j<n_values-1;j++)    {        *(values+j) = *(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress)    {        i++;            }    for(j=i;j<n_values-1;j++)    {        *(values+j) = *(values+j+1);            }    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int found =0 ,i=0, j;        while ((found==0)&&(i<n_values){        if (value_to_supress==*(values+i)){            found==1;        }        i++;    }        for (j=i; j<n_values-1; j++){        *(values+j)=*(values+j+1);    }    return values;    }
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int found =0 ,i=0, j;        while ((found==0)&&(i<n_values)){        if (value_to_supress==*(values+i)){            found==1;        }        i++;    }        for (j=i; j<n_values-1; j++){        *(values+j)=*(values+j+1);    }    return values;    }
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int found =0 ,i=0, j;        while ((found==0)&&(i<n_values)){        if (value_to_supress==*(values+i)){            found==1;        }        i++;    }        for (j=i; j<n_values-1; j++){        *(values+j)=*(values+j+1);    }    return values;    }
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int found=0 ,i=0, j;        while ((found==0)&&(i<n_values)){        if (value_to_supress==*(values+i)){            found==1;        }        i++;    }    i--;        for (j=i; j<n_values-1; j++){        *(values+j)=*(values+j+1);    }    return values;    }
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int found=0 ,i=0, j;        while ((found==0)&&(i<n_values)){        if (value_to_supress==*(values+i)){            found==1;        }        i++;    }    i--;        for (j=i; j<n_values-1; j++){        *(values+j)=*(values+j+1);    }    return values;    }
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int found=0 ,i=0, j;        while ((found==0)&&(i<n_values)){        if (value_to_supress==*(values+i)){            found==1;        }        i++;    }    i--;        for (j=i; j<n_values-1; j++){        *(values+j)=*(values+j+1);    }    return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j;    for (i=0;i<n_values;i++)    {        if (*(values+i)==value_to_supress)        {            for (j=i;j<n_values-1,j++)            {                *(values+i)=*(values+i+1);            }            n_values--;            break;        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j;    for (i=0;i<n_values;i++)    {        if (*(values+i)==value_to_supress)        {            for (j=i;j<n_values-1;j++)            {                *(values+i)=*(values+i+1);            }            n_values--;            break;        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j;    for (i=0;i<n_values;i++)    {        if (*(values+i)==value_to_supress)        {            for (j=i;j<n_values-1;j++)            {                *(values+i)=*(values+i+1);            }            //n_values--;            //break;        }    }}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	realloc(values, n_values - 1 * sizeof(float));	return values;} 
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	values = realloc(values, n_values - 1 * sizeof(float));	return values;} 
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j;    for (i=0;i<n_values;i++)    {        if (*(values+i)==value_to_supress)        {            for (j=i;j<n_values-1;j++)            {                *(values+i)=*(values+i+1);            }            n_values--;            break;        }    }        return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int found=0 ,i=0, j;        while ((found==0)&&(i<n_values)){        if (value_to_supress==*(values+i)){            found==1;        }        i++;    }        for (j=i; j<n_values-1; j++){        *(values+j)=*(values+j+1);    }    return values;    }
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int found=0 ,i=0, j;        while ((found==0)&&(i<n_values)){        if (value_to_supress==*(values+i)){            found==1;        }        i++;    }    i--;        for (j=i; j<n_values-1; j++){        *(values+j)=*(values+j+1);    }    return values;    }
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int found=0 ,i=0, j;        while ((found==0)&&(i<n_values)){        if (value_to_supress==*(values+i)){            found==1;        }        i++;    }    i--;        for (j=i; j<n_values-1; j++){        *(values+j)=*(values+j+1);    }    return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j;    for (i=0;i<n_values;i++)    {        if (*(values+i)==value_to_supress)        {            for (j=i;j<n_values-1;j++)            {                *(values+j)=*(values+j+1);            }            n_values--;            break;        }    }        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    }
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	n_values -= 1;	tab = (float *) malloc(n_values * sizeof(float));	for (k = 0; k < n_values; k++){		*(tab + i) = *(values + i);	}	return tab;}
float* suppress_value (float value_to_supress, float *values, int n_values);float* suppress_value (float value_to_supress, float *values, int n_values){    int i;    []}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	n_values -= 1;	float tab = (float *) malloc(n_values * sizeof(float));	for (k = 0; k < n_values; k++){		*(tab + i) = *(values + i);	}	return tab;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	n_values -= 1;	float tab = (float *) malloc(n_values * sizeof(float));	for (k = 0; k < n_values; k++){		*(tab + i) = *(values + i);	}	return *tab;}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int found=0 ,i=0, j;        while ((found==0)&&(i<n_values)){        if (value_to_supress==*(values+i)){            found==1;        }        i++;    }    i--;        for (j=i; j<n_values-1; j++){        *(values+j)=*(values+j+1);    }    return values;    }
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	n_values -= 1;	float tab = (float *) malloc(n_values * sizeof(float*));	for (k = 0; k < n_values; k++){		*(tab + i) = *(values + i);	}	return *tab;}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int found=0 ,i=0, j;        while ((found==0)&&(i<n_values)){        if (value_to_supress==*(values+i)){            found=1;        }        i++;    }    i--;        for (j=i; j<n_values-1; j++){        *(values+j)=*(values+j+1);    }    return values;    }
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int found=0 ,i=0, j;        while ((found==0)&&(i<n_values)){        if (value_to_supress==*(values+i)){            found==1;        }        i++;    }    i--;        for (j=i; j<n_values-1; j++){        *(values+j)=*(values+j+1);    }    return values;    }
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int found=0 ,i=0, j;        while ((found==0)&&(i<n_values)){        if (value_to_supress==*(values+i)){            found=1;        }        i++;    }    i--;        for (j=i; j<n_values-1; j++){        *(values+j)=*(values+j+1);    }    return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values) {    while (*(values+i); i<value_to-supress && i<n_values)        i++;    for (j=i;j<n_values-1; j++ )        *(values+j= *(values+j+1);    n_values--;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    while(*(values+i)!=value_to_supress)      i++;    if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-1;j++)           {               *(values+j)=*(values+1+j)           }    n_values--;          }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    while(*(values+i)!=value_to_supress)      i++;    if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-1;j++)           {               *(values+j)=*(values+1+j);           }    n_values--;          }
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=val){                i++;        }        if(i<n_values){        for(;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        tlog--;        }        return values;    }
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=val){                i++;        }        if(i<n_values){        for(;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }        return values;    }
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }        return values;    }
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values-1 && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values-1){        for(;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }        return values;    }
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values-1 && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values-1){        for(;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }        return values;    }
float suppress_value (float value_to_supress, float* values[], int n_values){    int i,j;    while(*(values+i)!=value_to_supress)      i++;    if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-1;j++)           {               *(values+j)=*(values+1+j);           }    n_values--;          }
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values-1 && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values-1){        for(;i<*(values+n_values-2);i++){                *(values+i-1)=*(values+i+1);        }        n_values--;        }        return values;    }
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values-1 && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values-1){        for(;i<*(values+n_values-2);i++){                *(values+i-1)=*(values+i+1);        }        n_values--;        }        return values;    }
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }        return values;    }
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }        return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    while(*(values+i)!=value_to_supress)      i++;    if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-1;j++)           {               *(values+j)=*(values+1+j);           }    n_values--;          }
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j;    for (i=0;i<n_values;i++)    {        if (*(values+i)==value_to_supress)        {            for (j=i;j<n_values-1;j++)            {                *(values+j)=*(values+j+1);            }            n_values--;            break;        }    }        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    while (*(values+i)<value_to-supress && i<n_values)        i++;    for (j=i;j<n_values-1; j++ )        *(values+j= *(values+j+1);    n_values--;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    while (*(values+i)<value_to_supress && i<n_values)        i++;    for (j=i;j<n_values-1; j++ )        *(values+j= *(values+j+1);    n_values--;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	values = (float) realloc(values, n_values - 1 * sizeof(float));	return values;}
float* suppress_value (float value_to_supress, float values, int n_values){    int i,j;    while(*(values+i)!=value_to_supress)      i++;    if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-1;j++)           {               *(values+j)=*(values+1+j);           }    n_values--;          }
float* suppress_value (float value_to_supress, float values[], int n_values) {    while (*(values+i)<value_to_supress && i<n_values)        i++;    for (j=i;j<n_values-1; j++ )        *(values+j)= *(values+j+1);    n_values--;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	*values = (float) realloc(values, n_values - 1 * sizeof(float));	return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    while(*(values+i)!=value_to_supress)      i++;    if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-1;j++)           {               *(values+j)=*(values+1+j);           }    n_values--;          }
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	values = (float*) realloc(values, n_values - 1 * sizeof(float));	return values;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	values = (float*) realloc(values, n_values - 1 * sizeof(float));	return &values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j;    while (*(values+i)<value_to_supress && i<n_values)        i++;    for (j=i;j<n_values-1; j++ )        *(values+j)= *(values+j+1);    n_values--;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	values = (float*) realloc(values, n_values - 1 * sizeof(float));	return *values;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	values = (float*) realloc(values, n_values - 1 * sizeof(float));	return values;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	*values = (float*) realloc(values, n_values - 1 * sizeof(float));	return values;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	&values = (float*) realloc(values, n_values - 1 * sizeof(float));	return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j;    while (*(values+i)<value_to_supress && i<n_values)        i++;    for (j=i;j<n_values-1; j++ )        *(values+j)= *(values+j+1);    n_values--;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j;    while (*(values+i)<value_to_supress && i<n_values)        i++;    for (j=i;j<n_values-1; j++ )        *(values+j)= *(values+j+1);    n_values--;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	values = (float*) realloc(values, n_values - 1 * sizeof(float));	return values;}
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(i;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }        return values;    }
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }        return values;    }
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	values = (float*) realloc(values, (n_values - 1) * sizeof(float));	return values;}
float *suppress_value(float value_to_supress, float *values, int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	values = (float*) realloc(values, (n_values - 1) * sizeof(float));	return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j;    for (i=0;i<n_values;i++)    {        if (*(values+i)==value_to_supress)        {            for (j=i;j<n_values-1;j++)            {                *(values+j)=*(values+j+1);            }            n_values--;            break;        }    }        return values;}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float* values,int n_values) {    int i,val_inter,verif=0;    for (i=0;i<n_values; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;            n_values -= 1;        }        if (verif==1) {            *(values+i) = *(values+i+1);        }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,stk;    stk=*values    for (i=0;i<n_values;i++)    {        if (*(values+i)==value_to_supress)        {            for (j=i;j<n_values-1;j++)            {                *(values+j)=*(values+j+1);            }            n_values--;            break;        }    }    *(values+n_values-1)=stk    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,stk;    stk=*values    for (i=0;i<n_values;i++)    {        if (*(values+i)==value_to_supress)        {            for (j=i;j<n_values-1;j++)            {                *(values+j)=*(values+j+1);            }            n_values--;            break;        }    }    *(values+n_values-1)=stk;    return values;}
float* suppress_value (float value_to_supress, float values, int n_values) {    int i=0,N,t,pass,j,trouve=0;    float* val;    val = (*float)malloc(n_val*sizeof(float));		while(i<n_values && trouve == 0)	{   	    *(val+i)=values[i];		if(T[i]==value_to_supress)		{       trouve=1;				for(j=i;j<N;j++)			{					*(val+j)=values[j+1]			}		}		i++;	}	return &val;    }
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,stk;    stk=*values    for (i=0;i<n_values;i++)    {        if (*(values+i)==value_to_supress)        {            for (j=i;j<n_values-1;j++)            {                *(values+j)=*(values+j+1);            }            n_values--;            break;        }    }    *(values+n_values-1)=stk;    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int *T=NULL;    T=(int*)malloc(n_values*sizeof(int));    int i,j;    while(*(values+i)!=value_to_supress)    {          i++;          *(T+i)=*(values+i);    }      if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-1;j++)           {               *(T+j)=*(T+1+j);           }    n_values--;    return *T;    }
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j,stk;    stk=*values;    for (i=0;i<n_values;i++)    {        if (*(values+i)==value_to_supress)        {            for (j=i;j<n_values-1;j++)            {                *(values+j)=*(values+j+1);            }            n_values--;            break;        }    }    *(values+n_values-1)=stk;    return values;}
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(;i<n_values-1;i++){                *(values+i)=*(values+i+1);        }        n_values--;        }        return values;    }
float* suppress_value (float value_to_supress, float *values, int n_values);float* suppress_value (float value_to_supress, float *values, int n_values){    int i, pos=0;    float *new_tab = (float *)malloc((n_values-1)*sizeof(float));    for(i=0; i<n_values; i++){        if(*(values+i) == value_to_supress){            pos = i;            break;        }    }    for(i=pos; i<n_values-1; i++){        *(values+i) = *(values+i+1);    }    for(i=0; i<n_values-1; i++){        *(new_tab+i) = *(values+i);    }    return new_tab;}
float* suppress_value (float value_to_supress, float values, int n_values) {    int i=0,N,t,pass,j,trouve=0;    float* val;    val = (*float)malloc(n_val*sizeof(float));		while(i<n_values && trouve == 0)	{   	    *(val+i)=*(values+i);		if(T[i]==value_to_supress)		{       trouve=1;				for(j=i;j<n_values;j++)			{					*(val+j)= *(values+j+1)			}		}		i++;	}	return &val;    }
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values,int n_values) {    int i,val_inter,verif=0;    for (i=0;i<n_values; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;            n_values -= 1;        }        if (verif==1) {            *(values+i) = *(values+i+1);        }    }    return values;}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values,int n_values) {    int i,val_inter,verif=0;    for (i=0;i<n_values; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;            n_values -= 1;        }        if (verif==1) {            *(values+i) = *(values+i+1);        }    }    return values;}
float* suppress_value (float value_to_supress, float *values, int n_values) {    int i=0,N,t,pass,j,trouve=0;    float* val;    val = (*float)malloc(n_val*sizeof(float));		while(i<n_values && trouve == 0)	{   	    *(val+i)=*(values+i);		if(*(values+i)==value_to_supress)		{       trouve=1;				for(j=i;j<n_values;j++)			{					*(val+j)= *(values+j+1)			}		}		i++;	}	return &val;    }
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j;    for (i=0;i<n_values;i++)    {        if (*(values+i)==value_to_supress)        {            for (j=i;j<n_values-1;j++)            {                *(values+j)=*(values+j+1);            }            n_values--;            break;        }    }        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i,j;    while (*(values+i)<value_to_supress && i<n_values)        i++;    for (j=i;j<n_values-1; j++ )        *(values+j)= *(values+j+1);    n_values--;}
float* suppress_value (float value_to_supress, float *values, int n_values) {    int i=0,N,t,pass,j,trouve=0;    float* val;    val = (float*)malloc(n_val*sizeof(float));		while(i<n_values && trouve == 0)	{   	    *(val+i)=*(values+i);		if(*(values+i)==value_to_supress)		{       trouve=1;				for(j=i;j<n_values;j++)			{					*(val+j)= *(values+j+1)			}		}		i++;	}	return &val;    }
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(;i<n_values-1;i++){                *(values+i)=*(values+i+1);        }        }        return values;    }
float* suppress_value (float value_to_supress, float *values, int n_values) {    int i=0,N,t,pass,j,trouve=0,n_val=n_values-1;    float* val;    val = (float*)malloc(n_val*sizeof(float));		while(i<n_values && trouve == 0)	{   	    *(val+i)=*(values+i);		if(*(values+i)==value_to_supress)		{       trouve=1;				for(j=i;j<n_values;j++)			{					*(val+j)= *(values+j+1)			}		}		i++;	}	return &val;    }
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values,int n_values) {    int i,val_inter,verif=0;    for (i=0;i<n_values; i++) {        if ((values+i) == value_to_supress) {            (values+i) = (values+i+1);            verif = 1;            n_values -= 1;        }        if (verif==1) {            (values+i) = (values+i+1);        }    }    return values;}
float* suppress_value (float value_to_supress, float *values, int n_values) {    int i=0,N,t,pass,j,trouve=0,n_val=n_values-1;    float* val;    val = (float*)malloc(n_val*sizeof(float));		while(i<n_values && trouve == 0)	{   	    *(val+i)=*(values+i);		if(*(values+i)==value_to_supress)		{       trouve=1;				for(j=i;j<n_values;j++)			{					*(val+j)= *(values+j+1);			}		}		i++;	}	return &val;    }
float* suppress_value (float value_to_supress, float *values, int n_values) {    int i=0,N,t,pass,j,trouve=0,n_val=n_values-1;    float* val;    val = (float*)malloc(n_val*sizeof(float));		while(i<n_values && trouve == 0)	{   	    *(val+i)=*(values+i);		if(*(values+i)==value_to_supress)		{       trouve=1;				for(j=i;j<n_values;j++)			{					*(val+j)= *(values+j+1);			}		}		i++;	}	return val;    }
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values,int n_values) {    int i,val_inter,verif=0;    for (i=0;i<n_values; i++) {        if (values+i == value_to_supress) {            values+i = values+i+1;            verif = 1;            n_values -= 1;        }        if (verif==1) {            values+i = values+i+1;        }    }    return values;}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values,int n_values) {    int i,val_inter,verif=0;    for (i=0;i<n_values; i++) {        if (values+i == value_to_supress) {            values+i = values+i+1;            verif = 1;            n_values -= 1;        }        if (verif==1) {            values+i = values+i+1;        }    }    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int found=0 ,i=0, j;        while ((found==0)&&(i<n_values)){        if (value_to_supress==*(values+i)){            found=1;        }        i++;    }    i--;        for (j=i; j<n_values-1; j++){        *(values+j)=*(values+j+1);    }    return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j;    while(*(values+i)!=value_to_supress)    {          i++;          *(T+i)=*(values+i);    }      if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-1;j++)           {               *(T+j)=*(T+1+j);           }    n_values--;    return *T;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j;    while(*(values+i)!=value_to_supress)    {          i++;          *(T+i)=*(values+i);    }      if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-1;j++)           {               *(T+j)=*(T+1+j);           }    n_values--;    return T;    }
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	float tab = (float *) malloc((n_values - 1) * sizeof(float));	for (k = 0; k < n_values; k++){		*(tab + k) = *(values + k);	}	return tab;}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values,int n_values) {    int i,val_inter,verif=0;    float* tab;    tab = &values    for (i=0;i<n_values; i++) {        if (*(tab+i) == value_to_supress) {            *(tab+i) = *(tab+i+1);            verif = 1;            n_values -= 1;        }        if (verif==1) {            *(tab+i) = *(tab+i+1);        }    }    return tab;}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values,int n_values) {    int i,val_inter,verif=0;    float* tab;    tab = &values;    for (i=0;i<n_values; i++) {        if (*(tab+i) == value_to_supress) {            *(tab+i) = *(tab+i+1);            verif = 1;            n_values -= 1;        }        if (verif==1) {            *(tab+i) = *(tab+i+1);        }    }    return tab;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	float tab;	tab = (float *) malloc((n_values - 1) * sizeof(float));	for (k = 0; k < n_values; k++){		*(tab + k) = *(values + k);	}	return tab;}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values,int n_values) {    int i,val_inter,verif=0;    float* tab;    tab = &values;    for (i=0;i<n_values; i++) {        if (*(tab+i) == value_to_supress) {            *(tab+i) = *(tab+i+1);            verif = 1;            n_values -= 1;        }        if (verif==1) {            *(tab+i) = *(tab+i+1);        }    }    return values;}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values,int n_values) {    int i,val_inter,verif=0;    float* tab;    tab = &values;    for (i=0;i<n_values; i++) {        if (*(tab+i) == value_to_supress) {            *(tab+i) = *(tab+i+1);            verif = 1;            n_values -= 1;        }        if (verif==1) {            *(tab+i) = *(tab+i+1);        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j;    while(*(values+i)!=value_to_supress)    {          i++;          *(T+i)=*(values+i);    }      if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-1;j++)           {               *(T+j)=*(T+1+j);           }       }    n_values--;    return T;    }
float shift_values_to_left(float n,float* tab, int taille){    float *T=NULL;    int i,j;    T=(float*) malloc(taille * sizeof(float));        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*tab+i)==n{        for(j=i;j<taille;j++){            *(T+j)=*(T+1+j);        }    }    taille --;    return T;}
float shift_values_to_left(float n,float* tab, int taille){    float *T=NULL;    int i,j;    T=(float*) malloc(taille * sizeof(float));        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille;j++){            *(T+j)=*(T+1+j);        }    }    taille --;    return T;}
float shift_values_to_left(float n,float* tab, int taille){    float *T=NULL;    int i,j;    T=(float*) malloc(taille * sizeof(float));        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille;j++){            *(T+j)=*(T+1+j);        }    }    taille --;    return *T;}
float suppress_value(float n,float* tab, int taille){    float *T=NULL;    int i,j;    T=(float*) malloc(taille * sizeof(float));        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille;j++){            *(T+j)=*(T+1+j);        }    }    taille --;    return *T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    int i,j;    T=(float*) malloc(taille * sizeof(float));        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille;j++){            *(T+j)=*(T+1+j);        }    }    taille --;    return *T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    int i,j;    T=(float*) malloc(taille * sizeof(float));        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille;j++){            *(T+j)=*(T+1+j);        }    }    taille --;    return T;}
float* suppress_value(float n, float* tab, int taille){        int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille;j++){            *(T+j)=*(T+1+j);        }    }    taille --;    return T;}
float* suppress_value(float n, float* tab, int taille){        int i,j;        while(*(tab+i)!=n){        i++;        *(tab+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille;j++){            *(tab+j)=*(tab+1+j);        }    }    taille --;    return tab;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    int i,j;    T=(float*) malloc(taille * sizeof(float));        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille;j++){            *(T+j)=*(T+1+j);        }    }    taille --;    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    int i,j;    T=(float*) malloc(taille * sizeof(int));        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille;j++){            *(T+j)=*(T+1+j);        }    }    taille --;    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    int i,j;    T=(float*) malloc(taille * sizeof(float));        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille;j++){            *(T+j)=*(T+1+j);        }    }    taille --;    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille;j++){            *(T+j)=*(T+1+j);        }    }    taille --;    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille;j++){            *(T+j)=*(T+1+j);        }    }    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille;j++){            *(T+j)=*(T+1+j);        }    }    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille-1;++j){            *(T+j)=*(T+1+j);        }    }    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille-1;++j){            *(T+j)=*(T+1+j);        }    }    taille--;    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille-1;++j){            *(T+j)=*(T+(j+1));        }    }    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if ((*tab+i)==n){        for(j=i;j<taille-1;++j){            *(T+j)=*(T+(j+1));        }    }    taille --;    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille-1;++j){            *(T+j)=*(T+(j+1));        }    }        return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille-1;++j){            *(T+j)=*(T+(j+1));        }    }    taille--;    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille-1;j++){            *(T+j)=*(T+(j+1));        }    }    taille--;    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille;j++){            *(T+j)=*(T+(j+1));        }    }    taille--;    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille-1;j++){            *(T+j)=*(T+1+j));        }    }    taille--;    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille-1;j++){            *(T+j)=*(T+1+j);        }    }    taille--;    return T;}
float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }        return values;
float* suppress_value (float value_to_supress, float values[], int n_values){    int *t;    for (int i=value_to_supress;i<n_values,i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    for (int i=0;i<n_values-1;i++){        *(t+i)==*(values+i);    }    return *t;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int *t;    for (int i=value_to_supress;i<n_values,i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    for (int i=0;i<n_values-1;i++){        *(t+i)==*(values+i);    }    return t;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float *t;    for (int i=value_to_supress;i<n_values,i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    for (int i=0;i<n_values-1;i++){        *(t+i)==*(values+i);    }    return t;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float *t;    float temp;    for (int i=value_to_supress;i<n_values,i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    for (int i=0;i<n_values-1;i++){        *(t+i)==*(values+i);    }    return t;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int *tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int * tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int * tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float *t;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    for (int i=0;i<n_values-1;i++){        *(t+i)==*(values+i);    }    return t;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float *t;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    for (int i=0;i<n_values-1;i++){        *(t+i)==*(values+i);    }    return *t;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille;++j){            *(T+j)=*(T+1+j);        }    }    taille--;    return T;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float *t;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    for (int i=0;i<n_values-1;i++){        *(t+i)==*(values+i);    }    return t;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille-1;++j){            *(T+j)=*(T+1+j);        }    }    taille--;    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille-1;++j){            *(T+j)=*(T+(j+1));        }    }    taille--;    return T;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* t;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    for (int i=0;i<n_values-1;i++){        *(t+i)==*(values+i);    }    return t;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille;++j){            *(T+j)=*(T+(j+1));        }    }    taille--;    return T;}
float* suppress_value(float n, float* tab, int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille;++j){            *(T+j)=*(T+(j+1));        }    }    return T;}
float* suppress_value(float n, float tab[], int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille;++j){            *(T+j)=*(T+(j+1));        }    }    return T;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int * tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int * tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int * tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int * tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int * tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int * tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int * tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return *tab;}
float* suppress_value(float n, float tab[], int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille;++j){            *(T+j)=*(T+(j+1));        }    }    taille--;    return T;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int * tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int * tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        values[j] = values[j+1];    }    taille_logique_values = n_values - 1;     tab = (float *) malloc( taille_logique_values *sizeof(float));    for( i=0; i<taille_logique_values;i++){        *(tab + i) = values[i];     }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* t;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    for (int i=0;i<n_values-1;i++){        *(t+i)=*(values+i);    }    return t;}
float* suppress_value(float n, float tab[], int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille-1;++j){            *(T+j)=*(T+(j+1));        }    }    taille--;    return T;}
float* suppress_value(float n, float tab[], int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille-1;++j){            *(T+j)=*(T+(j+1));        }    }    taille--;    return T;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* t;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    for (int i=0;i<n_values-1;i++){        *(t+i)=*(values+i);    }    return t;}
float* suppress_value(float n, float tab[], int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille-1;j++){            *(T+j)=*(T+(j+1));        }    }    taille--;    return T;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float t;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    for (int i=0;i<n_values-1;i++){        *(t+i)=*(values+i);    }    return t;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float t;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    for (int i=0;i<n_values-1;i++){        *(t+i)=*(values+i);    }    return *t;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	float* tab;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	float tab;	tab = (float *) malloc((n_values - 1) * sizeof(float));	for (k = 0; k < n_values; k++){		*(tab + k) = *(values + k);	}	return tab;}
float* suppress_value(float n, float tab[], int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille-1;++j){            *(T+j)=*(T+(j+1));        }    }    return T;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	float *tab;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	float tab;	tab = (float *) malloc((n_values - 1) * sizeof(float));	for (k = 0; k < n_values; k++){		*(tab + k) = *(values + k);	}	return tab;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    for(i=0; i<n_values; i++)    {        if(*value_to_supress==*(value+i))        {            *(values+i)=*(values+i+1);        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    float tab[];    float* t= &tab;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    for (int i=0;i<n_values-1;i++){        *(t+i)=*(values+i);    }    return t;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress){        i++;    }    for(j=i;j<n_values-1;j++){    *(values+j) = *(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int * tab;    while(values[i] != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        *(values + j) = *(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float tab[n_values-1];    float* t= &tab;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    for (int i=0;i<n_values-1;i++){        *(t+i)=*(values+i);    }    return t;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j, taille_logique_values;    int * tab;    while(*(values+i) != value_to_supress){        i++;    }    for(j=i;j<n_values -1;j++){        *(values + j) = *(values+j+1);    }    return values;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    for(i=0; i<n_values; i++)    {        if(*value_to_supress==*(value+i))        {            for(j=i; j<n_values; j++)            {                *(values+j)=*(values+j+1);            }        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)*sizeof(float));        for (int i=0 ; i<n_values;i++){        if (values[i]==values_to_supress){        *(tab+i)=values[i];        }            }            return *tab}
float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(;i<n_values-1);i++){                (values+i)=(values+i+1);        }        n_values--;        }        return values;
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    for(i=0; i<n_values; i++)    {        if(*value_to_supress==*(value+i))        {            for(j=i; j<n_values-1; j++)            {                *(values+j)=*(values+j+1);            }        }    }}
float suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress){        i++;    }    for(j=i;j<n_values-1;j++){    *(values+j) = *(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress){        i++;    }    for(j=i;j<n_values-1;j++){    *(values+j) = *(values+j+1);    }    return values;}
float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values)        {        for(;i<n_values-1;i++){                (values+i)=(values+i+1);        }        n_values--;        }        return values;
float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values)        {        for(;i<n_values-1;i++)        {                (values+i)=(values+i+1);        }        }        return values;
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	float *tab;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	float tab;	tab = (float) malloc((n_values - 1) * sizeof(float));	for (k = 0; k < n_values; k++){		*(tab + k) = *(values + k);	}	return tab;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	float *tab;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	float tab;	tab = (float) malloc((n_values - 1) * sizeof(float));	for (k = 0; k < n_values; k++){		*(tab + k) = *(values + k);	}	return tab;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	float *tab;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	float tab;	tab = (float *) malloc((n_values - 1) * sizeof(float));	for (k = 0; k < n_values; k++){		*(tab + k) = *(values + k);	}	return tab;}
float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values)        {        for(;i<n_values-1;i++)        {                (values+i)=(values+i+1);        }        }        return values;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	float *tab;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	tab = (float *) malloc((n_values - 1) * sizeof(float));	for (k = 0; k < n_values; k++){		*(tab + k) = *(values + k);	}	return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i ;    for (i = )}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values,int n_values) {    int i,val_inter,verif=0;    float* tab;    tab = &values;    for (i=0;i<n_values-1; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;            n_values -= 1;        }        if (verif==1) {            *(values+i) = *(values+i+1);        }    }    return values;}
float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values) {            for(;i<n_values-1;i++){                (values+i)=(values+i+1);        }        }        return values;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    for(i=0; i<n_values; i++)    {        if(*value_to_supress==*(value+i))        {            for(j=i; j<n_values; j++)            {                *(values+j)=*(values+j+1);            }        }    }    return values[n_values-1];}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    for(i=0; i<n_values; i++)    {        if(*value_to_supress==*(value+i))        {            for(j=i; j<n_values-1; j++)            {                *(values+j)=*(values+j+1);            }        }    }    return values[n_values-1];}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values[],int n_values) {    int i,val_inter,verif=0;    float* tab;    tab = &values;    for (i=0;i<n_values-1; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;            n_values -= 1;        }        if (verif==1) {            *(values+i) = *(values+i+1);        }    }    return values;}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values[],int n_values) {    int i,val_inter,verif=0;    for (i=0;i<n_values-1; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;            n_values -= 1;        }        if (verif==1) {            *(values+i) = *(values+i+1);        }    }    return values;}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values[],int n_values) {    int i,val_inter,verif=0;    for (i=0;i<n_values-1; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;            n_values -= 1;        }        if (verif==1) {            *(values+i) = *(values+i+1);        }    }    return &values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float tab[n_values-1];    float* t= &tab;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    t=(float*)malloc((n_values-1)*sizeof float)    for (int i=0;i<n_values-1;i++){        *(t+i)=*(values+i);    }    return t;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i ;    for (i = value_to_supress-1 ; i < n_values-1 ; i++)    {        *(values+i) = *(values+(i+1)) ;    }    n_values-- ;    return values ;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* t= &tab;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    t=(float*)malloc((n_values-1)*sizeof float)    for (int i=0;i<n_values-1;i++){        *(t+i)=*(values+i);    }    return t;}
float* suppress_value(float value_to_supress, float values[], int n_values){    int i=0;    while(i<n_values && *(values+i)!=value_to_supress){        i++;    }    if(i<n_values){        for(;i<n_values-1;i++){            (values+i)=(values+i+1);    }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* t= &tab;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    t=(float*)malloc((n_values-1)*sizeof float)    for (int j=0;j<n_values-1;j++){        *(t+i)=*(values+i);    }    return t;}
float* suppress_value(float value_to_supress, float values[], int n_values){    int i=0;    while(i<n_values && *(values+i)!=value_to_supress){        i++;    }    if(i<n_values){        for(;i<n_values-1;i++){            *(values+i)=*(values+i+1);    }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* t= &tab;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    t=(float*)malloc((n_values-1)*sizeof(float))    for (int j=0;j<n_values-1;j++){        *(t+i)=*(values+i);    }    return t;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i ;    for (i = value_to_supress-1 ; i < n_values ; i++)    {        *(values+i) = *(values+(i+1)) ;    }    n_values-- ;    return values ;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* t ;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    t=(float*)malloc((n_values-1)*sizeof(float))    for (int j=0;j<n_values-1;j++){        *(t+i)=*(values+i);    }    return t;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* t ;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    t=(float*)malloc((n_values-1)*sizeof(float));    for (int j=0;j<n_values-1;j++){        *(t+i)=*(values+i);    }    return t;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* t ;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    t=(float*)malloc((n_values-1)*sizeof(float));    for (int j=0;j<n_values-1;j++){        *(t+j)=*(values+j);    }    return t;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	float *tab;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){		 *(values + j) = *(values + j + 1);	}	tab = (float *) malloc((n_values - 1) * sizeof(float));	for (k = 0; k < n_values - 1; k++){		*(tab + k) = *(values + k);	}	return tab;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	float *tab, temp;	for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}	for (j = i; j < n_values - 1; j++){	    temp = *(values + j);	    *(values + j) = *(values + j + 1);		*(values + j + 1) = temp;	}	tab = (float *) malloc((n_values - 1) * sizeof(float));	for (k = 0; k < n_values - 1; k++){		*(tab + k) = *(values + k);	}	return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (values[i]!=values_to_supress){         *(tab+cpt)=values[i];            cpt++;        }    }            return *tab;}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	float *tab, temp;	/*for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}*/		for (j = i; j < n_values - 1; j++){	    temp = *(values + j);	    *(values + j) = *(values + j + 1);		*(values + j + 1) = temp;	}	tab = (float *) malloc((n_values - 1) * sizeof(float));	for (k = 0; k < n_values - 1; k++){		*(tab + k) = *(values + k);	}	return tab;}
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }        return values;    }
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	float *tab, temp;	/*for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}*/		for (j = i; j < n_values - 1; j++){	    temp = *(values + j);	    *(values + j) = *(values + j + 1);		*(values + j + 1) = temp;	}	tab = (float *) malloc((n_values - 1) * sizeof(float));	for (k = 0; k < n_values - 1; k++){		*(tab + k) = *(values + k);	}	return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=values_to_supress){         *(tab+cpt) = values[i];            cpt++;        }    }            return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){        int i=0;            while(i<n_values){        i++;        if(value_to_supress==*(value+i)){            *(value+i)=*(value+i+1)        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* t ;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    t=(float*)malloc((n_values-1)*sizeof(float));    for (int j=0;j<n_values-1;j++){        *(t+j)=*(values+j);    }    return t;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* t ;    float temp;    for (int i=value_to_supress;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    t=(float*)malloc((n_values-1)*sizeof(float));    for (int j=0;j<n_values-1;j++){        *(t+j)=*(values+j);    }    return t;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    while(i<n_values)    {        if(*value_to_supress==*(value+i))        {            for(j=i; j<n_values-1; j++)            {                *(values+j)=*(values+j+1);            }        }        i++;    }    return values[n_values-1];}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	float *tab, temp;	/*for (i = 0; i < n_values; i++){		if (*(values + i) == value_to_supress) break;		else return 0;	}*/		for (j = i; j < n_values; j++){	    temp = *(values + j);	    *(values + j) = *(values + j + 1);		*(values + j + 1) = temp;	}	tab = (float *) malloc((n_values - 1) * sizeof(float));	for (k = 0; k < n_values - 1; k++){		*(tab + k) = *(values + k);	}	return tab;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(i<n_values)    {        if(*value_to_supress==*(value+i))        {            for(j=i; j<n_values-1; j++)            {                *(values+j)=*(values+j+1);            }        }        i++;    }    return values[n_values-1];}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[100], int n_values){        int i=0;            while(i<n_values){        i++;        if(value_to_supress==*(value+i)){            *(value+i)=*(value+i+1)        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=values_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }            return *tab;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(i<n_values)    {        if(*value_to_supress==*(value+i))        {            for(j=i; j<n_values; j++)            {                *(values+j)=*(values+j+1);            }        }        i++;    }    return values[n_values-1];}
float* suppress_value (float value_to_supress, float values[100], int n_values);float* suppress_value (float value_to_supress, float values[100], int n_values){        int i=0;            while(i<n_values){        i++;        if(value_to_supress==*(value+i)){            *(value+i)=*(value+i+1)        }    }}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(i<n_values)    {        if(*value_to_supress==*(value+i))        {            for(j=i; j<n_values; j++)            {                *(values+j)=*(values+j+1);            }        }        i++;    }}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){        int i=0;            while(i<n_values){        i++;        if(value_to_supress==*(value+i)){            *(value+i)=*(value+i+1)        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }            return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }            return tab;}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values[],int n_values) {    int i,verif=0;    for (i=0;i<n_values; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;        }        if (verif==1){            *(values+i) = *(values+i+1);        }    }    n_values -= 1;    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* t ;    float temp;    for (int i=value_to_supress-1;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    t=(float*)malloc((n_values-1)*sizeof(float));    for (int j=0;j<n_values-1;j++){        *(t+j)=*(values+j);    }    return t;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }            return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* t ;    float temp;    for (int i=value_to_supress-1;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    t=(float*)malloc((n_values-1)*sizeof(float));    for (int j=0;j<n_values-1;j++){        *(t+j)=*(values+j);    }    return t;}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){        int i=0;            while(i<n_values){        i++;        if(value_to_supress==*(value+i)){            for(j=0; j<n_values;j++){            *(value+j)=*(value+j+1)                            }        }    }}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	float *tab, temp;	for (j = value_to_suppress - 1; j < n_values; j++){	    temp = *(values + j);	    *(values + j) = *(values + j + 1);		*(values + j + 1) = temp;	}	tab = (float *) malloc((n_values - 1) * sizeof(float));	for (k = 0; k < n_values - 1; k++){		*(tab + k) = *(values + k);	}	return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){        int i=0, j;            while(i<n_values){        i++;        if(value_to_supress==*(value+i)){            for(j=0; j<n_values;j++){            *(value+j)=*(value+j+1)                            }        }    }}
float *suppress_value(float value_to_supress, float values[], int n_values){	int i, j, k;	float *tab, temp;	for (j = value_to_supress - 1; j < n_values; j++){	    temp = *(values + j);	    *(values + j) = *(values + j + 1);		*(values + j + 1) = temp;	}	tab = (float *) malloc((n_values - 1) * sizeof(float));	for (k = 0; k < n_values - 1; k++){		*(tab + k) = *(values + k);	}	return tab;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(*value_to_supress==*(value+i))    {        i++;    }    for(j=i; j<n_values; j++)    {        *(values+j)=*(values+j+1);    }}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(*value_to_supress==*(value+i))    {        i++;    }    for(j=i; j<n_values; j++)    {        *(values+j)=*(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float)malloc((n_values-1)sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float)malloc((n_values-1)*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(*value_to_supress==*(value+i))    {        i++;    }    for(j=i; j<n_values-1; j++)    {        *(values+j)=*(values+j+1);    }    return values;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(*value_to_supress!=*(value+i))    {        i++;    }    for(j=i; j<n_values-1; j++)    {        *(values+j)=*(values+j+1);    }    return values;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(*value_to_supress!=*(value+i))    {        i++;    }    for(j=i; j<n_values-1; j++)    {        *(values+j)=*(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float)malloc((n_values-1)* sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float)malloc((n_values-1)* sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(i=0;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }    return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(i=1;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }    return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float)malloc((n_values-1)sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(i;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }    return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(i;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values-;        }    return values;    }
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(*value_to_supress!=*(value+i))    {        i++;    }    for(j=i; j<n_values-1; j++)    {        *(values+j)=*(values+j+1);    }    return values;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(*value_to_supress!=*(values+i))    {        i++;    }    for(j=i; j<n_values-1; j++)    {        *(values+j)=*(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int *T=NULL;    T=(int*)malloc(n_values*sizeof(int));    int i,j;    while(*(values+i)!=value_to_supress)    {          i++;          *(T+i)=*(values+i);    }      if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-1;j++)           {               *(T+j)=*(T+1+j);           }    n_values--;    return *T;    }
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(*(value_to_supress)!=*(values+i))    {        i++;    }    for(j=i; j<n_values-1; j++)    {        *(values+j)=*(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, indice=-1;    while (i<n_values && indice==-1)    {        if (*(values+i)==value_to_supress)            indice=i;        i++;    }    for (i=indice;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);    }    n_values--;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (*float)malloc((n_values-1)sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(value_to_supress!=*(values+i))    {        i++;    }    for(j=i; j<n_values-1; j++)    {        *(values+j)=*(values+j+1);    }    return values;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(*value_to_supress!=*(values+i))    {        i++;    }    for(j=i; j<n_values-1; j++)    {        *(values+j)=*(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(i;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }    return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i ,verif ;    verif = 0 ;    i = 0 ;         while (verif==0 && i<n_values)    {    if (*(values+i)==value_to_supress)        verif = 1 ;     i++ ;    }        for (i;i<n_values;i++)    *(values+i)=*(values+i+1);    }
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(i=0;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }        return values;    }
#include <stdio.h>float* suppress_value(float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){        for(i;i<*(values+n_values-1);i++){                *(values+i)=*(values+i+1);        }        n_values--;        }        return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j;    while(*(values+i)!=value_to_supress)    {          i++;          *(T+i)=*(values+i);    }      if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-1;j++)           {               *(T+j)=*(T+1+j);           }    n_values--;    return T;    }
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i ,verif ;    verif = 0 ;    i = 0 ;         while (verif==0 && i<n_values)    {    if (*(values+i)==value_to_supress)        verif = 1 ;     i++ ;    }        for (i;i<n_values;i++)    *(values+i)=*(values+i+1);        return values[];}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){            for(i;i<*(values+n_values-1);i++){                    *(values+i)=*(values+i+1);            }            n_values--;                            }    return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){            for(i;i<*(values+n_values-1);i++){                    *(values+i)=*(values+i+1);            }            n_values--;                            }    return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i ,verif ;    verif = 0 ;    i = 0 ;         while (verif==0 && i<n_values)    {    if (*(values+i)==value_to_supress)        verif = 1 ;     i++ ;    }        for (i;i<n_values;i++)    *(values+i)=*(values+i+1);        return values}
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j;    while(*(values+i)!=value_to_supress)    {          i++;          *(T+i)=*(values+i);    }      if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-1;j++)           {               *(T+j)=*(T+1+j);           }       }    n_values--;    return T;    }
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i ,verif ;    verif = 0 ;    i = 0 ;         while (verif==0 && i<n_values)    {    if (*(values+i)==value_to_supress)        verif = 1 ;     i++ ;    }        for (i;i<n_values;i++)    *(values+i)=*(values+i+1);        return values;}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values[],int n_values) {    int i,verif=0;    for (i=0;i<n_values; i++) {        if (verif==1){            *(values+i) = *(values+i+1);        }        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;            n_values -= 1;        }    }    return values;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(*value_to_supress!=*(values+i))    {        i++;    }    for(j=i; j<n_values-1; j++)    {        *(values+j)=*(values+j+1);    }    return values[];}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(*value_to_supress!=*(values+i))    {        i++;    }    for(j=i; j<n_values-1; j++)    {        *(values+j)=*(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){            for(i;i<*(n_values-1);i++){                    *(values+i)=*(values+i+1);            }            n_values--;                            }    return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){            for(i;i<*(n_values);i++){                    *(values+i)=*(values+i+1);            }            n_values--;                            }    return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){        int i=0;        while(i<n_values && *(values+i)!=value_to_supress){                i++;        }        if(i<n_values){            for(i;i<n_values;i++){                    *(values+i)=*(values+i+1);            }            n_values--;                            }    return values;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,f=0;    float *tab,tmp=0;    tab = (float*)malloc((n_values-1)*sizeof(float));    while (value_to_supress!=*(values+i)){            *(tab+i) = *(values+i);             i++;    }    for (f=i;f<n_values;f++){        *(tab+f) = *(values+f+1);    }    return *tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,f=0;    float *tab,tmp=0;    tab = (float*)malloc((n_values-1)*sizeof(float));    while (value_to_supress!=*(values+i)){            *(tab+i) = *(values+i);             i++;    }    for (f=i;f<n_values;f++){        *(tab+f) = *(values+f+1);    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    for (i=0;i<n_values;i++){        if (values_to_supress == *(values+i)){            for (j=i;i<n_values;j++){                *(values+j) = *(values+j+1);            }            n_values -= 1;         }    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    for (i=0;i<n_values;i++){        if (values_to_supress == *(values+i)){            for (j=i;i<n_values;j++){                *(values+j) = *(values+j+1);            }            n_values -= 1;         }    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i ,verif ;    verif = 0 ;    i = 0 ;         while (verif==0 && i<n_values)    {    if (*(values+i)==value_to_supress)        verif = 1 ;     i++ ;    }        for (i-1;i<n_values;i++)    *(values+i)=*(values+i+1);        return values;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    while(value_to_supress!=*(values+i))    {        i++;    }    for(j=i; j<n_values-1; j++)    {        *(values+j)=*(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i ,verif ;    verif = 0 ;    i = 0 ;         while (verif==0 && i<n_values)    {    if (*(values+i)==value_to_supress)        verif = 1 ;     i++ ;    }        for (i-1;i<n_values;i++)    *(values+i)=*(values+i+1);        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    for (i=0;i<n_values;i++){        if (value_to_supress == *(values+i)){            for (j=i;i<n_values;j++){                *(values+j) = *(values+j+1);            }            n_values -= 1;         }    }}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values[],int n_values) {    int i,verif=0;    for (i=0;i<n_values; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;        }        if (verif==1){            *(values+i) = *(values+i+1);        }    }    n_values -= 1;    return values;}
#include <stdio.h>float* suppress_value (float value_to_supress, float values[], int n_values){    int i, j;    i=0;    while(value_to_supress!=*(values+i))    {        i++;    }    for(j=i; j<n_values-1; j++)    {        *(values+j)=*(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    for (i=0;i<n_values;i++){        if (value_to_supress == *(values+i)){            for (j=i;i<n_values;j++){                *(values+j) = *(values+j+1);            }            n_values -= 1;         }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    for (i=0;i<n_values;i++){        if (value_to_supress == *(values+i)){            for (j=i;i<n_values;j++){                *(values+j) = *(values+j+1);            }            n_values -= 1;         }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float* t ;    float temp;    for (int i=value_to_supress-1;i<n_values;i++){        temp = *(values+i);        *(values+i)=*(values+i+1);        *(values+i+1)=temp;    }    t=(float*)malloc((n_values-1)*sizeof(float));    for (int j=0;j<n_values-1;j++){        *(t+j)=*(values+j);    }    return t;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    for (i=0;i<n_values;i++){        if (value_to_supress == *(values+i)){            for (j=i;i<n_values;j++){                *(values+j) = *(values+j+1);            }            n_values -= 1;         }    }    return values;}
loat* suppress_value (float value_to_supress, float values[], int n_values){int i=0, j=0;while(i<n_values && *(values+i)!=value_to_supress){i++;}for(j=i;j<n_values-1;j++){*(values+j) = *(values+j+1);}return values;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i ,verif ;    verif = 0 ;    i = 0 ;         while (verif==0 && i<n_values)    {    if (*(values+i)==value_to_supress)        verif = 1 ;     i++ ;    }        for (i=i-1;i<n_values;i++)    *(values+i)=*(values+i+1);        return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j;    while(*(values+i)!=value_to_supress)    {          i++;          *(T+i)=*(values+i);    }      if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-2;j++)           {               *(T+j)=*(T+1+j);           }       }    n_values--;    return T;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0,f=0;    float *tab;    tab = (float*)malloc((n_values-1)*sizeof(float));    while (value_to_supress!=*(values+i)){            *(tab+i) = *(values+i);             i++;    }    for (f=i;f<n_values;f++){        *(tab+f) = *(values+f+1);    }    return tab;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_supress,float values[],int n_values) {    int i,verif=0;    for (i=0;i<n_values; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;        }        if (verif==1){            *(values+i) = *(values+i+1);        }    }    n_values -= 1;    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    for (i=0;i<n_values;i++){        if (value_to_supress == *(values+i)){            for (j=i;i<n_values;j++){                *(values+j) = *(values+j+1);            }            n_values -= 1;             break;        }    }    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_supress,float values[],int n_values) {    int i,verif=0;    for (i=0;i<n_values; i++) {        if (verif==1){            *(values+i) = *(values+i+1);        }        if (*(values+i) == value_to_supress && verif==0) {            *(values+i) = *(values+i+1);            verif = 1;            n_values -= 1;        }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){int i=0, j=0;while(i<n_values && *(values+i)!=value_to_supress){i++;}for(j=i;j<n_values-1;j++){*(values+j) = *(values+j+1);}return values;}
float* suppress_value (float value_to_supress, float * tab, int n){    int i, pos = -1;    float * tab_creer;        for(i=0; i<n; i++)    {        if(*(tab+i)==value_to_supress)        {            pos = i;            break;        }    }        if(pos > -1)    {        tab_creer = (float*)malloc((n-1)*sizeof(float));    }    for(i=0; i<pos; i++)    {        *(tab_creer+i) = *(tab+i);    }    for(i=pos+1; i<n; i++)    {        *(tab_creer+i) = *(tab+i);    }        return tab_creer;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    for (i=0;i<n_values;i++){        if (value_to_supress == *(values+i)){            for (j=i;i<n_values;j++){                *(values+j) = *(values+j+1);            }            n_values -= 1;             return values;        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    for (i=0;i<n_values;i++){        if (value_to_supress == *(values+i)){            for (j=i;j<n_values;j++){                *(values+j) = *(values+j+1);            }            n_values -= 1;             return values;        }    }}
float* suppress_value(float n, float tab[], int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j;        while(*(tab+i)!=n){        i++;        *(T+i)=*(tab+i);    }    if (*(tab+i)==n){        for(j=i;j<taille-1;++j){            *(T+j)=*(T+(j+1));        }    }    return T;}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values[],int n_values) {    int i,verif=0;    for (i=0;i<n_values; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;        }        if (verif==1){            *(values+i) = *(values+i+1);        }    }    n_values -= 1;    return values;}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values[],int n_values) {    int i,verif=0;    for (i=0;i<n_values; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;        }        if (verif==1){            *(values+i) = *(values+i+1);        }    }    n_values -= 1;    return values;}
float* suppress_value (float value_to_supress, float * tab, int n){    int i, pos = -1;    float * tab_creer;        for(i=0; i<n; i++)    {        if(*(tab+i)==value_to_supress)        {            pos = i;            break;        }    }        if(pos > -1)    {        tab_creer = (float*)malloc((n-1)*sizeof(float));    }    for(i=0; i<pos; i++)    {        *(tab_creer+i) = *(tab+i);    }    for(i=pos+1; i<n; i++)    {        *(tab_creer+i-1) = *(tab+i);    }        return tab_creer;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, indice=-1;    while (i<n_values && indice==-1)    {        if (*(values+i)==value_to_supress)            indice=i;        i++;    }    for (i=indice;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);    }    n_values--;    return values[];}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, indice=-1;    while (i<n_values && indice==-1)    {        if (*(values+i)==value_to_supress)            indice=i;        i++;    }    for (i=indice;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);    }    n_values--;    return values;}
float* suppress_value(float n, float tab[], int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j=0;        for(i=0;i<taille;i++){        if(*(tab+i)!=n){            *(T+j)=*(tab+j);            j++;        }    }    if (*(tab+i)==n){        for(j=i;j<taille-1;++j){            *(T+j)=*(T+(j+1));        }    }    return T;}
float* suppress_value(float n, float tab[], int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j=0;        for(i=0;i<taille;i++){        if(*(tab+i)!=n){            *(T+j)=*(tab+j);            j++;        }    }    return T;}
float* suppress_value(float n, float tab[], int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j=0;        for(i=0;i<taille;i++){        if(*(tab+i)!=n){            *(T+j)=*(tab+j);            j++;        }    }    return T;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j=0;    for(i=0;i<values;i++)    {        if(*(values+i)!=value_to_supress)        {            *(T+j)=*(values+j)        }    if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-1;j++)           {               *(T+j)=*(T+1+j);           }       }    n_values--;    return T;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j=0;    for(i=0;i<values;i++)    {        if(*(values+i)!=value_to_supress)        {            *(T+j)=*(values+j)        }    }    if (*(values+i)==value_to_supress)       {           for(j=i;j<n_values-1;j++)           {               *(T+j)=*(T+1+j);           }       }    n_values--;    return T;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j=0;    for(i=0;i<values;i++)    {        if(*(values+i)!=value_to_supress)        {            *(T+j)=*(values+j)        }    }    n_values--;    return T;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j=0;    for(i=0;i<values;i++)    {        if(*(values+i)!=value_to_supress)        {            *(T+j)=*(values+j)            j++;        }    }    n_values--;    return T;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j=0;    for(i=0;i<values;i++)    {        if(*(values+i)!=value_to_supress)        {            *(T+j)=*(values+j);            j++;        }    }    n_values--;    return T;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j=0;    for(i=0;i<n_values;i++)    {        if(*(values+i)!=value_to_supress)        {            *(T+j)=*(values+j);            j++;        }    }    n_values--;    return T;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j=0;    for(i=0;i<n_values-1;i++)    {        if(*(values+i)!=value_to_supress)        {            *(T+j)=*(values+j);            j++;        }    }    n_values--;    return T;    }
float* suppress_value(float n, float tab[], int taille){    float *T=NULL;    T=(float*) malloc(taille * sizeof(float));    int i,j=0;        for(i=0;i<taille;i++){        if(*(tab+i)!=n){            *(T+j)=*(tab+i);            j++;        }    }    return T;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j=0;    for(i=0;i<n_values-1;i++)    {        if(*(values+i)!=value_to_supress)        {            *(T+j)=*(values+i);            j++;        }    }    n_values--;    return T;    }
float* suppress_value(float n, float tab[], int taille){    float *T=NULL;    int nb=0;    for(i=0;i<taille;i++){        if(*(tab+i)==n){            nb++;            break;        }    }        T=(float*) malloc((taille-nb) * sizeof(float));    int i,j=0;        for(i=0;i<taille;i++){        if(*(tab+i)!=n){            *(T+j)=*(tab+i);            j++;        }    }    return T;}
void shift_values_to_left(float *tab,int j, int n);void shift_values_to_left(float *tab, int n){    float temp;    for(int i = j; i < n-1; i++){        temp = *(tab+i);        *(tab+i) = *(tab+i+1);        *(tab+i+1) = temp;    }    return tab;}float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    for(int i = 0; i < n_values, i++){        if ( *(values+i) == (value_to_supress)){            values = shift_values_to_left(values, i, n_values);        }    }    float *tab_final;    tab_final = (float *) malloc ((n_values-1)*sizeof(float));    for(i = 0; i < n_values-1; i++){        *(tab_final+i) = *(values+i);    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j=0,n=0;    for(i=0;i<n_values-1;i++)    {        if(*(values+i)==value_to_supress)        {            *(T+j)=*(values+i);            n++;            break;        }    }     for(i=0;i<n_values-1;i++)    {        if(*(values+i)!=value_to_supress)        {            *(T+j)=*(values+i);            j++;        }    }    n_values-=n;    return T;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    float *T=NULL;    T=(float*)malloc(n_values*sizeof(float));    int i,j=0,n=0;    for(i=0;i<n_values-1;i++)    {        if(*(values+i)==value_to_supress)        {            *(T+j)=*(values+i);            n++;            break;        }    }     for(i=0;i<n_values-1;i++)    {        if(*(values+i)!=value_to_supress)        {            *(T+j)=*(values+i);            j++;        }    }    n_values-=n;    return T;    }
float* suppress_value(float n, float tab[], int taille){    float *T=NULL;    int nb=0;    int i,j=0;    for(i=0;i<taille;i++){        if(*(tab+i)==n){            nb++;            break;        }    }        T=(float*) malloc((taille-nb) * sizeof(float));       for(i=0;i<taille;i++){        if(*(tab+i)!=n){            *(T+j)=*(tab+i);            j++;        }    }    return T;}
void shift_values_to_left(float *tab,int j, int n);void shift_values_to_left(float *tab, int n){    float temp;    for(int i = j; i < n-1; i++){        temp = *(tab+i);        *(tab+i) = *(tab+i+1);        *(tab+i+1) = temp;    }    return tab;}float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    for(int i = 0; i < n_values; i++){        if ( *(values+i) == (value_to_supress)){            values = shift_values_to_left(values, i, n_values);        }    }    float *tab_final;    tab_final = (float *) malloc ((n_values-1)*sizeof(float));    for(i = 0; i < n_values-1; i++){        *(tab_final+i) = *(values+i);    }}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values[],int n_values) {    int i,verif=0;    for (i=0;i<n_values; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;        }        if (verif==1){            *(values+i) = *(values+i+1);        }    }    n_values -= 1;    return values;}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values[],int n_values) {    int i,verif=0;    for (i=0;i<n_values; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;        }        if (verif==1){            *(values+i) = *(values+i+1);        }    }    n_values -= 1;    return values;}
float shift_values_to_left(float *tab,int j, int n);float shift_values_to_left(float *tab, int n){    float temp;    for(int i = j; i < n-1; i++){        temp = *(tab+i);        *(tab+i) = *(tab+i+1);        *(tab+i+1) = temp;    }    return tab;}float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    for(int i = 0; i < n_values; i++){        if ( *(values+i) == (value_to_supress)){            values = shift_values_to_left(values, i, n_values);        }    }    float *tab_final;    tab_final = (float *) malloc ((n_values-1)*sizeof(float));    for(i = 0; i < n_values-1; i++){        *(tab_final+i) = *(values+i);    }}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values[],int n_values) {    int i,verif=0;    for (i=0;i<n_values; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;        }        if (verif==1){            *(values+i) = *(values+i+1);        }    }    n_values -= 1;    return values;}
float shift_values_to_left(float *tab,int j, int n);float shift_values_to_left(float *tab, int j, int n){    float temp;    for(int i = j; i < n-1; i++){        temp = *(tab+i);        *(tab+i) = *(tab+i+1);        *(tab+i+1) = temp;    }    return tab;}float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    for(int i = 0; i < n_values; i++){        if ( *(values+i) == (value_to_supress)){            values = shift_values_to_left(values, i, n_values);        }    }    float *tab_final;    tab_final = (float *) malloc ((n_values-1)*sizeof(float));    for(i = 0; i < n_values-1; i++){        *(tab_final+i) = *(values+i);    }}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values[],int n_values) {    int i,verif=0;    for (i=0;i<n_values; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;        }        if (verif==1){            *(values+i) = *(values+i+1);        }    }    n_values -= 1;    return values;}
#include <stdio.h>#include <stdlib.h>float* supress_value(float value_to_supress,float values[],int n_values) {    int i,verif=0;    for (i=0;i<n_values; i++) {        if (*(values+i) == value_to_supress) {            *(values+i) = *(values+i+1);            verif = 1;        }        if (verif==1){            *(values+i) = *(values+i+1);        }    }    n_values -= 1;    return values;}
float shift_values_to_left(float *tab,int j, int n);float shift_values_to_left(float *tab, int j, int n){    float temp;    for(int i = j; i < n-1; i++){        temp = *(tab+i);        *(tab+i) = *(tab+i+1);        *(tab+i+1) = temp;    }    return *tab;}float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    for(int i = 0; i < n_values; i++){        if ( *(values+i) == (value_to_supress)){            values = shift_values_to_left(values, i, n_values);        }    }    float *tab_final;    tab_final = (float *) malloc ((n_values-1)*sizeof(float));    for(i = 0; i < n_values-1; i++){        *(tab_final+i) = *(values+i);    }}
float shift_values_to_left(float *tab,int j, int n);float shift_values_to_left(float *tab, int j, int n){    float temp;    for(int i = j; i < n-1; i++){        temp = *(tab+i);        *(tab+i) = *(tab+i+1);        *(tab+i+1) = temp;    }    return *tab;}float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    for(i = 0; i < n_values; i++){        if ( *(values+i) == (value_to_supress)){            values = shift_values_to_left(values, i, n_values);        }    }    float *tab_final;    tab_final = (float *) malloc ((n_values-1)*sizeof(float));    for(i = 0; i < n_values-1; i++){        *(tab_final+i) = *(values+i);    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    for (i=0;i<n_values;i++){        if (value_to_supress == *(values+i)){            for (j=i;j<n_values;j++){                *(values+j) = *(values+j+1);            }            n_values -= 1;             return values;        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    for (i=0;i<n_values;i++){        if (value_to_supress == *(values+i)){            for (j=i;j<n_values;j++){                *(values+j) = *(values+j+1);            }            n_values -= 1;             return values;        }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    for (i=0;i<n_values;i++){        if (value_to_supress == *(values+i)){            for (j=i;j<n_values;j++){                *(values+j) = *(values+j+1);            }            n_values -= 1;             return values;        }    }    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int i,j;    for (i=0;i<n_values;i++){        if (value_to_supress == *(values+i)){            for (j=i;j<n_values;j++){                *(values+j) = *(values+j+1);            }            n_values -= 1;             return values;        }    }    return values;}
float shift_values_to_left(float *tab,int j, int n);float shift_values_to_left(float *tab, int j, int n){    float temp;    for(int i = j; i < n-1; i++){        temp = *(tab+i);        *(tab+i) = *(tab+i+1);        *(tab+i+1) = temp;    }    return *tab;}float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    for(i = 0; i < n_values; i++){        if ( *(values+i) == (value_to_supress)){            *values = shift_values_to_left(values, i, n_values);        }    }    float *tab_final;    tab_final = (float *) malloc ((n_values-1)*sizeof(float));    for(i = 0; i < n_values-1; i++){        *(tab_final+i) = *(values+i);    }}
float shift_values_to_left(float *tab,int j, int n);float shift_values_to_left(float *tab, int j, int n){    float temp;    for(int i = j; i < n-1; i++){        temp = *(tab+i);        *(tab+i) = *(tab+i+1);        *(tab+i+1) = temp;    }    return *tab;}float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    for(i = 0; i < n_values; i++){        if ( *(values+i) == (value_to_supress)){            *values = shift_values_to_left(values, i, n_values);        }    }    float *tab_final;    tab_final = (float *) malloc ((n_values-1)*sizeof(float));    for(i = 0; i < n_values-2; i++){        *(tab_final+i) = *(values+i);    }}
float shift_values_to_left(float *tab,int j, int n);float shift_values_to_left(float *tab, int j, int n){    float temp;    for(int i = j; i < n-2; i++){        temp = *(tab+i);        *(tab+i) = *(tab+i+1);        *(tab+i+1) = temp;    }    return *tab;}float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    for(i = 0; i < n_values; i++){        if ( *(values+i) == (value_to_supress)){            *values = shift_values_to_left(values, i, n_values);        }    }    float *tab_final;    tab_final = (float *) malloc ((n_values-1)*sizeof(float));    for(i = 0; i < n_values-2; i++){        *(tab_final+i) = *(values+i);    }}
float shift_values_to_left(float *tab,int j, int n);float shift_values_to_left(float *tab, int j, int n){    float temp;    for(int i = j; i < n-2; i++){        temp = *(tab+i);        *(tab+i) = *(tab+i+1);        *(tab+i+1) = temp;    }    return *tab;}float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    for(i = 0; i < n_values; i++){        if ( *(values+i) == (value_to_supress)){            *values = shift_values_to_left(values, i, n_values);        }    }    float *tab_final;    tab_final = (float *) malloc ((n_values-1)*sizeof(float));    for(i = 0; i < n_values-1; i++){        *(tab_final+i) = *(values+i);    }}
float*suppress_value(float n, float tab[],int taille){    float *T=NULL    int i,j=0;    for (i=0;i++){        if(*(tab+i)==n){            nb++;            break;           }    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int p=0, j;    while (p<n_values && value_to_supress != *(values+p)){        p++;}    for (j=p;j<n_values-1;j++){        *(values+j)=*(values+j+1);}    n_values--;    return values;}
float*suppress_value(float n, float tab[],int taille){    float *T=NULL    int nb=0;    int i,j=0;    for (i=0;i<taille;i++){        if(*(tab+i)==n){            nb++;            break;           }    }        T=(float*) malloc ((taille-nb) * sizeof(float));    for (i=0;i<taille;i++){        if(*(tab+i)!==n){            *(T+j)=*(tab+i);            j++        }    }    return T}                            
float*suppress_value(float n, float tab[],int taille){    float *T=NULL    int nb=0;    int i,j=0;    for (i=0;i<taille;i++){        if(*(tab+i)==n){            nb++;            break;           }    }        T=(float*) malloc((taille-nb) * sizeof(float));    for (i=0;i<taille;i++){        if(*(tab+i)!==n){            *(T+j)=*(tab+i);            j++        }    }    return T}                            
float*suppress_value(float n, float tab[],int taille){    float *T=NULL    int nb=0;    int i,j=0;    for (i=0;i<taille;i++){        if(*(tab+i)==n){            nb++;            break;           }    }        T=(float*) malloc((taille-nb) * sizeof(float));        for (i=0;i<taille;i++){        if(*(tab+i)!=n){            *(T+j)=*(tab+i);            j++        }    }    return T;}                            
float shift_values_to_left(float *tab,int j, int n);float shift_values_to_left(float *tab, int j, int n){    float temp;    for(int i = j; i < n-1; i++){        temp = *(tab+i);        *(tab+i) = *(tab+i+1);        *(tab+i+1) = temp;    }    return *tab;}float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    for(i = 0; i < n_values; i++){        if ( *(values+i) == (value_to_supress)){            *values = shift_values_to_left(values, i, n_values);        }    }    float *tab_final;    tab_final = (float *) malloc ((n_values-1)*sizeof(float));    for(i = 0; i < n_values-1; i++){        *(tab_final+i) = *(values+i);    }    return tab_final;}
float shift_values_to_left(float *tab,int j, int n);float shift_values_to_left(float *tab, int j, int n){    float temp;    for(int i = j; i < n-1; i++){        temp = *(tab+i);        *(tab+i) = *(tab+i+1);        *(tab+i+1) = temp;    }    return tab;}float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    for(i = 0; i < n_values; i++){        if ( *(values+i) == (value_to_supress)){            values = shift_values_to_left(values, i, n_values);        }    }    float *tab_final;    tab_final = (float *) malloc ((n_values-1)*sizeof(float));    for(i = 0; i < n_values-1; i++){        *(tab_final+i) = *(values+i);    }    return tab_final;}
float shift_values_to_left(float *tab,int j, int n);float shift_values_to_left(float *tab, int j, int n){    float temp;    for(int i = j; i < n-1; i++){        temp = *(tab+i);        *(tab+i) = *(tab+i+1);        *(tab+i+1) = temp;    }    return *tab;}float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i;    for(i = 0; i < n_values; i++){        if ( *(values+i) == (value_to_supress)){            *values = shift_values_to_left(values, i, n_values);        }    }    float *tab_final;    tab_final = (float *) malloc ((n_values-1)*sizeof(float));    for(i = 0; i < n_values-1; i++){        *(tab_final+i) = *(values+i);    }    return tab_final;}
float* suppress_value (float value_to_supress, float values[], int n_values){    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i, cpt = 0 ;	for (i = 0 ; i < n_values ; i++)	{		if (*(values + i) == value_to_find)			{			    cpt += 1 ;			}	}	return cpt ;}
int frequency_value(float value_to_find, float *values, int n_values){	int i, cpt = 0;	for (i=0;i<n_values;i++){		if (*(values+i) == value_to_find)			cpt += 1;	}	return cpt;}
float* suppress_value (float value_to_supress, float values[], int n_values)     int*p=(int*)malloc((n_values-1)*sizeof(int));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i)            ns=0;        if ns=1        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);    }
float* suppress_value (float value_to_supress, float values[], int n_values){     int*p=(int*)malloc((n_values-1)*sizeof(int));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i)            ns=0;        if ns=1        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);    }
float* suppress_value (float value_to_supress, float values[], int n_values){     int*p=(int*)malloc((n_values-1)*sizeof(int));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i)            ns=0;        if ns=1        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);    }
float* suppress_value (float value_to_supress, float values[], int n_values){     int*p=(int*)malloc((n_values-1)*sizeof(int));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i)            ns=0;        if ns=1        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);    }
float* suppress_value (float value_to_supress, float values[], int n_values){     int*p=(int*)malloc((n_values-1)*sizeof(int));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i)            ns=0;        if ns=1        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);        return p}
float* suppress_value (float value_to_supress, float values[], int n_values){     int*p=(int*)malloc((n_values-1)*sizeof(int));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i)            ns=0;        if ns=1        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);        return *p}
float* suppress_value (float value_to_supress, float values[], int n_values){     int*p=(int*)malloc((n_values-1)*sizeof(int));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i)            ns=0;        if ns=1        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);        return p;}
float* suppress_value (float value_to_supress, float values[], int n_values){     int*p=(int*)malloc((n_values-1)*sizeof(int));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i)            ns=0;        if ns=1        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);        return *p;}
float* suppress_value (float value_to_supress, float values[], int n_values){     int*p=(int*)malloc((n_values-1)*sizeof(int));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i)            ns=0;        if ns=1        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);        return *p;}
float* suppress_value (float value_to_supress, float values[], int n_values){     int*p=(int*)malloc((n_values-1)*sizeof(int));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i)            ns=0;        if ns=1        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);        return p;}
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(int*)malloc((n_values-1)*sizeof(int));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i)            ns=0;        if ns=1        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);        return p;}
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(int));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i)            ns=0;        if ns=1        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);        return p;}
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(int));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i))            ns=0;        if ns=1        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);        return p;}
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(int));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i))            ns=0;        if (ns=1)        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);        return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0,s=0,e;    while (i<n_values &&s==0)    {        if (*(values+1)==value_to_supress){            e=i;                                }    }    i++;    for (i=e;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);    }}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    float *values=NULL;    int nb=0;    int i=0;    while(value_to_supress!=*(values+i)){        i++    }        for (i=0;i<n_values;i++){        if(i!=n_values){            *(values+i+1)=*(values+i);        }    }    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0,s=0,e;    while (i<n_values &&s==0)    {        if (*(values+1)==value_to_supress){            e=i;            s=1;                                }        i++;    }        for (i=e;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);    }}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    float *values=NULL;    int nb=0;    int i=0;    while(value_to_supress!=*(values+i)){        i++    }        for (i=0;i<n_values;i++){        if(i!=n_values){            *(values+i+1)=*(values+i);        }    }    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(float));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i))            ns=0;        if (ns=1)        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);        return p;}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++    }        for (i=0;i<n_values;i++){        if(i!=n_values){            *(values+i+1)=*(values+i);        }    }    n_values--    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(float));    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i))            ns=0;        if (ns=1)        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);            }        return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0,s=0,e;    while (i<n_values &&s==0)    {        if (*(values+1)==value_to_supress){            e=i;            s=1;                                }        i++;    }        for (i=e;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);    }}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }        for (i=0;i<n_values;i++){        if(i!=n_values){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(float));    int ns=1,i=0;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i))            ns=0;        if (ns=1)        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);            }        return p;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0,s=0,e;    while (i<n_values &&s==0)    {        if (*(values+i)==value_to_supress){            e=i;            s=1;                                }        i++;    }        for (i=e;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);    }}
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(float)),i=0;    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i))            ns=0;        if (ns=1)        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);            }        return p;}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }        for (i=1;i<n_values;i++){        if(i!=n_values){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0,s=0,e;    while (i<n_values &&s==0)    {        if (*(values+i)==value_to_supress){            e=i;            s=1;                                }        i++;    }        for (i=e;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    int i=0,s=0,e;    while (i<n_values &&s==0)    {        if (*(values+i)==value_to_supress){            e=i;            s=1;                                }        i++;    }        for (i=e;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);    }}
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(float)),i=0;    int ns=1;    for (i;i<n_values;i++){        if (value_to_supress==*(values+i))            ns=0;        if (ns=1)        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);            }        return p;}
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(float));    int ns=1,i;    for (i=0;i<n_values;i++){        if (value_to_supress==*(values+i))            ns=0;        if (ns=1)        {            *p+i=*(values+i);        }        else            *p+i=*(values+i+1);            }        return p;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    while (i<n_values &&s==0)    {        if (*(values+i)==value_to_supress){            e=i;            s=1;                                }        i++;    }        for (i=e;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);    }}
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }        for (i=1;i<n_values-1 ;i++){        if(i!=n_values){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }        for (i=1;i<n_values-1 ;i++){        if(i!=n_values){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(float));    int ns=1,i;    for (i=0;i<n_values;i++){        if (value_to_supress==*(values+i))            ns=0;        if (ns=1)        {            *(p+i)=*(values+i);        }        else            *(p+i)=*(values+i+1);            }        return p;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    while (i<n_values &&s==0)    {        if (*(values+i)==value_to_supress){            e=i;            s=1;                                }        i++;    }    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    while (i<n_values &&s==0)    {        if (*(values+i)==value_to_supress){            e=i;            s=1;                                }        i++;    }    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    while (i<n_values &&s==0)    {        if (*(values+i)==value_to_supress){            e=i;            s=1;                                }        i++;    }    }
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }        for (i=1;i<n_values-1;i++){        if(i<n_values){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }        for (i=1;i<n_values-1;i++){        if(i<n_values){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }        for (i=0;i<n_values-1;i++){        if(i<n_values){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }        for (i=0;i<n_values;i++){        if(i<n_values){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }        for (i=0;i<n_values;i++){        if(i<n_values){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }        for (i=0;i<n_values;i++){        if(i<n_values){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }        for (i=1;i<n_values-1;i++){        if(i<n_values){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }        for (i=1;i<n_values-1;i++){        if(i<n_values){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    while (i<n_values && s==0)    {        if (*(values+i)==value_to_supress){            e=i;            s=1;                                }        i++;    }    for (i=e;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);    }}    
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }    if(i<n_values){    for (i=1;i<n_values-1;i++){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }    if(i<n_values){    for (i=1;i<n_values-1;i++){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }    if(i<n_values){    for (i=0;i<n_values;i++){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }    if(i<n_values){    for (i;i<n_values;i++){            *(values+i+1)=*(values+i);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    while (i<n_values && s==0)    {        if (*(values+i)==value_to_supress){            e=i;            s=1;                                }        i++;    }    for (i=e;i<n_values-2;i++)    {        *(values+i)=*(values+i+1);    }}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    while (i<n_values && s==0)    {        if (*(values+i)==value_to_supress){            e=i;            s=1;                                }        i++;    }    for (i=e;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);    }}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    while (i<n_values && s==0)    {        if (*(values+i)==value_to_supress){            e=i;            s=1;                                }        i++;    }    for (i=e-1;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);    }}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    while (i<n_values && s==0)    {        if (*(values+i)==value_to_supress){            e=i;            s=1;                                }        i++;    }    for (i=e-1;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);    }}    
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(float));    int ns=1,i;    for (i=0;i<n_values;i++){        if (value_to_supress==*(values))            ns=0;        if (ns=1)        {            *(p+i)=*(values+i);        }        else            *(p+i)=*(values+i+1);    }        return p;}
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(float));    int ns=1,i;    for (i=0;i<n_values;i++){        if (value_to_supress==*(values+1))            ns=0;        if (ns=1)        {            *(p+i)=*(values+i);        }        else            *(p+i)=*(values+i+1);    }        return p;}
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(float));    int ns=1,i;    for (i=0;i<n_values;i++){        if (value_to_supress==*(values+i))            ns=0;        if (ns=1)        {            *(p+i)=*(values+i);        }        else            *(p+i)=*(values+i+1);    }        return p;}
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(float));    int ns=1,i;    for (i=0;i<n_values;i++){        if (value_to_supress==*(values+i+1))            ns=0;        if (ns=1)        {            *(p+i)=*(values+i);        }        else            *(p+i)=*(values+i+1);    }        return p;}
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(float));    int ns=1,i;    for (i=0;i<n_values;i++){        if (value_to_supress==*(values+i))            ns=0;        if (ns=1)        {            *(p+i)=*(values+i);        }        else            *(p+i)=*(values+i+1);    }        return p;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    
float* suppress_value (float value_to_supress, float values[], int n_values);float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0;    while(value_to_supress!=*(values+i)){        i++;    }    if(i<n_values){    for (i;i<n_values;i++){            *(values+i)=*(values+i+1);        }    }    n_values--;    return values;}                            
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    while (i<n_values && s==0)    {        if (*(values+i)==value_to_supress){            e=i;            s=1;                                }        i++;    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    while (i<n_values && s==0)    {        if (*(values+i)==value_to_supress){            e=i;            s=1;                                }        i++;    }}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *T =NULL    int a=0,i=0,j;    for (int i = 0; i < n_values; i++){        if (*(values+i) == n){            a=1;        }    }    T=(*float) malloc((n_values-a) * sizeof(float));        for (int i = 0; i < n_values; i++){            if (*(values+i) != n){                *(T+j) = *(values+i);                j++;            }        }    return T;}
float* suppress_value (float value_to_supress, float values[], int n_values){     float*p=(float*)malloc((n_values-1)*sizeof(float));    int ns=1,i;    for (i=0;i<n_values;i++){        if (value_to_supress==*(values+i))        {            ns=0;        }        if (ns==1)        {            *(p+i)=*(values+i);        }        else            *(p+i)=*(values+i+1);    }        return p;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            e=i;            s=1;                                }        i++;    }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s=1;                                }        i++;    }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s=1;                                }        i++;    }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s=1;                                }        i++;    }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s=1;                                }        i++;    }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==(*(values+i))){            s=1;                                }        i++;    }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s=1;                                }        i++;    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    int nb=0;    for (int i = 0 ; i < n_values){        if (n == *(value+i)){            nb ++;            break;        }    }        float * newtab = (float*) malloc ((n_values-nb) * sizeof(float));                return newtab;    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s=1;                                }        i++;    }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)        {            s++;                                }        i++;    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    int nb=0;    for (int i = 0 ; i < n_values){        if (value_to_supress == *(value+i)){            nb ++;            break;        }    }        float * newtab = (float*) malloc ((n_values-nb) * sizeof(float));                return newtab;    }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *T =NULL    int a=0,i,j=0;    for (int i = 0; i < n_values; i++){        if (*(values+i) == value_to_supress){            a=1;        }    }    T=(float*) malloc((n_values-a) * sizeof(float));        for (int i = 0; i < n_values; i++){            if (*(values+i) != value_to_supress){                *(T+j) = *(values+i);                j++;            }        }    return T;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int nb=0;    for (int i = 0 ; i < n_values){        if (value_to_supress == *(values+i)){            nb ++;            break;        }    }        float * newtab = (float*) malloc ((n_values-nb) * sizeof(float));                return newtab;    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)        {            s++;                                }        i++;    }    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)        {            s++;                                }        i++;    }    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int nb=0;    for (int i = 0 ; i < n_values ; i++){        if (value_to_supress == *(values+i)){            nb ++;            break;        }    }        float * newtab = (float*) malloc ((n_values-nb) * sizeof(float));                return newtab;    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;                                }        i++;    }    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;                                }        i++;    }    }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *T =NULL;    int a=0,i,j=0;    for (int i = 0; i < n_values; i++){        if (*(values+i) == value_to_supress){            a=1;        }    }    T=(float*) malloc((n_values-a) * sizeof(float));        for (int i = 0; i < n_values; i++){            if (*(values+i) != value_to_supress){                *(T+j) = *(values+i);                j++;            }        }    return T;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==values[i])        {            s++;                                }        i++;    }    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;                                }        i++;    }    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int nb=0;    for (int i = 0 ; i < n_values ; i++){        if (value_to_supress == *(values+i)){            nb ++;            break;        }    }    float * newtab = (float*) malloc ((n_values-nb) * sizeof(float));    return newtab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int nb=0;    for (int i = 0 ; i < n_values ; i++){        if (value_to_supress == *(values+i)){            nb ++;            break;        }    float * newtab = (float*) malloc ((n_values-nb) * sizeof(float));    return newtab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int nb=0;    for (int i = 0 ; i < n_values ; i++){        if (value_to_supress == *(values+i)){            nb ++;            break;        }    }    float * newtab = (float*) malloc ((n_values-nb) * sizeof(float));    return newtab;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;                                }        i++;    }    }
float* suppress_value(float value_to_supress, float values[], int n_values)

float* suppress_value (float value_to_supress, float values, int n_values){    nb = 0;    for(i=0; i < n_values; i++){        if (value_to_supress == *(values + i)){            nb++;            break;        }    }    float* newtab = (float*) malloc ((n_values - nb) * sizeof(float));    for(int u=0; u < i; u++){        *(newtab+u) = *(values+u);    }    for(int u=i; u < n_values; u++){        *(newtab+u) = *(values+i+1);    }    return newtab;}
float* suppress_value (float value_to_supress, float values, int n_values){    nb = 0;    for(i=0; i < n_values; i++){        if (value_to_supress == *(values + i)){            nb++;            break;        }    }    float* newtab = (float*) malloc ((n_values-nb) * sizeof(float));    for(int u=0; u < i; u++){        *(newtab+u) = *(values+u);    }    for(int u=i; u < n_values; u++){        *(newtab+u) = *(values+u+1);    }    return newtab;}
loat* suppress_value (float value_to_supress, float values[], int n_values) 
float* suppress_value(float value_to_supress, float values[], int n_values){    } 
float* suppress_value (float value_to_supress, float values[], int n_values){    int nb;    for (int i=0; i<n_values; i++)    {        if (value_to_supress == *(value + i)){            nb++;            break;        }    }        float*newtab = (float *) malloc ((n_values-nb) * sizeof(float));        for (int j=0; j<(n_values-nb); j++){        if (*(newtab+j) != value_to_supress)        {            *(newtab+j) = *(values+i);        }    }    return newtab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int nb;    for (int i=0; i<n_values; i++)    {        if (value_to_supress == *(value + i)){            nb++;            break;        }    }        float*newtab = (float *) malloc ((n_values-nb) * sizeof(float));        for (int j=0; j<(n_values-nb); j++){        int j=0;        if (*(newtab+j) != value_to_supress)        {            *(newtab+j) = *(values+i);            j++;        }    }    return newtab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int nb;    for (int i=0; i<n_values; i++)    {        if (value_to_supress == *(value + i)){            nb++;            break;        }    }        float*newtab = (float *) malloc ((n_values-nb) * sizeof(float));        for (int j=0; j<(n_values-nb); j++){        int i=0;        if (*(newtab+j) != value_to_supress)        {            *(newtab+j) = *(values+i);            i++;        }    }    return newtab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    int nb;    for (int i=0; i<n_values; i++)    {        if (value_to_supress == *(values + i)){            nb++;            break;        }    }        float*newtab = (float *) malloc ((n_values-nb) * sizeof(float));        for (int j=0; j<(n_values-nb); j++){        int i=0;        if (*(newtab+j) != value_to_supress)        {            *(newtab+j) = *(values+i);            i++;        }    }    return newtab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float)malloc((n_values-1)sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
void shift_values_to_left(float* values, int n_values){        int temp=*values,j=0;    for(int i=0;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);        j++;    }    *(values+j)=temp;}float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* = values2;    values2=(float*)malloc(sizeof(float)*(n_values-1));    for(int i=0;i<n_values;i++    {        if(*(values+i)==value_to_supress)        {           for(int j=i;j<n_values-1;j++)           {               *(values+j)=*(values+j+1);           }        }    }    for(int k=0;k<n_values-1;k++)    {        *(values2+k)=*(values+k);    }    return values2;}
void shift_values_to_left(float* values, int n_values){        int temp=*values,j=0;    for(int i=0;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);        j++;    }    *(values+j)=temp;}float* suppress_value (float value_to_supress, float  *values, int n_values) {    float = *values2;    values2=(float*)malloc(sizeof(float)*(n_values-1));    for(int i=0;i<n_values;i++    {        if(*(values+i)==value_to_supress)        {           for(int j=i;j<n_values-1;j++)           {               *(values+j)=*(values+j+1);           }        }    }    for(int k=0;k<n_values-1;k++)    {        *(values2+k)=*(values+k);    }    return values2;}
void shift_values_to_left(float* values, int n_values){        int temp=*values,j=0;    for(int i=0;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);        j++;    }    *(values+j)=temp;}float* suppress_value (float value_to_supress, float  *values, int n_values) {    float *values2;    values2=(float*)malloc(sizeof(float)*(n_values-1));    for(int i=0;i<n_values;i++    {        if(*(values+i)==value_to_supress)        {           for(int j=i;j<n_values-1;j++)           {               *(values+j)=*(values+j+1);           }        }    }    for(int k=0;k<n_values-1;k++)    {        *(values2+k)=*(values+k);    }    return values2;}
void shift_values_to_left(float* values, int n_values){        int temp=*values,j=0;    for(int i=0;i<n_values-1;i++)    {        *(values+i)=*(values+i+1);        j++;    }    *(values+j)=temp;}float* suppress_value (float value_to_supress, float  *values, int n_values) {    float *values2;    values2=(float*)malloc(sizeof(float)*(n_values-1));    for(int i=0;i<n_values;i++)    {        if(*(values+i)==value_to_supress)        {           for(int j=i;j<n_values-1;j++)           {               *(values+j)=*(values+j+1);           }        }    }    for(int k=0;k<n_values-1;k++)    {        *(values2+k)=*(values+k);    }    return values2;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float *values2;    values2=(float*)malloc(sizeof(float)*(n_values-1));    for(int i=0;i<n_values;i++)    {        if(*(values+i)==value_to_supress)        {           for(int j=i;j<n_values-1;j++)           {               *(values+j)=*(values+j+1);           }        }    }    for(int k=0;k<n_values-1;k++)    {        *(values2+k)=*(values+k);    }    return values2;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values, i++){        if (value_to_supress == *(values + i)){            pos = i;        }    }    shift_values()}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if (value_to_supress == *(values + i)){            pos = i;        }    }    shift_values()}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if (value_to_supress == *(values + i)){            pos = i;        }    }    float memf = *(values);    for (i = pos; i <n_values-1 ; i++){        *(values + i )= *(values + i+1);    }    *(values + n_values -1) = memf;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress)    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if (value_to_supress == *(values + i)){            pos = i;        }    }    float memf = *(values);    for (i = pos; i <n_values-2 ; i++){        *(values + i )= *(values + i+1);    }    *(values + n_values -2) = memf;}
// Prototypesfloat min_floats(float* values, int n_values);float* suppress_value(float value_to_suppress, float *values, int n_values);// Définitionsfloat min_floats(float* values, int n_values){    int min, i;        min = *values;    for (i=1; i < n_values; i++)    {        if (min > *(values + i))        {            min = *(values + i);        }    }        return min;}float* suppress_value(float value_to_suppress, float *values, int n_values){    /* -- Principe possible à appliquer :    - Trouver le premier emplacement de la valeur à supprimer grâce à la         fonction précédente.    - Boucle for à i = (emplacement de la valeur) avec (tab-1 = tab)...    */        int i = 0;    int x = min_floats(values, n_values);        for (i = x; i < n_values; i++)    {        *(values + i - 1) = *(values + i);    }}
float* suppress_value (float value_to_supress, float* values, int n_values){        float * end;    int i, j, cpt = 0;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        j = i + cpt;        if (value_to_supress == *(values+i)){            cpt += 1;            *(end+i) = *(values+j+1);        }        else            *(end+i) = *(values+j);    }        return end; }
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if (value_to_supress == *(values + i)){            pos = i;        }    }    float memf = *(values);    for (i = pos; i <n_values-2 - pos; i++){        *(values + i )= *(values + i+1);    }    *(values + n_values -2) = memf;}
float* suppress_value (float x, float  *Tab, int size){    int i, Occ_1;    int a=0, x;    while(*(Tab+a)!=x && x<size){        a++;    }    if(*(Tab+a)==x){        for(i=a; i<size; i++) {            *(Tab+i)=*(Tab+i+1);        }        size=size-1;    }}
float* suppress_value (float x, float  *Tab, int size){    int Occ_1;    int a=0;    while(*(Tab+a)!=x && x<size){        a++;    }    if(*(Tab+a)==x){        for(i=a; i<size; i++) {            *(Tab+i)=*(Tab+i+1);        }        size=size-1;    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if (value_to_supress == *(values + i)){            pos = i;        }    }    float memf = *(values);    for (i = pos; i <n_values-1 - pos; i++){        *(values + i )= *(values + i+1);    }    *(values + n_values -2) = memf;}
float* suppress_value (float x, float  *Tab, int size){    int Occ_1;    int a=0, i;    while(*(Tab+a)!=x && x<size){        a++;    }    if(*(Tab+a)==x){        for(i=a; i<size; i++) {            *(Tab+i)=*(Tab+i+1);        }        size=size-1;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            for (j = i;  < n_values-1; i++){                *(values + i) = *(values + (i+1));            }        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            for (j = i; j < n_values-1; i++){                *(values + i) = *(values + (i+1));            }        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i, j;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            for (j = i; j < n_values-1; i++){                *(values + i) = *(values + (i+1));            }        }    }}
// Prototypesfloat min_floats(float* values, int n_values);float* suppress_value(float value_to_suppress, float *values, int n_values);// Définitionsfloat min_floats(float* values, int n_values){    int min, i;        min = *values;    for (i=1; i < n_values; i++)    {        if (min > *(values + i))        {            min = *(values + i);        }    }        return min;}float* suppress_value(float value_to_suppress, float *values, int n_values){    /* -- Principe possible à appliquer :    - Trouver le premier emplacement de la valeur à supprimer grâce à la         fonction précédente.    - Boucle for à i = (emplacement de la valeur) avec (tab-1 = tab)...    */        int i = 0;    int x = (int)min_floats(values, n_values);        for (i = x; i < n_values; i++)    {        *(values + i - 1) = *(values + i);    }}
float* suppress_value (float x, float  *Tab, int size){    int Occ_1;    int a=0, i;    while(*(Tab+a)!=x && x<size){        a++;    }    if(*(Tab+a)==x){        for(i=a; i<size; i++) {            *(Tab+i)=*(Tab+i+1);        }        size=size-1;    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if (value_to_supress == *(values + i)){            pos = i;            break;        }    }    float memf = *(values);    for (i = pos; i <n_values-2 - pos; i++){        *(values + i )= *(values + i+1);    }    *(values + n_values -2) = memf;}
// Prototypesfloat min_floats(float* values, int n_values);float* suppress_value(float value_to_suppress, float *values, int n_values);// Définitionsfloat min_floats(float* values, int n_values){    int min, i;        min = *values;    for (i=1; i < n_values; i++)    {        if (min > *(values + i))        {            min = *(values + i);        }    }        return min;}float* suppress_value(float value_to_suppress, float *values, int n_values){    /* -- Principe possible à appliquer :    - Trouver le premier emplacement de la valeur à supprimer grâce à la         fonction précédente.    - Boucle for à i = (emplacement de la valeur) avec (tab-1 = tab)...    */        int i = 0;    int x = (int)min_floats(values, n_values);    printf("%d\n", x);        for (i = x; i < n_values; i++)    {        *(values + i - 1) = *(values + i);    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;                    }    }    float memf = *(values);    for (i = pos; i <n_values-2 - pos; i++){        *(values + i )= *(values + i+1);    }    *(values + n_values -2) = memf;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0;    while(i < n_values && *(values+i) != vale_to_supress){        i++;    }    }
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;                    }    }    float memf = *(values);    for (i = pos; i <n_values-2 - pos; i++){        *(values + i )= *(values + i+1);    }    *(values + n_values -2) = memf;}
// Prototypesfloat min_floats(float* values, int n_values);float* suppress_value(float value_to_suppress, float *values, int n_values);// Définitionsfloat min_floats(float* values, int n_values){    int min, i;        min = *values;    for (i=1; i < n_values; i++)    {        if (min > *(values + i))        {            min = *(values + i);        }    }        printf("%d\n", min);        return min;}float* suppress_value(float value_to_suppress, float *values, int n_values){    /* -- Principe possible à appliquer :    - Trouver le premier emplacement de la valeur à supprimer grâce à la         fonction précédente.    - Boucle for à i = (emplacement de la valeur) avec (tab-1 = tab)...    */        int i = 0;    int x = (int)min_floats(values, n_values);    printf("%d\n", x);        for (i = x; i < n_values; i++)    {        *(values + i - 1) = *(values + i);    }}
float* suppress_value (float x, float  *Tab, int size){    int a=0, i;    while(*(Tab+a)!=x && x<size){        a++;    }    if(*(Tab+a)==x){        for(i=a; i<size; i++) {            *(Tab+i)=*(Tab+i+1);        }        size=size-1;    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }    pos--;    float memf = *(values);    for (i = pos; i <n_values-2 - pos; i++){        *(values + i )= *(values + i+1);    }    *(values + n_values -2) = memf;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i, j;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            for (j = i; j < n_values-1; i++){                *(values + j) = *(values + (j+1));            }        }    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }    float memf = *(values);    for (i = pos; i <n_values-1 - pos; i++){        *(values + i )= *(values + i+1);    }    *(values + n_values -1) = memf;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i, j;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            for (j = i; j < n_values-1; j++){                *(values + j) = *(values + (j+1));                n_values -=;            }        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    }
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }    float memf = *(values);    for (i = pos; i <n_values-2 - pos; i++){        *(values + i )= *(values + i+1);    }    *(values + n_values -2) = memf;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }    float memf = *(values);    for (i = pos; i <n_values-2 - pos; i++){        *(values + i )= *(values + i+1);    }    *(values + n_values -2) = memf;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i, j;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            for (j = i; j < n_values-1; j++){                *(values + j) = *(values + (j+1));                n_values-= 1;            }        }    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }    pos--;    float memf = *(values);    for (i = pos; i <n_values-2 - pos; i++){        *(values + i )= *(values + i+1);    }    *(values + n_values -2) = memf;}
// Prototypesfloat min_floats(float* values, int n_values);float* suppress_value(float value_to_suppress, float *values, int n_values);// Définitionsfloat min_floats(float* values, int n_values){    int min, i;        min = *values;    for (i=1; i < n_values; i++)    {        if (min > *(values + i))        {            min = *(values + i);        }    }        printf("%d\n", min);        return min;}float* suppress_value(float value_to_suppress, float *values, int n_values){    /* -- Principe possible à appliquer :    - Trouver le premier emplacement de la valeur à supprimer grâce à la         fonction précédente.    - Boucle for à i = (emplacement de la valeur) avec (tab-1 = tab)...    */        int i = 0;    float x = min_floats(values, n_values);    printf("%d\n", x);        return;        for (i = x; i < n_values; i++)    {        *(values + i - 1) = *(values + i);    }}
// Prototypesfloat min_floats(float* values, int n_values);float* suppress_value(float value_to_suppress, float *values, int n_values);// Définitionsfloat min_floats(float* values, int n_values){    int min, i;        min = *values;    for (i=1; i < n_values; i++)    {        if (min > *(values + i))        {            min = *(values + i);        }    }        printf("%d\n", min);        return min;}float* suppress_value(float value_to_suppress, float *values, int n_values){    /* -- Principe possible à appliquer :    - Trouver le premier emplacement de la valeur à supprimer grâce à la         fonction précédente.    - Boucle for à i = (emplacement de la valeur) avec (tab-1 = tab)...    */        int i = 0;    float x = min_floats(values, n_values);    printf("%d\n", x);        return 0.f;        for (i = x; i < n_values; i++)    {        *(values + i - 1) = *(values + i);    }}
// Prototypesfloat min_floats(float* values, int n_values);float* suppress_value(float value_to_suppress, float *values, int n_values);// Définitionsfloat min_floats(float* values, int n_values){    int min, i;        min = *values;    for (i=1; i < n_values; i++)    {        if (min > *(values + i))        {            min = *(values + i);        }    }        printf("%d\n", min);        return min;}float* suppress_value(float value_to_suppress, float *values, int n_values){    /* -- Principe possible à appliquer :    - Trouver le premier emplacement de la valeur à supprimer grâce à la         fonction précédente.    - Boucle for à i = (emplacement de la valeur) avec (tab-1 = tab)...    */        int i = 0;    float x = min_floats(values, n_values);    printf("%d\n", x);        for (i = x; i < n_values; i++)    {        *(values + i - 1) = *(values + i);    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }    for (i = pos; i <n_values-1 - pos; i++){        *(values + i+1 )= *(values + i+2);    }    *(values + n_values -2) = memf;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j, bol = 0;    while (cpt < n_values && *(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);    }    if (cpt == n_values){        return p;    }    else {        j = cpt;        cpt++;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }    for (i = pos; i <n_values-1 - pos; i++){        *(values + i+1 )= *(values + i+2);    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }    for (i = pos; i <n_values-1 - pos; i++){        *(values + i+1 )= *(values + i+2);    }}
float* suppress_value (float x, float  *Tab, int size){    int i;    int a=0;    while(*(Tab+a)!=x && x<size){        a++;    }    if(*(Tab+a)==x){        for(i=a; i<size; i++) {            *(Tab+i)=*(Tab+i+1);        }        size=size-1;    }    return *Tab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }    pos--;    for (i = pos; i <n_values-1 - pos; i++){        *(values + i+1 )= *(values + i+2);    }}
float* suppress_value (float x, float  *Tab, int size){    int i;    int a=0;    while(*(Tab+a)!=x && x<size){        a++;    }    if(*(Tab+a)==x){        for(i=a; i<size; i++) {            *(Tab+i)=*(Tab+i+1);        }        size=size-1;    }    return Tab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }    pos--;    for (i = pos; i <n_values-1 - pos; i++){        *(values + i+1 )= *(values + i+2);    }}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j, bol = 0;    while (cpt < n_values && *(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    if (cpt == n_values){        return p;    }    else {        j = cpt;        cpt++;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }        for (i = pos; i < -3 +n_values-1 - pos; i++){        *(values + i+1 )= *(values + i+2);    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }        for (i = pos; i < -3 +n_values-1 - pos; i++){        *(values + i+1 )= *(values + i+2);    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }        for (i = pos+1; i <n_values-1 - pos; i++){        *(values + i )= *(values + i+1);    }}
// Prototypesint find_first_value(float value_to_find, float* values, int n_values)float* suppress_value(float value_to_suppress, float *values, int n_values);// Définitionsint find_first_value(float value_to_find, float* values, int n_values){    int i = 0;        while (*(values + i) != value_to_find && i < n_values)    {        i++;    }        if (i == n_values)    {        return -1;    }    else     {        return i;    }}float* suppress_value(float value_to_suppress, float *values, int n_values){    /* -- Principe possible à appliquer :    - Trouver le premier emplacement de la valeur à supprimer grâce à la         fonction précédente.    - Boucle for à i = (emplacement de la valeur) avec (tab-1 = tab)...    */        int i = 0;    int x = find_first_value(value_to_suppress, values, n_values);    printf("%d\n", x);        for (i = x; i < n_values; i++)    {        *(values + i - 1) = *(values + i);    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }        for (i = pos+1; i <n_values-2 - pos; i++){        *(values + i )= *(values + i+1);    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }        for (i = pos+1; i <n_values-2 - pos; i++){        *(values + i )= *(values + i+1);    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }        for (i = pos; i <n_values-2 - pos; i++){        *(values + i )= *(values + i+1);    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            for (j = i; j < n_values - 1; j++){                *(values + j) = *(values (j+1));            }        }    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }    //float memf = *(values);    for (i = 0; i <n_values-1 ; i++){        *(values + i )= *(values + i+1);    }    //*(values + n_values -1) = memf;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }    //float memf = *(values);    for (i = 0; i <n_values-1 ; i++){        *(values + i )= *(values + i+1);    }    //*(values + n_values -1) = memf;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    while (cpt < n_values && *(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    if (cpt == n_values){        return p;    }    else {        j = cpt;        cpt++;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            for (j = i; j < n_values - 1; j++){                *(values + j) = *(values + (j+1));            }        }    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }    //float memf = *(values);    for (i = 0; i <n_values-2 ; i++){        *(values + i )= *(values + i+1);    }    //*(values + n_values -1) = memf;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }    //float memf = *(values);    for (i = 0; i <n_values-2 ; i++){        *(values + i )= *(values + i+1);    }    //*(values + n_values -1) = memf;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            for (j = i; j < n_values - 1; j++){                *(values + j) = *(values + (j+1));                break;            }        }    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i, pos;    for (i = 0; i < n_values; i++){        if ((value_to_supress == *(values + i)) && !pos){            pos = i;        }    }    for (i = pos; i <n_values-1 -pos; i++){        *(values + i )= *(values + i+1);    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt = 0;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            cpt = i;            for (j = cpt; j < n_values - 1; j++){                *(values + j) = *(values + (j+1));            }        }    }}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt, j;    // Fill the array while the value_to_supress isn't here    cpt = 0;    while (cpt < n_values && *(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt++;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0;    float* tab = NULL;    while(i < n_values && *(values+i) != vale_to_supress){        i++;    }    tab = (float*) malloc((n_values-1)*sizeof(float));    for(int j=0;j<n_values-1;j++){        if(*(values+j) == value_to_supress){            j++;        }        *(tab+j) = *(values+j);    }    return tab;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt, j;    // Fill the array while the value_to_supress isn't here    cpt = 0;    while (cpt < n_values-1 && *(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt++;        while (cpt < n_values-1){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt = 0;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            cpt = i;            for (j = cpt; j < n_values - 1; j++){                *(values + j) = *(values + (j+1));            }        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0;    float* tab = NULL;    while(i < n_values && *(values+i) != value_to_supress){        i++;    }    tab = (float*) malloc((n_values-1)*sizeof(float));    for(int j=0;j<n_values-1;j++){        if(*(values+j) == value_to_supress){            j++;        }        *(tab+j) = *(values+j);    }    return tab;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt, j;    // Fill the array while the value_to_supress isn't here    cpt = 0;    while (cpt < n_values-1 && *(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        //cpt++;        while (cpt < n_values-1){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt, j;    // Fill the array while the value_to_supress isn't here    cpt = 0;    while (cpt < n_values && *(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt++;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0;    float* tab = NULL;    while(i < n_values && *(values+i) != value_to_supress){        i++;    }    tab = (float*) malloc((n_values-1)*sizeof(float));    for(int j=0;j<n_values-1;j++){        if(*(values+j) == value_to_supress){            j++;        }        *(tab+j) = *(values+j);    }    free(values);    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    float* tab[n_values-1];    for (i=0;i<n_values;i++){        if (*(values+i)!=value_to_supress){            *(tab+i)=*(values+i)        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0;    float* tab = NULL;    while(i < n_values && *(values+i) != value_to_supress){        i++;    }    tab = (float*) malloc((n_values-1)*sizeof(float));    for(int j=0;j<n_values-1;j++){        if(*(values+j) == value_to_supress){            j++;        }        *(tab+j) = *(values+j);    }    return tab;}
float* suppress_value(float value_to_suppress, float *values, int n_values){    int i = 0;    float *new_tab;        // TODO: Allocation du nouveau tableau    // --> Vérifier si la valeur à supprimer se trouve dans le tableau.    // Si non, le nouveau tableau fera la même taille.    // Si oui, le nouveau tableau aura (n_values - 1) comme taille.    new_tab = (float*) malloc((n_values - 1) * sizeof(float));        while (i < n_values && *(values + i) != value_to_suppress)    {        *(new_tab + i) = *(values + i);        i++;    }        i++;    while (i < n_values)    {        *(new_tab + i - 1) = *(values + i);    }        return new_tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            for (j = i; j < n_values - 1; j++){                *(values + j) = *(values + (j+1));            }            n_values -= 1;        }    }}
float* suppress_value(float value_to_suppress, float *values, int n_values){    int i = 0;    // float *new_tab;    float new_tab[n_values];        // TODO: Allocation du nouveau tableau    // --> Vérifier si la valeur à supprimer se trouve dans le tableau.    // Si non, le nouveau tableau fera la même taille.    // Si oui, le nouveau tableau aura (n_values - 1) comme taille.    // new_tab = (float*) malloc((n_values - 1) * sizeof(float));        while (i < n_values && *(values + i) != value_to_suppress)    {        *(new_tab + i) = *(values + i);        i++;    }        i++;    while (i < n_values)    {        *(new_tab + i - 1) = *(values + i);    }        return new_tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            for (j = i; j < n_values - 1; j++){                *(values + j) = *(values + (j+1));            }        }    }}
float* suppress_value(float value_to_suppress, float *values, int n_values){    int i = 0;    float *new_tab;        // TODO: Allocation du nouveau tableau    // --> Vérifier si la valeur à supprimer se trouve dans le tableau.    // Si non, le nouveau tableau fera la même taille.    // Si oui, le nouveau tableau aura (n_values - 1) comme taille.    new_tab = (float*) malloc((n_values - 1) * sizeof(float));        while (i < n_values && *(values + i) != value_to_suppress)    {        *(new_tab + i) = *(values + i);        i++;    }        i++;    while (i < n_values)    {        *(new_tab + i - 1) = *(values + i);    }        return new_tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0;    float* tab = NULL;    while(i < n_values && *(values+i) != value_to_supress){        i++;    }    tab = (float*) malloc((n_values-1)*sizeof(float));    for(int j=0;j<n_values-1;j++){        if(j == i){            i++;        }        *(tab+j) = *(values+j);    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float* suppress_value (float value_to_supress, float values[], int n_values) {    float *p;     int len = n_values - 1, cpt, i, j;     p = (float*) malloc(sizeof(float)*(n_values-1));        cpt = 0;    while (values[cpt] != value_to_supress){                 *(p+cpt) = values[cpt];         cpt++;     }     i = cpt;     printf("%d", cpt);    for (j = cpt+1; j < n_values; j++){                 *(p+i) = values[j];         i++;     }        return p; }
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt++;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos)){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);        else            i--;    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (not pos)){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);        else            i--;    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);        else            i--;    }    return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0;    int k=0;    float* tab = NULL;    while(i < n_values && *(values+i) != value_to_supress){        i++;    }    tab = (float*) malloc((n_values-1)*sizeof(float));    for(int j=0;j<n_values-1;j++){        if(j == i){            k++;        }        *(tab+j) = *(values+k);        k++;    }    return tab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);        //else            //i--;    }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);        //else            //i--;    }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    i = 0    while (i < n_values){        if (i != pos){            *(ntab + i) = *(values + i);            i++;        }    }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    i = 0;    while (i < n_values){        if (i != pos){            *(ntab + i) = *(values + i);            i++;        }    }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    i = 0;    while (i < n_values){        if (i != pos){            *(ntab + i) = *(values + i);            i++;        }        else            i += 2;    }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    i = 0;    while (i < n_values){        if (i != pos){            *(ntab + i) = *(values + i);            i++;        }        else            i += 2;    }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);        else             i++;    }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);        else             i++;    }    return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt=0;    float *ptr;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            ptr = (float*)malloc((n_values - 1)*(sizeof(float)));            for (j = 0; j < n_values - 1; j++){                if ( j != i){                    *(ptr + j) = *(values + cpt);                    cpt ++;                }            }        }    }}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt++;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt=0;    float *ptr;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            ptr = (float*)malloc((n_values - 1)*(sizeof(float)));            for (j = 0; j < n_values - 1; j++){                if ( j != i){                    *(ptr + j) = *(values + cpt);                    cpt ++;                }            }            return ptr;        }    }    return values;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt++;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt=0;    float *ptr;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            ptr = (float*)malloc((n_values - 1)*(sizeof(float)));            for (j = 0; j < n_values - 1; j++){                if ( j != i){                    *(ptr + j) = *(values + cpt);                    cpt ++;                }            }            return *ptr;        }    }    return *values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt=0;    float *ptr;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            ptr = (float*)malloc((n_values - 1)*(sizeof(float)));            for (j = 0; j < n_values - 1; j++){                if ( j != i){                    *(ptr + j) = *(values + cpt);                    cpt ++;                }            }            return ptr;        }    }    return values;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt += 1;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);        else             i++;    }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);        //else             //i++;    }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            i += 4;        //else             //i++;    }    return ntab;}
float* suppress_value(float value_to_suppress, float *values, int n_values){    int i = 0;    float *new_tab;        // TODO: Allocation du nouveau tableau    // --> Vérifier si la valeur à supprimer se trouve dans le tableau.    // Si non, le nouveau tableau fera la même taille.    // Si oui, le nouveau tableau aura (n_values - 1) comme taille.    new_tab = (float*) malloc((n_values - 1) * sizeof(float));    // Impossible d'utiliser free() ?    if (new_tab == NULL)    {        printf("Mémoire insuffisante.\n");        exit(0);    }            while (i < n_values && *(values + i) != value_to_suppress)    {        *(new_tab + i) = *(values + i);        i++;    }        i++;    while (i < n_values)    {        *(new_tab + i - 1) = *(values + i);    }        return new_tab;}
float* suppress_value(float value_to_suppress, float *values, int n_values){    int i = 0;    float *new_tab;        // TODO: Allocation du nouveau tableau    // --> Vérifier si la valeur à supprimer se trouve dans le tableau.    // Si non, le nouveau tableau fera la même taille.    // Si oui, le nouveau tableau aura (n_values - 1) comme taille.    new_tab = (float*) malloc((n_values - 1) * sizeof(float));    // Impossible d'utiliser free() ?    if (new_tab == NULL)    {        printf("Mémoire insuffisante.\n");        exit(0);    }            while (i < n_values && *(values + i) != value_to_suppress)    {        *(new_tab + i) = *(values + i);        i++;    }        i++;    while (i < n_values)    {        *(new_tab + i - 1) = *(values + i);        i++;    }        return new_tab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            i -= 4;        //else             //i++;    }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);        //else             //i++;    }    return ntab;}
float* suppress_value(float value_to_supress, float  *values, int n_values){    int i, isuppr    for( i = 0 ; i < n_values ; i++){        isuppr = i ;    }    for ( i = isuppr ; i < nvalues ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = Null;}
float* suppress_value(float value_to_supress, float  *values, int n_values){    int i, isuppr    for( i = 0 ; i < n_values ; i++){        isuppr = i ;    }    for ( i = isuppr ; i < nvalues ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = NULL;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);        else{            //i++;            printf("In the else at position%d\n", i);        }    }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);        else{            //i++;            printf("In the else at position%d\n", i);        }    }    return ntab;}
float* suppress_value(float value_to_supress, float  *values, int n_values){    int i, isuppr    for( i = 0 ; i < n_values ; i++){        isuppr = i ;    }    for ( i = isuppr ; i < nvalues ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    p = (float*) malloc ((n_values-1) * sizeof(float));    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt += 1;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt=0;    float *ptr;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            ptr = (float*)malloc((n_values - 1)*(sizeof(float)));            for (j = 0; j < n_values ; j++){                if ( j != i){                    *(ptr + j) = *(values + cpt);                    cpt ++;                }            }            return ptr;        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt=0;    float *ptr;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            ptr = (float*)malloc((n_values - 1)*(sizeof(float)));            for (j = 0; j < n_values ; j++){                if ( j != i){                    *(ptr + j) = *(values + cpt);                    cpt ++;                }            }            return ptr;        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0;    int k=0;    float* tab = NULL;    tab = (float*) malloc((n_values-1)*sizeof(float));        while(i < n_values && *(values+i) != value_to_supress){        i++;    }    for(int j=0;j<n_values-1;j++){        if(j == i){            k++;        }        *(tab+j) = *(values+k);        k++;    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt=0;    float *ptr;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            ptr = (float*)malloc((n_values - 1)*(sizeof(float)));            for (j = 0; j < n_values -1 ; j++){                if ( j != i){                    *(ptr + j) = *(values + cpt);                    cpt ++;                }            }            return ptr;        }    }    return values;}
float* suppress_value(float value_to_supress, float  *values, int n_values){    int i, isuppr    for( i = 0 ; i < n_values ; i++){        isuppr = i ;    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float *p;    p = (folat*) malloc ((n_values-1)*sizeof(float))    for (int cpt = 0; cpt < n_values; cpt++){        if (*(values+cpt) == value to_supress) {            cpt+=1;        }        *(values+cpt) = *(p+cpt)    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float *p;    p = (folat*) malloc ((n_values-1)*sizeof(float))    for (int cpt = 0; cpt < n_values; cpt++){        if (*(values+cpt) == value to_supress) {            cpt+=1;        }        *(values+cpt) = *(p+cpt);    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float *p;    p = (folat*) malloc ((n_values-1)*sizeof(float));    for (int cpt = 0; cpt < n_values; cpt++){        if (*(values+cpt) == value to_supress) {            cpt+=1;        }        *(values+cpt) = *(p+cpt);    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float *p;    p = (float*) malloc ((n_values-1)*sizeof(float));    for (int cpt = 0; cpt < n_values; cpt++){        if (*(values+cpt) == value to_supress) {            cpt+=1;        }        *(values+cpt) = *(p+cpt);    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float *p;    p = (float*) malloc ((n_values-1)*sizeof(float));    for (int cpt = 0; cpt < n_values; cpt++){        if (*(values+cpt) == value_to_supress) {            cpt+=1;        }        *(values+cpt) = *(p+cpt);    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value(float value_to_supress, float  *values, int n_values){    int i, isuppr    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress){            isuppr = i ;        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values-1; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values-1; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values-1; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(n_values , sizeof(float *));    n_values--;    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value(float value_to_supress, float  *values, int n_values){    int i, isuppr;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress){            isuppr = i ;        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(n_values , sizeof(float *));    n_values--;    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    p = (float*) malloc ((n_values-1) * sizeof(float));    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt += 1;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < --n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress){            isuppr = i ;        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0;}
float* suppress_value(float value_to_suppress, float *values, int n_values){    int i = 0, nb, j;    float *ar;            nb= n_values-1;    ar = (float*)malloc(nb*(sizeof(float)));        while(*(value+i) != value_to_suppress){        *(ar+i) = *(value+i);        i++;    }    j = i+1;        for (j; j<n_values; j++){        *(ar+i) = *(value+j);    }    return ar;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float *p;    p = (float*) malloc ((n_values-1)*sizeof(float));    for (int cpt = 0; cpt < n_values; cpt++){        if (*(values+cpt) == value_to_supress) {            cpt+=1;        }        *(values+cpt) = *(p+cpt);    }}
float* suppress_value(float value_to_suppress, float *values, int n_values){    int i = 0, nb, j;    float *ar;            nb= n_values-1;    ar = (float*)malloc(nb*(sizeof(float)));        while(*(value+i) != value_to_suppress){        *(ar+i) = *(value+i);        i++;    }    j = i+1;        for (j; j<n_values; j++){        *(ar+i) = *(values+j);    }    return ar;}
float* suppress_value(float value_to_suppress, float *values, int n_values){    int i = 0, nb, j;    float *ar;            nb= n_values-1;    ar = (float*)malloc(nb*(sizeof(float)));        while(*(values+i) != value_to_suppress){        *(ar+i) = *(value+i);        i++;    }    j = i+1;        for (j; j<n_values; j++){        *(ar+i) = *(values+j);    }    return ar;}
float* suppress_value(float value_to_suppress, float *values, int n_values){    int i = 0, nb, j;    float *ar;            nb= n_values-1;    ar = (float*)malloc(nb*(sizeof(float)));        while(*(values+i) != value_to_suppress){        *(ar+i) = *(values+i);        i++;    }    j = i+1;        for (j; j<n_values; j++){        *(ar+i) = *(values+j);    }    return ar;}
float* suppress_value(float value_to_suppress, float *values, int n_values){    int i = 0;    float *new_tab;        // TODO: Vérifier si la valeur à supprimer est dans le tableau.    //       --> Si non, il faudra que le nouveau tableau ait la même taille.    new_tab = (float*) malloc((n_values - 1) * sizeof(float));        if (new_tab == NULL)    {        printf("Mémoire insuffisante.\n");        exit(0);    }            while (i < n_values && *(values + i) != value_to_suppress)    {        *(new_tab + i) = *(values + i);        i++;    }        i++;    while (i < n_values)    {        *(new_tab + i - 1) = *(values + i);        i++;    }        return new_tab;}
float* suppress_value(float value_to_suppress, float *values, int n_values){    int i = 0, nb, j;    float *ar;            nb= n_values-1;    ar = (float*)malloc(nb*(sizeof(float)));        do{        *(ar+i) = *(values+i);        i++;    }    while(*(values+i) != value_to_suppress)    j = i+1;        for (j; j<n_values; j++){        *(ar+i) = *(values+j);    }    return ar;}
float* suppress_value(float value_to_suppress, float *values, int n_values){    int i = 0, nb, j;    float *ar;            nb= n_values-1;    ar = (float*)malloc(nb*(sizeof(float)));        do{        *(ar+i) = *(values+i);        i++;    }    while(*(values+i) != value_to_suppress);    j = i+1;        for (j; j<n_values; j++){        *(ar+i) = *(values+j);    }    return ar;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < --n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt=0;    float *ptr;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            printf("%d", i);            ptr = (float*)malloc((n_values - 1)*(sizeof(float)));            for (j = 0; j < n_values -1 ; j++){                if ( j != i){                    *(ptr + j) = *(values + cpt);                    cpt ++;                }            }            return ptr;        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    float *tab;    tab=(float*) malloc((nvalues-1)*sizeof(float));    while (i<n_values && *(values+i)!= value_to_supress){        *(new_tab+i)=*(values+i);        i++;    }    i++    while (i < n_values)    {        *(new_tab + i - 1) = *(values + i);        i++;    }        return new_tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    float *tab;    tab=(float*) malloc((n_values-1)*sizeof(float));    while (i<n_values && *(values+i)!= value_to_supress){        *(new_tab+i)=*(values+i);        i++;    }    i++    while (i < n_values)    {        *(new_tab + i - 1) = *(values + i);        i++;    }        return new_tab;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt++;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    float *tab;    tab=(float*) malloc((n_values-1)*sizeof(float));    while (i<n_values && *(values+i)!= value_to_supress){        *(new_tab+i)=*(values+i);        i++;    }    i++    while (i < n_values)    {        *(tab + i - 1) = *(values + i);        i++;    }        return tab;}
float* suppress_value (float value_to_supress, float* values, int n_values){        float * end;    int i, j, cpt = 0;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        j = i + cpt;        if (value_to_supress == *(values+i)){            cpt += 1;            *(end+i) = *(values+j+1);        }        else            *(end+i) = *(values+j);    }        return end; }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    float *tab;    tab=(float*) malloc((n_values-1)*sizeof(float));    while (i<n_values && *(values+i)!= value_to_supress){        *(new_tab+i)=*(values+i);        i++;    }    i++;    while (i < n_values)    {        *(tab + i - 1) = *(values + i);        i++;    }        return tab;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    float *tab;    tab=(float*) malloc((n_values-1)*sizeof(float));    while (i<n_values && *(values+i)!= value_to_supress){        *(tab+i)=*(values+i);        i++;    }    i++;    while (i < n_values)    {        *(tab + i - 1) = *(values + i);        i++;    }        return tab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos=0;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < --n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos=0;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < --n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt=0;    float *ptr;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            printf("%d\n", i);            ptr = (float*)malloc((n_values - 1)*(sizeof(float)));            for (j = 0; j < n_values -1 ; j++){                if ( j != i){                    *(ptr + j) = *(values + cpt);                    cpt ++;                    printf("%f %f %d %d", ptr, values, cpt, i);                }            }            return ptr;        }    }    return values;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            printf("isuppr");        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt=0;    float *ptr;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            printf("%d\n", i);            ptr = (float*)malloc((n_values - 1)*(sizeof(float)));            for (j = 0; j < n_values -1 ; j++){                if ( j != i){                    *(ptr + j) = *(values + cpt);                    cpt ++;                    printf("%f %f %d %d\n", ptr, values, cpt, i);                }            }            return ptr;        }    }    return values;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt=0;    float *ptr;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            printf("%d\n", i);            ptr = (float*)malloc((n_values - 1)*(sizeof(float)));            for (j = 0; j < n_values ; j++){                if ( j != i){                    *(ptr + j) = *(values + cpt);                    cpt ++;                    printf("%f %f %d %d\n", ptr, values, cpt, i);                }            }            return ptr;        }    }    return values;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt=0;    float *ptr;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            printf("%d\n", i);            ptr = (float*)malloc((n_values - 1)*(sizeof(float)));            for (j = 0; j < n_values ; j++){                if ( j != i){                    *(ptr + j) = *(values + cpt);                    cpt ++;                    printf("%f %f %d %d\n", *ptr, *values, cpt, i);                }            }            return ptr;        }    }    return values;}
float* suppress_value(float value_to_suppress, float *values, int n_values){    int i = 0, nb;    float *ar;            nb= n_values-1;    ar = (float*)malloc(nb*(sizeof(float)));          while(*(values+i) != value_to_suppress){        *(ar+i) = *(values+i);        i++;    }    for (j; j<n_values; j++){        *(ar+i) = *(values+i+1);    }    return ar;}
float* suppress_value(float value_to_suppress, float *values, int n_values){    int i = 0, nb;    float *ar;            nb= n_values-1;    ar = (float*)malloc(nb*(sizeof(float)));          while(*(values+i) != value_to_suppress){        *(ar+i) = *(values+i);        i++;    }    for (i; i<n_values; i++){        *(ar+i) = *(values+i+1);    }    return ar;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float *p;    int bol=0;    p = (float*) malloc ((n_values-1)*sizeof(float));    for (int cpt = 0; cpt < n_values; cpt++){        if (*(values+cpt) == value_to_supress) {            cpt+=1;            bol = 1;        }        if (bol = 1){            *(values+cpt) = *(p+cpt-1);        }        else if (bol = 0){            *(values+cpt) = *(p+cpt);        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float *p;    int bol=0;    p = (float*) malloc ((n_values-1)*sizeof(float));    for (int cpt = 0; cpt < n_values; cpt++){        if (*(values+cpt) == value_to_supress) {            cpt+=1;            bol = 1;        }        if (bol = 1){            *(values+cpt) = *(p+cpt-1);        }        else if (bol = 0){            *(values+cpt) = *(p+cpt);        }    }}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            prinf("%d   ", i)            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            prinf("%d   ", i);            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            prinf("%d   ", i);            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            prinf("%d   ", i);            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            printf("%d   ", i);            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            printf("%d", i);            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt=0;    float *ptr;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            ptr = (float*)malloc((n_values - 1)*(sizeof(float)));            for (j = 0; j < n_values ; j++){                if ( j != i){                    *(ptr + cpt) = *(values + cpt);                    cpt ++;                }            }            return ptr;        }    }    return values;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,j, cpt=0;    float *ptr;    for (i = 0; i < n_values; i++){        if (*(values + i) == value_to_supress){            ptr = (float*)malloc((n_values - 1)*(sizeof(float)));            for (j = 0; j < n_values ; j++){                if ( j != i){                    *(ptr + cpt) = *(values + j);                    cpt ++;                }            }            return ptr;        }    }    return values;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    if (cpt == n_values){        return p;    }    else {        j = cpt;        cpt++;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    if (cpt == n_values){        return p;    }    else {        j = cpt;        cpt++;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    if (cpt == n_values){        return p;    }    else {        j = cpt;        cpt++;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    if (cpt == n_values){        return p;    }    else {        j = cpt;        cpt++;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    if (cpt == n_values){        return p;    }    else {        j = cpt;        cpt++;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos-1)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos-1)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt++;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    p = (float*) malloc ((n_values-1) * sizeof(float));    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt += 1;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    p = (float*) malloc ((n_values-1) * sizeof(float));    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt += 1;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    p = (float*) malloc ((n_values-1) * sizeof(float));    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt += 1;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values-1; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float *t2 = malloc (n_values-1*sizeof(float));    int i, j=0;    for(i=0;i<n_values;i++){        if (value_to_supress =/= *(values+i){            t2+j = *(values+i);            j += 1;        }    }    return t2;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    p = (float*) malloc ((n_values-1) * sizeof(float));    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt += 1;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0;    while (!pos &&){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values-1; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0;    while (!pos && i < n_values){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values-1; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float *t2 = malloc (n_values-1*sizeof(float));    int i, j=0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i){            t2+j = *(values+i);            j += 1;        }    }    return t2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float *t2 = malloc (n_values-1*sizeof(float));    int i, j=0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i)){            t2+j = *(values+i);            j += 1;        }    }    return t2;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0, found = 0;    while (!found && i < n_values){        if (value_to_supress == *(values + i)){            pos = i;            found++;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values-1; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float *t2 = malloc (n_values-1*sizeof(float));    int i, j=0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i)){            *(t2+j) = *(values+i);            j += 1;        }    }    return t2;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    p = (float*) malloc ((n_values-1) * sizeof(float));    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt += 1;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }    }    return p;} 
float* suppress_value(float value_to_supress, float values[], int n_values){    float * res;        int size_element = sizeof(float);    int n_element = n_values - 1;    res = malloc(n_element * size_element);    for(cpt= 0; cpt < n_values;cpt++)    {        if(value_to_find = values)        values[cpt] = values[cpt+1];    }    return res;}
float* suppress_value (float value_to_supress, float* values, int n_values){        float * end;    int i, j, cpt = 0;    end = (float *) malloc(sizeof(float) * n_values-1);    for(i = 0; i < n_values-1; i++){        j = i + cpt;        if (value_to_supress == *(values+i)){            cpt += 1;            *(end+i) = *(values+j+1);        }        else            *(end+i) = *(values+j);    }        return end; }
float* suppress_value (float value_to_supress, float  *values, int n_values){    void *t2 = malloc (n_values-1*sizeof(float));    int i, j=0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i)){            *(t2+j) = *(values+i);            j += 1;        }    }    return t2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float *t2 = malloc (n_values-1*sizeof(float));    int i, j=0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i)){            *(t2+j) = *(values+i);            j += 1;        }    }    return t2;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0, found = 0;    while (!found && i < n_values){        if (value_to_supress == *(values + i)){            pos = i;            found=1;        }        i++;    }        if (i== n_values)        return values;            float *ntab = (float*) malloc(--n_values , sizeof(float *));    for (i = 0; i < n_values-1; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0, found = 0;    while (!found && i < n_values){        if (value_to_supress == *(values + i)){            pos = i;            found=1;        }        i++;    }        if (i== n_values)        return values;            float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values-1; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            printf("%d", i);            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i)){            *(t2+j) = *(values+i);            j += 1;        }    }    return t2;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (i<n_values && value_to_supress != *(values + i)){        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < --n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i)){            *(t2+j) = *(values+i);            j += 1;        }    }    return *t2;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            printf("%d", i);            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values-1 ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            printf("%d", i);            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values-1 ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            printf("%d", i);            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values-1 ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            printf("%d", i);            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values-1 ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            printf("%d", i);            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values-1 ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;            printf("%d", i);            printf("%d", isuppr);        }    }    for ( i = isuppr ; i < n_values-1 ; i++){        *(values + i) = *(values + i + 1);    }    *(values + i + 1) = 0 ;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    char flag = 0;    for (int i = 0; i < n_values; ++i) {        if (*(values+i) == value_to_supress and !flag) {            flag = 1;        }        if (flag) {            *(values+i) = *(values+i+1);        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    char flag = 0;    for (int i = 0; i < n_values; ++i) {        if (*(values+i) == value_to_supress && !flag) {            flag = 1;        }        if (flag) {            *(values+i) = *(values+i+1);        }    }}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    for ( i = isuppr ; i < n_values ; i++){    }    *(values + i + 1) = 0 ;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    char flag = 0;    for (int i = 0; i < n_values-1; ++i) {        if (*(values+i) == value_to_supress && !flag) {            flag = 1;        }        if (flag) {            *(values+i) = *(values+i+1);        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    char flag = 0;    for (int i = 0; i < n_values-2; ++i) {        if (*(values+i) == value_to_supress && !flag) {            flag = 1;        }        if (flag) {            *(values+i) = *(values+i+1);        }    }}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + i + 1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + i + 1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + i + 1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + i + 1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + i + 1) = 0 ;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    char flag = 0;    for (int i = 0; i < n_values-3; ++i) {        if (*(values+i) == value_to_supress && !flag) {            flag = 1;        }        if (flag) {            *(values+i) = *(values+i+1);        }    }}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos=0;    while (i<n_values && !pos){        if (value_to_supress == *(values + i)){            pos = 1;        }        i++;    }    pos=i;    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < --n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos=0;    while (i<n_values && !pos){        if (value_to_supress == *(values + i)){            pos = 1;        }        i++;    }    pos=i;    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < --n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    p = (float*) malloc ((n_values-1) * sizeof(float));    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values - 1){        return p;    }    // If not, we continue on the next index...    else {        cpt += 1;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        } 1 2 3 4    }     1 3 4    return p;} 
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    p = (float*) malloc ((n_values-1) * sizeof(float));    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values - 1){        return p;    }    // If not, we continue on the next index...    else {        cpt += 1;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        } // 1 2 3 4    }    //  1 3 4    return p;} 
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            shift_values_to_left(values, n_values);            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }        }    }    return arr;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    p = (float*) malloc ((n_values-1) * sizeof(float));    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values - 1){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt += 1;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        } // 1 2 3 4    }    //  1 3 4    return p;} 
float* suppress_value (float value_to_supress, float  *values, int n_values) {    char flag = 0;    for (int i = 0; i < n_values; ++i) {        if (*(values+i) == value_to_supress && !flag) {            flag = 1;        }        if (flag) {            *(values+i-1) = *(values+i);        }    }}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + n_values) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + n_values) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + n_values) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + n_values) = 0 ;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    char flag = 0;    for (int i = 0; i < n_values -1 ; ++i) {        if (*(values+i) == value_to_supress && !flag) {            flag = 1;        }        if (flag) {            *(values+i-1) = *(values+i);        }    }}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + n_values) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + n_values) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + n_values) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + n_values) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + n_values) = 0 ;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr=NULL    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            shift_values_to_left(values, n_values);            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }        }    }    return arr;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr=NULL    for (int i=0; int i<=n_values; i++){        if (value_to_supress==*(values+i)){            shift_values_to_left(values, n_values);            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }        }    }    return arr;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos=0;    while (i<n_values && !pos){        if (value_to_supress == *(values + i)){            pos = 1;        }        i++;    }    if(i<nb_values)    {        pos=i;        float *ntab = (float*) calloc(--n_values , sizeof(float *));        for (i = 0; i < --n_values; i++){           if (i != pos)               *(ntab + i) = *(values + i);        return ntab;    }    else        return values;    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;                                }        i++;    }    }
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos=0;    while (i<n_values && !pos){        if (value_to_supress == *(values + i)){            pos = 1;        }        i++;    }    if(i<nb_values)    {        pos=i;        float *ntab = (float*) calloc(--n_values , sizeof(float *));        for (i = 0; i < --n_values; i++)           if (i != pos)               *(ntab + i) = *(values + i);        return ntab;    }    else        return values;    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            shift_values_to_left(values, n_values);            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }        }    }    return arr;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    char flag = 0;    for (int i = 0; i < n_values; ++i) {        if (*(values+i) == value_to_supress && !flag) {            flag = 1;        }        if (flag) {            *(values+i) = *(values+i+1);        }    }    return values;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos=0;    while (i<n_values && !pos){        if (value_to_supress == *(values + i)){            pos = 1;        }        i++;    }    if(i < nb_values)    {        pos=i;        float *ntab = (float*) calloc(--n_values , sizeof(float *));        for (i = 0; i < --n_values; i++)           if (i != pos)               *(ntab + i) = *(values + i);        return ntab;    }    else        return values;    }
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values-1 ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + n_values-1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values-1 ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + n_values-1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values-1 ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + n_values-1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values-1 ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + n_values-1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values-1 ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i) = *(values + i + 1);        }    }    *(values + n_values-1) = 0 ;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = 0; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-1 * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }        }    }    return arr;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < --n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < --n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return *ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = 0; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }        }    }    return arr;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && not isuppr){            isuppr = i ;        }        else{            *(values + i -1) = *(values + i);        }    }    *(values + n_values-1) = 0 ;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0, found = 0;    while (!found && i < n_values){        if (value_to_supress == *(values + i)){            pos = i;            found++;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values-1; i++){        if (i != pos)            *(ntab + i) = *(values + i);        else            i--;    }    return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0, found = 0;    while (!found && i < n_values){        if (value_to_supress == *(values + i)){            pos = i;            found++;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < n_values-1; i++){        if (i != pos)            *(ntab + i) = *(values + i);        else            i--;    }    return ntab;}
float* suppress_value (float value_to_supress, float  *tab, int size) {    int i, j;    for(i=0; i<size; i++){        if(*(tab+i)==value_to_supress){            for(j=i; j<size; j++){                tab[j] = tab[j+1];            }        }    }    return tab;}void test_suppress_value(){    int i, size, temp;    float *tab=NULL, value;    printf("Donner la taille du tableau");    scanf("%d", &size);    tab = (float*) malloc(size*sizeof(float));    for(i=0; i< size ; i++){        printf("Donner la %dième valeur", i+1);        scanf("%f", tab+i);    }    printf("Donner la valeur à supprimer");    scanf("%f", &value);    suppress_value(value, tab, size);}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr[]=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = 0; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }        }    }    return arr;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = i ;        }        else{            *(values + i -1) = *(values + i);        }    }    *(values + n_values-1) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = i ;        }        else{            *(values + i -1) = *(values + i);        }    }    *(values + n_values-1) = 0 ;}
float* suppress_value (float value_to_supress, float  *tab, int size) {    int i, j;    for(i=0; i<size; i++){        if(*(tab+i)==value_to_supress){            for(j=i; j<size; j++){                *(tab+j) = *(tab+j+1);            }        }    }    return tab;}void test_suppress_value(){    int i, size;    float *tab=NULL, value;    printf("Donner la taille du tableau");    scanf("%d", &size);    tab = (float*) malloc(size*sizeof(float));    for(i=0; i< size ; i++){        printf("Donner la %dième valeur", i+1);        scanf("%f", tab+i);    }    printf("Donner la valeur à supprimer");    scanf("%f", &value);    suppress_value(value, tab, size);}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    p = (float*) malloc ((n_values-1) * sizeof(float));    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values - 1){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt += 1;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }     }     return p;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    p = (float*) malloc ((n_values-1) * sizeof(float));    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values - 1){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt += 1;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }     }     return p;}
float *suppress_value (float value_to_supress, float  *values, int n_values){    float *p;    int cpt = 0, j;    p = (float*) malloc ((n_values-1) * sizeof(float));    // Fill the array while the value_to_supress isn't here    while (*(values + cpt) != value_to_supress){        *(p + cpt) = *(values + cpt);        cpt++;    }    // If the array does not have the value_to_supress    if (cpt == n_values - 1){        return p;    }    // If not, we continue on the next index...    else {        j = cpt;        cpt += 1;        while (cpt < n_values){            *(p + j) = *(values + cpt);            cpt++; j++;        }     }     return p;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0, found = 0;    while (!found && i < n_values){        if (value_to_supress == *(values + i)){            pos = i;            found++;        }        i++;    }    if(i==n_values)`        return values;    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < pos; i++)        *(ntab + i) = *(values + i);    for (i++; i < n_values; i++)        *(ntab + i) = *(values + i);        return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0, found = 0;    while (!found && i < n_values){        if (value_to_supress == *(values + i)){            pos = i;            found++;        }        i++;    }    if(i==n_values)        return values;    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < pos; i++)        *(ntab + i) = *(values + i);    for (i++; i < n_values; i++)        *(ntab + i) = *(values + i);        return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0, found = 0;    while (!found && i < n_values){        if (value_to_supress == *(values + i)){            pos = i;            found++;        }        i++;    }    if(i==n_values)        return values;    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < pos; i++)        *(ntab + i) = *(values + i);    for (; i < n_values; i++)        *(ntab + i) = *(values + i);        return ntab;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0, found = 0;    while (!found && i < n_values){        if (value_to_supress == *(values + i)){            pos = i;            found++;        }        i++;    }    if(i==n_values)        return values;    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < pos; i++)        *(ntab + i) = *(values + i);    for (; i < n_values; i++)        *(ntab + i) = *(values + i);        return ntab;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = 1 ;        }        else{            *(values + i -1) = *(values + i);        }    }    *(values + n_values -1 ) = 0 ;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos = 0, found = 0;    while (!found && i < n_values){        if (value_to_supress == *(values + i)){            pos = i;            found++;        }        i++;    }    if(i==n_values)        return values;    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < pos; i++)        *(ntab + i) = *(values + i);    for (; i < n_values; i++)        *(ntab + i) = *(values + i+1);        return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0, supp = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return *t2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0, supp = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return *t2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0, supp = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return *t2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0, supp = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return *t2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0, supp = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return *t2;}
float* suppress_value (float value_to_supress, float  *tab, int size) {    int i, j;    for(i=0; i<size; i++){        if(*(tab+i)==value_to_supress){            for(j=i; j<size; j++){                *(tab+j) = *(tab+j+1);            }        }    }    return tab;}void test_suppress_value(){    int i, size;    float *tab=NULL, value;    printf("Donner la taille du tableau");    scanf("%d", &size);    tab = (float*) malloc(size*sizeof(float));    for(i=0; i< size ; i++){        printf("Donner la %dième valeur", i+1);        scanf("%f", tab+i);    }    printf("Donner la valeur à supprimer");    scanf("%f", &value);    tab = suppress_value(value, tab, size);    for(i=0; i< size ; i++){        printf("%f", *(tab+i));    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr[]=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = 0; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)calloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }        }    }    return arr;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr[]=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = 0; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }        }    }    return arr;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0, supp = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return t2}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0, supp = 0;    for(i=0;i<n_values;i++){        if es+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return t2}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0, supp = 0;    for(i=0;i<n_values;i++){        if es+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return t2}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];   
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];   
float *suppress_value(float value_to_supress, float *values, int n_values){int i = 0, pos = 0, found = 0;while (!found && i < n_values){if (value_to_supress == *(values + i)){pos = i;found++;}i++;}if(i==n_values)return values;float *ntab = (float*) calloc(--n_values , sizeof(float *));for (i = 0; i < pos; i++)*(ntab + i) = *(values + i);for (; i < n_values; i++)*(ntab + i) = *(values + i+1);return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2;    int i, j=0, supp = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return *t2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr[]=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = values+i; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }        }    }    return arr;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = values+i; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }        }    }    return arr;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0, supp = 0;    for(i=0;i<n_values-1;i++)        t2[i] = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return *t2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = i; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }        }    }    return arr;}
float *suppress_value(float value_to_supress, float *values, int n_values){int i = 0, pos = 0, found = 0;while (!found && i < n_values){if (value_to_supress == *(values + i)){pos = i;found++;}i++;}if(i==n_values)return values;float *ntab = (float*) calloc(--n_values , sizeof(float *));for (i = 0; i < pos; i++)*(ntab + i) = *(values + i);for (; i < n_values; i++)*(ntab + i) = *(values + i+1);return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = i; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }            return arr;        }    }    return 0;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = 1 ;        }        else{            *(values + i -1) = *(values + i);        }    }    //*(values + n_values -1 ) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = 1 ;        }        else{            *(values + i -1) = *(values + i);        }    }    //*(values + n_values -1 ) = 0 ;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values];    int i, j=0, supp = 0;    for(i=0;i<n_values-1;i++)        t2[i] = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return *t2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values];    int i, j=0, supp = 0;    for(i=0;i<n_values-1;i++)        t2[i] = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return *t2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values];    int i, j=0, supp = 0;    for(i=0;i<n_values-1;i++)        t2[i] = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return *t2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0, supp = 0;    for(i=0;i<n_values-1;i++)        t2[i] = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return *2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0, supp = 0;    for(i=0;i<n_values-1;i++)        t2[i] = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return *2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0, supp = 0;    for(i=0;i<n_values-1;i++)        t2[i] = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return ;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0, supp = 0;    for(i=0;i<n_values-1;i++)        t2[i] = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return *t12;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0, supp = 0;    for(i=0;i<n_values-1;i++)        t2[i] = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return *t2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float t2[n_values-1];    int i, j=0, supp = 0;    for(i=0;i<n_values;i++){        if (value_to_supress != *(values+i) || supp == 1){            *(t2+j) = *(values+i);            j += 1;        }        if (j != i+1)            supp = 1;    }    return *t2;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = 1 ;        }        else if(isuppr){            *(values + i -1) = *(values + i);        }    }    *(values + n_values -1 ) = 0 ;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = i; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }            return arr;        }    }    return arr;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = i; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }            return arr;        }    }    return arr;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = i; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }            return arr;        }    }    return arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float)malloc((n_values-1)sizeof(float*));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float * supress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(values_to_supress == *(values+cpt)        {            trouv =1;        }        else        {            cpt++;        }    }    for (int i=cpt;i<n_values;i++)    {        *(values+i) = *(values+i+1);    }        n_values--;    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,occ=0,k;        for(i=0;i<n_values;i++){        if (value_to_supress == *(values+i))            occ=i;    }    for(k=occ;k<n_values;k++)        *(values+k) = *(values+k+1);    n_values-=1;} 
float * supress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(values_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    for (int i=cpt;i<n_values;i++)    {        *(values+i) = *(values+i+1);    }        n_values--;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)(sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    }
float * supress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    for (int i=cpt;i<n_values;i++)    {        *(values+i) = *(values+i+1);    }        n_values--;    }
float suppress_value (float value_to_supress, float  *values, int n_values){    int i,occ=0,k;        for(i=0;i<n_values;i++){        if (value_to_supress == *(values+i))            occ=i;    }    for(k=occ;k<n_values;k++)        *(values+k) = *(values+k+1);    n_values-=1;} 
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,occ=0,k;        for(i=0;i<n_values;i++){        if (value_to_supress == *(values+i))            occ=i;    }    for(k=occ;k<n_values;k++)        *(values+k) = *(values+k+1);    n_values-=1;} 
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)(n_values*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)(n_values*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc(n_values*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = 1 ;        }        else if(isuppr){            *(values + i -1) = *(values + i);        }    }    *(values + n_values -1 ) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = 1 ;        }        else if(isuppr){            *(values + i -1) = *(values + i);        }    }    *(values + n_values -1 ) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = 1 ;        }        else if(isuppr){            *(values + i -1) = *(values + i);        }    }    *(values + n_values -1 ) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = 1 ;        }        else if(isuppr){            *(values + i -1) = *(values + i);        }    }    *(values + n_values -1 ) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = 1 ;        }        else if(isuppr){            *(values + i -1) = *(values + i);        }    }    *(values + n_values -1 ) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = 1 ;        }        else if(isuppr){            *(values + i -1) = *(values + i);        }    }    *(values + n_values -1 ) = 0 ;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = 1 ;        }        else if(isuppr){            *(values + i -1) = *(values + i);        }    }    *(values + n_values -1 ) = 0 ;}
float* suppress_value (float value_to_supress, float values[], int n_values){​​​​​​​    float * tab;    tab = (float)malloc((n_values-1)sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* Arr = (float*) malloc((n_values - 1) * sizeof(float));    int i, ind = 0;    for (i = 0; i < n_values; i++) {        if (*(values + i) != value_to_supress) {            *(Arr + ind++) = *(values + i);        }    }        return ind;}
float* suppress_value (float value_to_supress, float values[], int n_values){​​​​​​​    float * tab;    tab = (float)malloc(n_values*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){​​​​​​​    float * tab;    tab = (float)malloc(n_values*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* Arr = (float*) malloc((n_values - 1) * sizeof(float));    int i, ind = 0;    for (i = 0; i < n_values; i++) {        if (*(values + i) != value_to_supress) {            *(Arr + ind++) = *(values + i);        }    }        return Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){​​​​​​​    float * tab;    tab = (float*)malloc(n_values*sizeof(float);    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){​​​​​​​    float * tab;    tab = (float*)malloc(n_values*sizeof(float);    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){​​​​​​​    float * tab;    tab = (float*)malloc(n_values*sizeof(float);    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc(n_values*sizeof(float);    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float)malloc(n_values*sizeof(float);    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float)malloc(n_values*sizeof(float);    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float * supress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    for (int i=cpt;i<n_values;i++)    {        *(values+i) = *(values+i+1);    }    --n_values;    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* Arr = (float*) malloc((n_values - 1) * sizeof(float));    int i, ind = 0;    for (i = 0; i < n_values; i++) {        if (*(values + i) != value_to_supress) {            *(Arr + ind++) = *(values + i);        }    }        return Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc(n_values*sizeof(float);    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float * suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    for (int i=cpt;i<n_values;i++)    {        *(values+i) = *(values+i+1);    }    --n_values;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float)malloc(n_values*sizeof(float);    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float * suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    for (int i=cpt;i<n_values;i++)    {        *(values+i) = *(values+i+1);    }    n_values--;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float)malloc(n_values*sizeof(float)    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float)malloc(n_values*sizeof(float);    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* Arr = (float*) malloc((n_values - 1) * sizeof(float));    int i, ind = 0;    for (i = 0; i < n_values; i++) {        if (*(values + i) != value_to_supress) {            *(Arr + ind++) = *(values + i);        }    }        return Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float)malloc(n_values*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* Arr = (float*) malloc((n_values - 1) * sizeof(float));    int i, ind = 0;    for (i = 0; i < n_values; i++) {        if (*(values + i) != value_to_supress) {            *(Arr + ind++) = *(values + i);        }    }        return Arr;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc(n_values*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }     return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc(n_values*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i;    volue_to_supress=*values;    for(i=1;i<n_values;i++){        if(*(values+i)==value_to_supress){            *(values+i)=*(values+i-1);        }            }    return *(values+i);}
float* suppress_value (float value_to_supress, float  *values, int n_values){  float* tab;  for(int i=0 ; i<(n_values-1) && test ; i++){      if (*(values+i) != value_to_supress)        *(tab+i) = *(values+i);    }    return tab;}
float * suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    for (int i=cpt;i<n_values;i++)    {        *(values+i) = *(values+i+1);    }    n_values--;    }
float* suppress_value (float value_to_supress, float  *values, int n_values){  float* tab;  for(int i=0 ; i<(n_values-1) ; i++){      if (*(values+i) != value_to_supress)        *(tab+i) = *(values+i);    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){ {    int i;    while (i< n_values){        if (*(values+i)==value_to_supress){            while i<(n_values-1){                *(values+i)= *(values+i+1)            }        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,occ=0,k;        for(i=0;i<n_values;i++){        if (value_to_supress == *(values+i))            occ=i;    }    for(k=occ;k<n_values-1;k++)        *(values+k) = *(values+k+1);    n_values-=1;} 
float* suppress_value (float value_to_supress, float  *values, int n_values){ {    int i;    while (i< n_values){        if (*(values+i)==value_to_supress){            while i<(n_values-1)                *(values+i)= *(values+i+1)        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=1,j;    while (i < n_values){        if (*(values+i) = value_to_supress){            j = i;            while (j < n_values) {                *(values +  j- 1) = *(values + j);                j+=1;            }            break;        }    }                i+=1;}
float* suppress_value (float value_to_supress, float  *values, int n_values){ {    int i;    while (i< n_values){        if (*(values+i)==value_to_supress){            while i<(n_values-1)                *(values+i)= *(values+i+1);        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,occ=0,k;        for(i=0;i<n_values;i++){        if (value_to_supress == *(values+i))            occ=i;    }    for(k=occ;k<n_values-2;k++)        *(values+k) = *(values+k+1);    n_values-=1;} 
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_suppress)            i++;        for(i ; i < N-1 ; i++)            *(values + i) = *(values + i + 1);    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < N-1 ; i++)            *(values + i) = *(values + i + 1);    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i;    volue_to_supress=*values;    for(i=1;i<n_values;i++){        if(*(values+i)==value_to_supress){            *(values+i)=*(values+i-1);        }            }    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i;    volue_to_supress=*values;    for(i=1;i<n_values;i++){        if(*(values+i)==value_to_supress){            *(values+i)=*(values+i-1);        }            }    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i;    value_to_supress=*values;    for(i=1;i<n_values;i++){        if(*(values+i)==value_to_supress){            *(values+i)=*(values+i-1);        }            }    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i;    for(i=1;i<n_values;i++){        if(*(values+i)==value_to_supress){            *(values+i)=*(values+i-1);        }            }    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i;    for(i=1;i<n_values;i++){        if(*(values+i)==value_to_supress){            *(values+i)=*(values+i-1);        }            }    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i;    for(i=1;i<n_values;i++){        if(*(values+i)==value_to_supress){            *(values+i)=*(values+i-1);        }            }    }
float * suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    for (int i=cpt;i<n_values;i++)    {        *(values+i-cpt) = *(values+i+1-cpt);    }    n_values--;    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);    }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;                                }        i++;    }    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = i; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }            return arr;        }    }    return 0;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;                                }        i++;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++){            *(values + i) = *(values + i + 1);        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,occ=0,k;        for(i=0;i<n_values-1;i++){        if (value_to_supress == *(values+i))            occ=i;    }    for(k=occ;k<n_values-1;k++)        *(values+k) = *(values+k+1);    n_values-=1;} 
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=1,j;    while (i < n_values){        if (*(values+i) = value_to_supress){            j = i-1;            while (j < n_values) {                *(values +  j- 1) = *(values + j);                j+=1;            }            break;        }    }                i+=1;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,occ=0,k;        for(i=0;i<n_values-1;i++){        if (value_to_supress == *(values+i))            occ=i;    }    for(k=occ;k<n_values-1;k++)        *(values+k) = *(values+k+1);    n_values-=1;} 
float* suppress_value (float value_to_supress, float  *values, int n_values){ {    int i;    while (i< n_values){        if (*(values+i)==value_to_supress){            while i<(n_values-1){                *(values+i)= *(values+i+1);                i++;            }            *(values+i)=0;            break;        }        i++;    }}    
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++){            *(values + i) = *(values + i + 1);        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {int ifor(i=0;i<n_values;i++){    if(*values+i==value_to_supress){        *values+i=*values+i-1    }}    }
float* suppress_value (float value_to_supress, float  *values, int n_values){ {    int i;    while (i< n_values)    {        if (*(values+i)==value_to_supress)        {            while i<(n_values-1)            {                *(values+i)= *(values+i+1);                i++;            }            *(values+i)=0;            break;        }        i++;    }}    
float * suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    for (int i=cpt;i<n_values;i++)    {        *(values+i-cpt) = *(values+i+1-cpt);    }    n_values--;    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {int i;for(i=0;i<n_values;i++){    if(*values+i==value_to_supress){        *values+i=*values+i-1;    }}    }
float* suppress_value (float value_to_supress, float  *values, int n_values){ {    int i;    while (i< n_values)    {        if (*(values+i)==value_to_supress)        {            while(i<(n_values-1))            {                *(values+i)= *(values+i+1);                i++;            }            *(values+i)=0;            break;        }        i++;    }}    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,occ=0,k;        for(i=0;i<n_values;i++){        if (value_to_supress == *(values+i))            occ=i;    }    for(k=occ;k<n_values;k++)        *(values+k) = *(values+k+1);    n_values-=1;} 
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=1,j;    while (i < n_values){        if (*(values+i) = value_to_supress){            j = i;            break;        }    }    while (j < n_values) {        *(values +  j- 1) = *(values + j);        j+=1;    }        i+=1;}
void shift_values_to_left(float* values, int n_values){    int i;    float a;    for (i=1;i<n_values;i++)    {        a = *(values+i);        *(values+i)=*(values+i-1);        *(values+i-1)=a;            }}
void shift_values_to_left(float* values, int n_values){    int i;    float a;    for (i=1;i<n_values;i++)    {        a = *(values+i);        *(values+i)=*(values+i-1);        *(values+i-1)=a;            }}
float* suppress_value (float value_to_supress, float  *values, int n_values){ {    int i;    while (i< n_values)    {        if (*(values+i)==value_to_supress)        {            while(i<(n_values-1))            {                *(values+i)= *(values+i+1);                i++;            }            *(values+i)=0;            break;        }        i++;    }}    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i;    while (i< n_values)    {        if (*(values+i)==value_to_supress)        {            while(i<(n_values-1))            {                *(values+i)= *(values+i+1);                i++;            }            *(values+i)=0;            break;        }        i++;    }}    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=1,j;    while (i < n_values){        if (*(values+i) = value_to_supress){            j = i;                    }    }    while (j < n_values) {        *(values +  j- 1) = *(values + j);        j+=1;    }        i+=1;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++){            *(values + i) = *(values + i + 1);        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=1,j;    while (i < n_values){        if (*(values+i) = value_to_supress){            j = i;                    }        i+=1;    }    while (j < n_values) {        *(values +  j- 1) = *(values + j);        j+=1;    }        }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;                                }        i++;    }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;                                }        i++;    }    return s;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;                                }        i++;    }    return i;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;                                }        i++;    }    return i;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i-1 ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=1,j=n_values;    while (i < n_values){        if (*(values+i) = value_to_supress){            j = i;        }        i+=1;    }    while (j < n_values) {        *(values +  j- 1) = *(values + j);        j+=1;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i+1 ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);    }}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = 1 ;        }        else if(isuppr){            *(values + i -1) = *(values + i);        }    }    *(values + n_values -1 ) = 0 ;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=1,j=n_values;    while (i < n_values){        if (*(values+i) == value_to_supress){            j = i;        }        i+=1;    }    while (j < n_values) {        *(values +  j- 1) = *(values + j);        j+=1;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0,j=n_values;    while (i < n_values){        if (*(values+i) == value_to_supress){            j = i;        }        i+=1;    }    while (j < n_values) {        *(values +  j- 1) = *(values + j);        j+=1;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0,j=n_values;    while (i < n_values){        if (*(values+i) == value_to_supress){            j = i;        }        i+=1;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i;    while (i< n_values)    {        if (*(values+i)==value_to_supress)        {            while(i<(n_values-1))            {                *(values+i)= *(values+i+1);                i++;            }            *(values+i)=0;            break;        }        i++;    }    float *tab= (float*) malloc(i* sizeof(float));    for(int a=0;a<i;a++){            }        
float* suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    for (int i=cpt;i<n_values-1;i++)    {        *(values+i-cpt) = *(values+i+1-cpt);    }    n_values--;    }
float* suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    for (int i=cpt;i<n_values-1;i++)    {        *(values+i-cpt) = *(values+i+1-cpt);    }    n_values--;    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0,j=n_values;    while (i < n_values){        if (*(values+i) == value_to_supress){            j = i;        }        i+=1;    }    while (j < n_values) {        *(values +  j) = *(values + j);        j+=1;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i;    while (i< n_values)    {        if (*(values+i)==value_to_supress)        {            while(i<(n_values-1))            {                *(values+i)= *(values+i+1);                i++;            }            *(values+i)=0;            break;        }        i++;    }    float *tab= (float*) malloc(i* sizeof(float));    for(int a=0;a<i;a++){        *(tab+a)=*(values+a);    }    return tab;}    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i;    while (i< n_values)    {        if (*(values+i)==value_to_supress)        {            while(i<(n_values-1))            {                *(values+i)= *(values+i+1);                i++;            }        i++;    }    float *tab= (float*) malloc(i* sizeof(float));    for(int a=0;a<i;a++){        *(tab+a)=*(values+a);    }    return tab;}    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i;    while (i< n_values)    {        if (*(values+i)==value_to_supress)        {            while(i<(n_values-1))            {                *(values+i)= *(values+i+1);                i++;            }        }        i++;    }    float *tab= (float*) malloc(i* sizeof(float));    for(int a=0;a<i;a++){        *(tab+a)=*(values+a);    }    return tab;}    
float* suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    if (trouv== 0)    {        printf("Pas de valeur\n");    }    else    {         for (int i=cpt;i<n_values-1;i++)        {            *(values+i-cpt) = *(values+i+1-cpt);        }        n_values--;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);    }}
float* suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    if (trouv== 0)    {        printf("Pas de valeur\n");    }    else    {         for (int i=cpt;i<n_values;i++)        {            *(values+i-cpt) = *(values+i+1-cpt);        }        n_values--;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values-=1;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* final_array = ( float* ) malloc( ( n_values - 1 ) * sizeof( float ) ) ;    int temp , temp2 = 0 ;    for ( temp = 0 ; temp < n_values ; temp++ ) {        if ( *( values + temp ) != value_to_supress ) {            *( final_array + temp2++ ) = *( values + temp ) ;        }    }        return final_array ;}
float* suppress_vlaue(flaot value_to_supress, float* values, int n_values) {    if(values!=NULL){        int i=0;        while (i<n_values && value_to_suppress!=*(values+i)){            i++;        }        if (i!=n_values){            float stock = *(values);            for (i;i<n_values;i++){                *(values+i)=*(values+i+1);                *(values+n_values-1)=stock;            }            n_values--;        }        return values;    else{        return NULL;    }}
float* suppress_value(flaot value_to_supress, float* values, int n_values) {    if(values!=NULL){        int i=0;        while (i<n_values && value_to_suppress!=*(values+i)){            i++;        }        if (i!=n_values){            float stock = *(values);            for (i;i<n_values;i++){                *(values+i)=*(values+i+1);                *(values+n_values-1)=stock;            }            n_values--;        }        return values;    else{        return NULL;    }}
float* suppress_value(flaot value_to_supress, float* values, int n_values) {    if(values!=NULL){        int i=0;        while (i<n_values && value_to_suppress!=*(values+i)){            i++;        }        if (i!=n_values){            float stock = *(values);            for (i;i<n_values;i++){                *(values+i)=*(values+i+1);                *(values+n_values-1)=stock;            }            n_values--;        }        return values;    else{        return NULL;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i;    while (i< n_values)    {        if (*(values+i)==value_to_supress)        {            while(i<(n_values-1))            {                *(values+i)= *(values+i+1);                i++;            }        }        i++;    }    float *tab= (float*) malloc(i* sizeof(float));    for(int a=0;a<i;a++){        *(tab+a)=*(values+a);    }    return tab;}    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i;    while (i< n_values)    {        if (*(values+i)==value_to_supress)        {            while(i<(n_values-1))            {                *(values+i)= *(values+i+1);                i++;            }        }        i++;    }    float *tab= (float*) malloc(i* sizeof(float));    for(int a=0;a<i;a++){        *(tab+a)=*(values+a);    }    return tab;}    
float* suppress_value(flaot value_to_supress, float* values, int n_values) {    if(values!=NULL){        int i=0;        while (i<n_values && value_to_suppress!=*(values+i)){            i++;        }        if (i!=n_values){            float stock = *(values);            for (i;i<n_values;i++){                *(values+i)=*(values+i+1);                *(values+n_values-1)=stock;            }            n_values--;        }        return values;    else{        return NULL;    }}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = 1 ;        }        else if(isuppr){            *(values + i -1) = *(values + i);        }    }    *(values + n_values -1 ) = 0 ;    return values ;}
float* suppress_value(float value_to_supress, float* values, int n_values) {    if(values!=NULL){        int i=0;        while (i<n_values && value_to_suppress!=*(values+i)){            i++;        }        if (i!=n_values){            float stock = *(values);            for (i;i<n_values;i++){                *(values+i)=*(values+i+1);                *(values+n_values-1)=stock;            }            n_values--;        }        return values;    else{        return NULL;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=1;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }}
float* suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    if (trouv== 0)    {        printf("Pas de valeur\n");    }    else    {         for (int i=cpt+1;i<n_values;i++)        {            *(values+i-cpt) = *(values+i+1-cpt);        }        n_values--;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }}
float* suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    if (trouv== 0)    {        printf("Pas de valeur\n");    }    else    {         for (int i=cpt+1;i<n_values;i++)        {            *(values+i-cpt) = *(values+i+1-cpt);        }        n_values--;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }    return 0;}
float* suppress_value(float value_to_supress, float* values, int n_values) {    if(values!=NULL){        int i=0;        while (i<n_values && value_to_supress!=*(values+i)){            i++;        }        if (i!=n_values){            float stock = *(values);            for (i;i<n_values;i++){                *(values+i)=*(values+i+1);                *(values+n_values-1)=stock;            }            n_values--;        }        return values;    else{        return NULL;    }}
float* suppress_value(float value_to_supress, float* values, int n_values) {    if(values!=NULL){        int i=0;        while (i<n_values && value_to_supress!=*(values+i)){            i++;        }        if (i!=n_values){            float stock = *(values);            for (i;i<n_values;i++){                *(values+i)=*(values+i+1);                *(values+n_values-1)=stock;            }            n_values--;        }        return values;    }    else{        return NULL;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i = 0; i < n_values; i++)    {        if (value_to_supress==*(values+i)){            *(values+n_values+1)=*(values+i);            for (int j=i;j<  n_values;j++){                *(values+i) = *(values+i+1);            }        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        if (i != n_values){            for(i ; i < n_values-1 ; i++)                *(values + i) = *(values + i + 1);            n_values--;        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        if (i < n_values){            for(i ; i < n_values-1 ; i++)                *(values + i) = *(values + i + 1);            n_values--;        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }}
float* suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    if (trouv== 0)    {        printf("Pas de valeur\n");    }    else    {         for (int i=cpt+1;i<n_values-1;i++)        {            *(values+i-cpt) = *(values+i+1-cpt);        }        n_values--;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i;    if (values != NULL){        i = 0;        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }}
float* suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    if (trouv== 0)    {        printf("Pas de valeur\n");    }    else    {         for (int i=cpt+1;i<n_values;i++)        {            *(values+i-cpt) = *(values+i+1-cpt);        }        n_values--;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }}
float* suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    if (trouv== 0)    {        printf("Pas de valeur\n");    }    else    {         for (int i=cpt+1;i<n_values;i++)        {            *(values+i) = *(values+i+1);        }        n_values--;    }    return values;}
float* suppress_value(float value_to_suppress, float  *values, int n_values){    int i, isuppr = 0;    for( i = 0 ; i < n_values ; i++){        if ( *(values + i) == value_to_suppress && !isuppr){            isuppr = 1 ;        }        else if(isuppr){            *(values + i -1) = *(values + i);        }    }    *(values + n_values -1 ) = 0 ;    return values ;}
float* suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    if (trouv== 0)    {        printf("Pas de valeur\n");    }    else    {         for (int i=cpt+1;i<n_values-1;i++)        {            *(values+i) = *(values+i+1);        }        n_values--;    }    return values;}
float* suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    if (trouv== 0)    {        printf("Pas de valeur\n");    }    else    {         for (int i=cpt+1;i<n_values-1;i++)        {            *(values+i) = *(values+i+1);        }        n_values--;    }    return values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res / n_values;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float* suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    if (trouv== 0)    {        printf("Pas de valeur\n");    }    else    {         for (int i=cpt;i<n_values-1;i++)        {            *(values+i) = *(values+i+1);        }        n_values--;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }}
float* suppress_value (float value_to_supress, float  values, int n_values){    for (int i = 0; i < n_values; i++)    {        if (value_to_supress==(values+i)){            (values+n_values+1)=(values+i);            for (int j=i;j<  n_values;j++){                *(values+i) = *(values+i+1);            }        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i;    for (i=0; i<n_values; i++){        if (*(values+i)==value_to_supress){            *(value+i)=*(values+(i+1));            n_values= n_values-1        }        else {            printf ("La valeur à supprimer n'existe pas dans le tableau.");            return 0;        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i;    for (i=0; i<n_values; i++){        if (*(values+i)==value_to_supress){            *(value+i)=*(values+(i+1));            n_values= n_values-1;        }        else {            printf ("La valeur à supprimer n'existe pas dans le tableau.");            return 0;        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i;    for (i=0; i<n_values; i++){        if (*(values+i)==value_to_supress){            *(values+i)=*(values+(i+1));            n_values= n_values-1;        }        else {            printf ("La valeur à supprimer n'existe pas dans le tableau.");            return 0;        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){  float* tab = (float*) malloc (n * sizeof(float));  for(int i=0 ; i<(n_values-1) ; i++){      if (*(values+i) != value_to_supress)        *(tab+i) = *(values+i);    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){  float* tab = (float*) malloc ((n_values-1) * sizeof(float));  for(int i=0 ; i<(n_values-1) ; i++){      if (*(values+i) != value_to_supress)        *(tab+i) = *(values+i);    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){  float* tab = (float*) malloc ((n_values-1) * sizeof(float));  for(int i=0 ; i<(n_values-1) ; i++){      if (*(values+i) != value_to_supress)        *(tab+i) = *(values+i);    }    return &tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){  float* tab = (float*) malloc ((n_values-1) * sizeof(float));  for(int i=0 ; i<(n_values-1) ; i++){      if (*(values+i) != value_to_supress)        *(tab+i) = *(values+i);    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }}
float suppress_value (float value_to_supress, float  *values, int n_values){    for (int i = 0; i < n_values; i++)    {        if (value_to_supress==*(values+i)){            *(values+n_values+1)=*(values+i);            for (int j=i;j<  n_values;j++){                *(values+i) = *(values+i+1);            }        }    }    return *values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr = 1;            break;        }            }    if(suppr == 0){return *values;}    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {        for (int i = 1; i <= n_values; i++){        if (*(values+i) == value_to_supress){            *(values+i) == *(values+i) - *(values+i)            break;        }    }    return *float; }    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;                                }        i++;    }    for(j=i,j<=n-1,j++){            }    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {        for (int i = 1; i <= n_values; i++){        if (*(values+i) == value_to_supress){            *(values+i) == *(values+i) - *(values+i);            break;        }    }    return *float; }    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr = 1;            break;        }            }    if(suppr == 0){return values;}    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);                           }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);                           }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);                           }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);                           }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    }
float* suppress_value (float value_to_supress, float  *values, int n_values){  int test=1;  for(int i=0 ; i<n_values && test; i++){      if (*(values+i) == value_to_supress)        test=0  }  if (test){    float* tab = (float*) malloc ((n_values-1) * sizeof(float));    for(int i=0 ; i<(n_values-1) ; i++){      if (*(values+i) != value_to_supress)        *(tab+i) = *(values+i);    }  }  return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){  int test=1;  for(int i=0 ; i<n_values && test; i++){      if (*(values+i) == value_to_supress)        test=0  }  if (test){    float* tab = (float*) malloc ((n_values-1) * sizeof(float));    for(int i=0 ; i<(n_values-1) ; i++){      if (*(values+i) != value_to_supress)        *(tab+i) = *(values+i);    }  }  return &tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i;    while ((i < n_values) && (*(values+i) != value_to_suppress)) {        i++;    }    if (i = n_values) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        for (j=i;j<n_values-1;j++) {            *(values+i) = *(values+i+1);        }        n_values--;    }    return *values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){  int test=1;  for(int i=0 ; i<n_values && test; i++){      if (*(values+i) == value_to_supress)        test=0  }  if (test){    float* tab = (float*) malloc ((n_values-1) * sizeof(float));    for(int i=0 ; i<(n_values-1) ; i++){      if (*(values+i) != value_to_supress)        *(tab+i) = *(values+i);    }  }  return *tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j;    while ((i < n_values) && (*(values+i) != value_to_suppress)) {        i++;    }    if (i = n_values) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        for (j=i;j<n_values-1;j++) {            *(values+i) = *(values+i+1);        }        n_values--;    }    return *values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0,j=n_values;    while (i < n_values){        if (*(values+i) == value_to_supress){            j = i;        }        i+=1;    }    while (j < n_values) {        *(values +  j) = *(values + j+1);        j+=1;    }    printf("%d",j);}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;                                }        i++;    }    for(j=i,j<=n-1,j++){            }    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i = n_values) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        for (j=i;j<n_values-1;j++) {            *(values+i) = *(values+i+1);        }        n_values--;    }    return *values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i = n_values) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        for (j=i;j<n_values-1;j++) {            *(values+i) = *(values+i+1);        }        n_values--;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i = n_values) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        for (j=i;j<n_values-1;j++) {            *(values+i) = *(values+i+1);        }        n_values--;    }    return values;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i,j<=n-1,j++){        *(values+j)=*(values+j+1)    }    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float  *values, int n_values);float* suppress_value (float value_to_supress, float  *values, int n_values){    float *values_res = (float*)malloc((n_values-1)* sizeof(float));    for (int i = 0; i < n_values; ++i) {        if (*(values + i) != value_to_supress){            *(values_res + i) = *(values + i);        }else {            *(values_res - 1) = *(values + i);        }    };    return values_res;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }            }    float* tab = (float*) malloc((n_values-suppr))*sizeof(float*);    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+i)=*(values+i);        }    return tab;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i,j<=n-1,j++){        *(values+j)=*(values+j+1)    }    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }            }    float* tab = (float*) malloc((n_values-suppr))*sizeof(float*);    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+i)=*(values+i);        }    }    return tab;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;                                }        i++;    }    for(j=i,j<=n-1,j++){       *(values+j)=*(values+j+1)     }    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i,j<=n_values-1,j++){        *(values+j)=*(values+j+1)    }    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i,j<=n_values-1,j++){        *(values+j)=*(values+j+1);    }    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i,j<=n_values-1,j++){        *(values+j)=*(values+j+1);    }    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i = n_values) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{                for (j=i;j<n_values-1;j++) {            *(values+i) = *(values+i+1);        }        n_values--;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }            }    float* tab = (float*) malloc((n_values-suppr))*sizeof(float*(values));    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+i)=*(values+i);        }    }    return tab;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;                                }        i++;    }    for(j=i,j<=n-1,j++){       *(values+j)=*(values+j+1);     }    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }            }    float* tab = (float*) malloc((n_values-suppr))*sizeof(float(*values));    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+i)=*(values+i);        }    }    return tab;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i,j<=n_values-1,j++){        *(values+j)=*(values+j+1);    }    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i,j<=n_values-1,j++){        *(values+j)=*(values+j+1);    }    }

float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0,j=n_values;    while (i < n_values){        if (*(values+i) == value_to_supress){            j = i;        }        i+=1;    }    while (j < n_values) {        *(values +  j) = *(values + j+1);        j+=1;    }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i,j<=n-1,j++){       *(values+j)=*(values+j+1);     }    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i,j<n_values-1,j++)    {        *(values+j)=*(values+j+1);    }    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }            }    float* tab = (float*) malloc((n_values-suppr))*sizeof(float);    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+i)=*(values+i);        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }            }    float* tab = (float*) malloc((n_values-suppr)) * sizeof(float);    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+i)=*(values+i);        }    }    return tab;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0,n;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i,j<=n_values-1,j++){       *(values+j)=*(values+j+1);     }    }
int find_first_value (float value_to_find, float* values, int n_values) {    for (int i=0; i<n_values;i++){        if (value_to_find== *(values+i)){            return i;        }    }    return -1;}float* suppress_value (float value_to_supress, float  *values, int n_values) {    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i;    float p = *values;    int val = value_to_supress;        while(i<n_values)    {        if(*(values+i) == val)        {            while(i<n_values-1)            {                *(values+i) = *(values+i+1);                i++;            }        }        i++;    }    n_values = n_values-1;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }            }    int n = n_values-suppr    float* tab = (float*) malloc(n * sizeof(float));    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+i)=*(values+i);        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0,j=n_values;    while (i < n_values){        if (*(values+i) == value_to_supress){            j = i;        }        i+=1;    }    while (j < n_values) {        *(values +  j) = *(values + j+1);        j+=1;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j;    for (i=0; i<n_values; i++){        if (*(values+i)==value_to_supress){            for (j=i; j<n_values-1; j++){                *(values+j)=*(values+(j+1));            }            n_values= n_values-1;        }        else {            printf ("La valeur à supprimer n'existe pas dans le tableau.");            return 0;        }    }}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc(n_values*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);        }    }     return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }            }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+i)=*(values+i);        }    }    return tab;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for (j=i,j<n_values-1,j++)    {        *(values+j)=*(values+j+1);    }    }
int find_first_value (float value_to_find, float* values, int n_values) {    for (int i=0; i<n_values;i++){        if (value_to_find== *(values+i)){            return i;        }    }    return -1;}void shift_values_to_left(float* values, int n_values){    float tmp;    tmp=*(values);    for(int i=0;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    *(values+n_values-1)=tmp;}float* suppress_value (float value_to_supress, float  *values, int n_values) {    }
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc(n_values*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);         cpt++        }    }     return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc(n_values*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);         cpt++;        }    }     return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i;    float p = *values;    int val = value_to_supress;        while(i<n_values)    {        if(*(values+i) == val)        {            while(i<n_values-1)            {                *(values+i) = *(values+i+1);                i++;            }        }        i++;    }    n_values = n_values-1;    return p;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }            }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for (j=i;j<n_values-1;j++)        {        *(values+j)=*(values+j+1);    }    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i;    float *p = *values;    int val = value_to_supress;        while(i<n_values)    {        if(*(values+i) == val)        {            while(i<n_values-1)            {                *(values+i) = *(values+i+1);                i++;            }        }        i++;    }    n_values = n_values-1;    return p;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        for(i ; i < n_values-1 ; i++)            *(values + i) = *(values + i + 1);        n_values--;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){        int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0,j=n_values;    while (i < n_values){        if (*(values+i) == value_to_supress){            j = i;            while (j < n_values) {                *(values +  j) = *(values + j+1);                j+=1;        }        i+=1;    }    }    return values;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if ((values+i) == value_to_supress){            suppr++;        }    }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            (tab+j)=(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i = n_values) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *)malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<n_values-1;j++)            *(values2+i) = *(values+i+1);        n_values--;    }    return values2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }            }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i = n_values) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *)malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<n_values-1;j++)            *(values2+i) = *(values+i+1);        n_values--;    }    return values2;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }    }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            (tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0,j=n_values;    while (i < n_values){        if (*(values+i) == value_to_supress){            j = i;            while (j < n_values) {                *(values +  j) = *(values + j+1);                j+=1;        }        i+=1;    }    }    return values;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0,n;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i,j<=n_values,j++){       *(values+j)=*(values+j+1);     }    }
float* suppress_value(float value_to_supress,float*values, int n_values){    for(int i=0;i<n_values;i++)    {        if (*(values+i)== value_to_supress)        {            for(int j=(n_values-i);j<(n_values-1);j++)            {                *(values+i+j)=*(values+1+i+j)            }        }    }    return *values}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i;    float p;    int val = value_to_supress;        while(i<n_values)    {        if(*(values+i) == val)        {            while(i<n_values-1)            {                *(values+i) = *(values+i+1);                i++;            }        }        i++;    }    n_values = n_values-1;    p = *values;    return p;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if ((values+i) == value_to_supress){            suppr++;        }    }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            (tab+j)=(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if ((values+i) == value_to_supress){            suppr++;        }    }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            (tab+j)=(values+i);            j++;        }    }    return tab;}
float* suppress_value(float value_to_supress,float*values, int n_values){    for(int i=0;i<n_values;i++)    {        if (*(values+i)== value_to_supress)        {            for(int j=(n_values-i);j<(n_values-1);j++)            {                *(values+i+j)=*(values+1+i+j);            }        }    }    return *values}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0,n;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i,j<=n_values,j++)    {       *(values+j)=*(values+j+1);     }    }
float* suppress_value(float value_to_supress,float*values, int n_values){    for(int i=0;i<n_values;i++)    {        if (*(values+i)== value_to_supress)        {            for(int j=(n_values-i);j<(n_values-1);j++)            {                *(values+i+j)=*(values+1+i+j);            }        }    }    return *values;}
float* suppress_value(float value_to_supress,float*values, int n_values){    for(int i=0;i<n_values;i++)    {        if (*(values+i)== value_to_supress)        {            for(int j=(n_values-i);j<(n_values-1);j++)            {                *(values+i+j)=*(values+1+i+j);            }        }    }    return *(values);}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float * values2 = NULL;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i = n_values) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *)malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<n_values-1;j++)            *(values2+i) = *(values+i+1);        n_values--;    }    return values2;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0,n;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i;j<=n_values;j++)    {       *(values+j)=*(values+j+1);     }    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0,n;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i;j<=n_values;j++)    {       *(values+j)=*(values+j+1);     }    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i;    int val = value_to_supress;        while(i<n_values)    {        if(*(values+i) == val)        {            while(i<n_values-1)            {                *(values+i) = *(values+i+1);                i++;            }        }        i++;    }    n_values = n_values-1;    return *values;}
float* suppress_value(float value_to_supress,float*values, int n_values){    for(int i=0;i<n_values;i++)    {        if (*(values+i)== value_to_supress)        {            for(int j=(n_values-i);j<(n_values-1);j++)            {                *(values+i+j)=*(values+1+i+j);            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }    }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    free(values+n);}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float * values2 = NULL;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i = n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *)malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<n_values-1;j++)            *(values2+i) = *(values+i+1);        n_values--;    }    return values2;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float * values2 = NULL;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i = n_values-1) {        exit(0);    }else{        float *values2 = (float *)malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<n_values-1;j++)            *(values2+i) = *(values+i+1);        n_values--;    }    return values2;}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float  *values, int n_values);float* suppress_value (float value_to_supress, float  *values, int n_values){    float *values_res = (float*)malloc((n_values-1)* sizeof(float));    for (int i = 0; i < n_values; ++i) {        if (*(values + i) != value_to_supress){            *(values_res + i) = *(values + i);        }else {            for (int j = i + 1; j < n_values; ++j) {                *(values_res + j) = *(values + j + 1);            };            return values_res;        }    };}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float  *values, int n_values);float* suppress_value (float value_to_supress, float  *values, int n_values){    float *values_res = (float*)malloc((n_values-1)* sizeof(float));    for (int i = 0; i < n_values; ++i) {        if (*(values + i) != value_to_supress){            *(values_res + i) = *(values + i);        }else {            for (int j = i + 1; j < n_values; ++j) {                *(values_res + j) = *(values + j + 1);            };            return values_res;        }    };}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float  *values, int n_values);float* suppress_value (float value_to_supress, float  *values, int n_values){    float *values_res = (float*)malloc((n_values-1)* sizeof(float));    for (int i = 0; i < n_values; ++i) {        if (*(values + i) != value_to_supress){            *(values_res + i) = *(values + i);        }else {            for (int j = i + 1; j < n_values; ++j) {                *(values_res + j) = *(values + j + 1);            };            return values_res;        }    };}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float  *values, int n_values);float* suppress_value (float value_to_supress, float  *values, int n_values){    float *values_res = (float*)malloc((n_values-1)* sizeof(float));    for (int i = 0; i < n_values; ++i) {        if (*(values + i) != value_to_supress){            *(values_res + i) = *(values + i);        }else {            for (int j = i + 1; j < n_values; ++j) {                *(values_res + j) = *(values + j + 1);            };            return values_res;        }    };}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float  *values, int n_values);float* suppress_value (float value_to_supress, float  *values, int n_values){    float *values_res = (float*)malloc((n_values-1)* sizeof(float));    for (int i = 0; i < n_values; ++i) {        if (*(values + i) != value_to_supress){            *(values_res + i) = *(values + i);        }else {            for (int j = i + 1; j < n_values; ++j) {                *(values_res + j) = *(values + j + 1);            };            return values_res;        }    };}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float  *values, int n_values);float* suppress_value (float value_to_supress, float  *values, int n_values){    float *values_res = (float*)malloc((n_values-1)* sizeof(float));    for (int i = 0; i < n_values; ++i) {        if (*(values + i) != value_to_supress){            *(values_res + i) = *(values + i);        }else {            for (int j = i + 1; j < n_values; ++j) {                *(values_res + j) = *(values + j + 1);            };            return values_res;        }    };}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float * values2 = NULL;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i == n_values-1) {        exit(0);    }else{        float *values2 = (float *)malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<n_values-1;j++)            *(values2+i) = *(values+i+1);        n_values--;    }    return values2;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float * values2 = NULL;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *)malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<n_values-1;j++)            *(values2+i) = *(values+i+1);        n_values--;    }    return values2;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    /*while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                           for(i=value_to_supress;i<=n_values;i++){            if(n_values==i){                *(values+i)='\0';            }            *(values+i)=*(values+i+1);        }    }}    
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float * values2 = NULL;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *)malloc(n_values);        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<n_values-1;j++)            *(values2+i) = *(values+i+1);        n_values--;    }    return values2;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    /*while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       for(i=value_to_supress;i<=n_values;i++){        if(n_values==i){            *(values+i)='\0';        }        *(values+i)=*(values+i+1);        }    }}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    /*while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       for(i=value_to_supress;i<=n_values;i++){        if(n_values==i){            *(values+i)='\0';        }        *(values+i)=*(values+i+1);        }    }}    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    free(&(values+n));}
float* suppress_value (float value_to_supress, float  *values, int n_values) {        for (int i = 1; i <= n_values; i++){        if (*(values+i) == value_to_supress){            *(values+i) == *(values+i) - *(values+i);            break;        }    }    return *values; }    
float* suppress_value (float value_to_supress, float  values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (**(values+i) == value_to_supress){            suppr++;        }    }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            **(tab+j)=*(values+i);            j++;        }    }    return tab;}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float  *values, int n_values);float* suppress_value (float value_to_supress, float  *values, int n_values){    float *values_res = (float*)malloc((n_values-1)* sizeof(float));    for (int i = 0; i < n_values; ++i) {        if (*(values + i) != value_to_supress){            *(values_res + i) = *(values + i);        }else {            for (int j = i + 1; j < (n_values - 1); ++j) {                *(values_res + j) = *(values + j + 1);            };            return values_res;        }    };}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float  *values, int n_values);float* suppress_value (float value_to_supress, float  *values, int n_values){    float *values_res = (float*)malloc((n_values-1)* sizeof(float));    for (int i = 0; i < n_values; ++i) {        if (*(values + i) != value_to_supress){            *(values_res + i) = *(values + i);        }else {            for (int j = i + 1; j < (n_values - 1); ++j) {                *(values_res + j) = *(values + j + 1);            };            return values_res;        }    };}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float  *values, int n_values);float* suppress_value (float value_to_supress, float  *values, int n_values){    float *values_res = (float*)malloc((n_values-1)* sizeof(float));    for (int i = 0; i < n_values; ++i) {        if (*(values + i) != value_to_supress){            *(values_res + i) = *(values + i);        }else {            for (int j = i + 1; j < (n_values - 1); ++j) {                *(values_res + j) = *(values + j + 1);            };            return values_res;        }    };}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float * values2 = NULL;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *) malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<n_values-1;j++)            *(values2+i) = *(values+i+1);        n_values--;    }    return values2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float* x;    int a = 0, i = 0;    while (i<n_values || a !=0)    {        if a    }}
int find_first_value (float value_to_find, float* values, int n_values) {    for (int i=0; i<n_values;i++){        if (value_to_find== *(values+i)){            return i;        }    }    return -1;}void shift_values_to_left(float* values, int n_values){    float tmp;    tmp=*(values);    for(int i=0;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    *(values+n_values-1)=tmp;}float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    cpt=find_first_value (value_to_supress,values,n_values);    for(int i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    n_values-=1}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float * values2 = NULL;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *) malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<n_values-1;j++)            *(values2+i) = *(values+i+1);        n_values--;    }    return *values2;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float * values2 = NULL;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *) malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<n_values-1;j++)            *(values2+i) = *(values+i+1);        n_values--;    }    return values2;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    /*while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       for(i=value_to_supress;i<=n_values;i++){        if(n_values==i){            *(values+i)='\0';        }        *(values+i)=*(values+i+1);        }    }}    
float* suppress_value(float value_to_supress,float*values, int n_values){    for(int i=0;i<n_values;i++)    {        if (*(values+i)== value_to_supress)        {            for(int j=i;j<(n_values-1);j++)            {                *(values+j)=*(values+1+j);            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0,j=n_values;    while (i < n_values){        if (*(values+i) == value_to_supress){            j = i;            break;        }        i+=1;    }    while (j < n_values) {        *(values +  j) = *(values + j+1);        j+=1;    }    return values;
int find_first_value (float value_to_find, float* values, int n_values) {    for (int i=0; i<n_values;i++){        if (value_to_find== *(values+i)){            return i;        }    }    return -1;}float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    cpt=find_first_value (value_to_supress,values,n_values);    for(int i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    n_values-=1;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,occ=0,k;        for(i=0;i<n_values;i++){        if (value_to_supress == *(values+i))            occ=i;    }    for(k=occ;k<n_values;k++)        *(values+k) = *(values+k+1);    n_values-=1;    return values} 
float* suppress_value (float value_to_supress, float  values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }    }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
#include <stdio.h>#include <stdlib.h>float* suppress_value (float value_to_supress, float  *values, int n_values);float* suppress_value (float value_to_supress, float  *values, int n_values){    float *values_res = (float*)malloc((n_values-1)* sizeof(float));    for (int i = 0; i < n_values; ++i) {        if (*(values + i) != value_to_supress){            *(values_res + i) = *(values + i);        }else {            for (int j = i + 1; j < n_values; ++j) {                *(values_res + j - 1) = *(values + j);            };            return values_res;        }    };}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0,j=n_values;    while (i < n_values){        if (*(values+i) == value_to_supress){            j = i;                    }        i+=1;    }    while (j < n_values) {        *(values +  j) = *(values + j+1);        j+=1;    }    return values;
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,occ=0,k;        for(i=0;i<n_values;i++){        if (value_to_supress == *(values+i))            occ=i;    }    for(k=occ;k<n_values;k++)        *(values+k) = *(values+k+1);    n_values-=1;    return values;} 
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        if (i != n_values){            for(i ; i < n_values-1 ; i++)                *(values + i) = *(values + i + 1);            n_values--;        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }    }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        if (i != n_values){            for(i ; i < n_values-1 ; i++)                *(values + i) = *(values + i + 1);            n_values--;        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0,j=n_values;    while (i < n_values){        if (*(values+i) == value_to_supress){            j = i;        }        i+=1;    }    while (j < n_values) {        *(values +  j) = *(values + j+1);        j+=1;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    free(*(values+n));}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0,j=n_values;    while (i < n_values){        if (*(values+i) == value_to_supress){            j = i;            break;        }        i+=1;    }    while (j < n_values) {        *(values +  j) = *(values + j+1);        j+=1;    }    return values;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    /*while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       for(i=value_to_supress;i<=n_values;i++){        if(n_values==i){            *(values+i)='\0';        }        *(values+i)=*(values+i+1);    }}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    /*while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       for(i=value_to_supress;i<=n_values;i++){        if(n_values==i){            *(values+i)='\0';        }        *(values+i)=*(values+i+1);    }}    
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0; i<n_values; i++)    {        if (value_to_supress = *(values+i))        {                    }    }    }
float* suppress_value (float value_to_supress, float  *values, int n_values)  {// Déclaration variables //    int i=0, j, Trouv = 0;/*Algorithme */    while (i<n_values && Trouv==0) { // j inutile, on réinitialise juste i avant        if (value_to_supress == *(values+i)) {            for(j=i;j<n_values-1;j++) {                *(values+j) = *(values+j+1);}            n_values = n_values - 1;            Trouv = 1; }        else            i++; }    printf("Le tableau sans la valeur est:");    for (i=0; i<n_values;i++) {        printf("\t"); // Pour tabulation: penser à inverser.        printf("%d", *(values+i)); }    return 0 ; }
float* suppress_value (float value_to_supress, float *values, int n_values){int suppr = 0;for(int i=0; i<n_values;i++){if (*(values+i) == value_to_supress){suppr++;}}int n = n_values-suppr;float* tab = (float*) malloc(n * sizeof(float));int j = 0;for(int i=0; i<n_values;i++){if (*(values+i) != value_to_supress){*(tab+j)=*(values+i);j++;}}return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if ((*values+i) == value_to_supress){            suppr++;        }    }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            (tab+j)=(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values)  {// Déclaration variables //    int j, i=0, Trouv = 0;/*Algorithme */    while (i<n_values && Trouv==0) { // j inutile, on réinitialise juste i avant        if (value_to_supress == *(values+i)) {            for(j=i;j<n_values-1;j++) {                *(values+j) = *(values+j+1);}            n_values = n_values - 1;            Trouv = 1; }        else            i++; }    printf("Le tableau sans la valeur est:");    for (i=0; i<n_values;i++) {        printf("\t"); // Pour tabulation: penser à inverser.        printf("%d", *(values+i)); }    return 0 ; }
float* suppress_value (float value_to_supress, float  *values, int n_values);{    for (int i=0;i<n_values;i++){        if(*(values+i)==value_to_supress){            for (j=i;j<n_values;j++){                *(values+j)=*(values+(j+1));            }            break:        }    }    return values:}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float tmp;    float * values2 = NULL;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *) malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            tmp = *(values+i);            *(values2+i) = tmp;        for (j=i;j<n_values-1;j++)            tmp = *(values+i+1);            *(values2+i) = *tmp;        n_values--;    }    return values2;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    for (int i=0; i<n_values;i++){        if (value_to_find== *(values+i)){            cpt=i;    for(int i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    n_values-=1;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float tmp;    float * values2 = NULL;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *) malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            tmp = *(values+i);            tmp = *(values2+i);        for (j=i;j<n_values-1;j++)            tmp = *(values+i+1);            *(values2+i) = *tmp;        n_values--;    }    return values2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0;i<n_values;i++){        if(*(values+i)==value_to_supress){            for (j=i;j<n_values;j++){                *(values+j)=*(values+(j+1));            }            break:        }    }    return values:}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0;i<n_values;i++){        if(*(values+i)==value_to_supress){            for (int j=i;j<n_values;j++){                *(values+j)=*(values+(j+1));            }            break:        }    }    return values:}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0;i<n_values;i++){        if(*(values+i)==value_to_supress){            for (int j=i;j<n_values;j++){                *(values+j)=*(values+(j+1));            }            break;        }    }    return values;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    for (int i=0; i<n_values;i++){        if (value_to_find== *(values+i)){            cpt=i;        }    }    for(int i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    n_values-=1;}
float* suppress_value (float value_to_supress, float  *values, int n_values)  {// Déclaration variables //    int j, i=0, Trouv = 0;/*Algorithme */    while (i<n_values && Trouv==0) { // j inutile, on réinitialise juste i avant        if (value_to_supress == *(values+i)) {            for(j=i;j<n_values-1;j++) {                *(values+j) = *(values+j+1);}            n_values = n_values - 1;            Trouv = 1; }        else            i++; }    printf("Le tableau sans la valeur est:");    for (i=0; i<n_values;i++) {        printf("\t"); // Pour tabulation: penser à inverser.        printf("%d", *(values+i)); }            return &values ; }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0; i<n_values; i++)    {        if (value_to_supress = *(values+i))        {            or (int i=0; i<n_values; i++)        }    }    }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float  *values, int n_values)  {// Déclaration variables //    int j, i=0, Trouv = 0;/*Algorithme */    while (i<n_values && Trouv==0) { // j inutile, on réinitialise juste i avant        if (value_to_supress == *(values+i)) {            for(j=i;j<n_values-1;j++) {                *(values+j) = *(values+j+1);}            n_values = n_values - 1;            Trouv = 1; }        else            i++; }    printf("Le tableau sans la valeur est:");    for (i=0; i<n_values;i++) {        printf("\t"); // Pour tabulation: penser à inverser.        printf("%d", *(values+i)); }            return values ; }
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    for (int i=0; i<n_values;i++){        if (value_to_supress== *(values+i)){            cpt=i;        }    }    for(int i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    n_values-=1;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float tmp;    float * values2 = NULL;    while ((i < n_values) && (*(values+i) != value_to_supress)) {        i++;    }    if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *) malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<n_values-1;j++)            *(values2+i) = *(values+i+1);    }    return values2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if ((*values+i) == value_to_supress){            suppr++;        }    }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+j)=(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if ((*values+i) == value_to_supress){            suppr++;        }    }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    for (int i=0; i<n_values;i++){        if (value_to_supress== *(values+i)){            cpt=i;        }    }    for(int i=cpt-1;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    n_values-=1;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    for (int i=0; i<n_values;i++){        if (value_to_supress== *(values+i)){            cpt=i;        }    }    for(int i=cpt+1;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    n_values-=1;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float tmp;    float * values2 = NULL;    while ((i < n_values) || (*(values+i) != value_to_supress)) {        i++;    }    if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *) malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<n_values-1;j++)            *(values2+i) = *(values+i+1);    }    return values2;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {        float *newtab = (float*) malloc (n_values * siezof(float));        j = 0    for(int i=0; i < n_values; i++){        if(*(values + i) == value_to_supress){          *(newtab+j) = *(values + i);          j++;        }    }        return newtab; }    
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    for (int i=0; i<n_values;i++){        if (value_to_supress== *(values+i)){            cpt=i;        }    }    for(int i=cpt+1;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    n_values-=1;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0; i<n_values; i++)    {        if (value_to_supress = *(values+i))        {            for (int j=i; j<n_values; j++)            {                            }        }    }    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float tmp;    float * values2 = NULL;    while (i < n_values || *(values+i) != value_to_supress) {        i++;    }    if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *) malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<n_values-1;j++)            *(values2+i) = *(values+i+1);    }    return values2;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }            }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0; i<n_values; i++)    {        if (value_to_supress = *(values+i))        {            for (int j=i; j<n_values-1; j++)            {                *(values+j) = *(values+j+1);            }        }    }    }
float* suppress_value (float value_to_supress, float* values, int n_values){    int i;    float resultat, LastValue;    float* CurrentValue;    for (i = 0; i < n_values; i++){        if (*(values+i)==value_to_find ){            LastValue=*values;            for (i = 0; i+1 < n_values; i++){                CurrentValue=(values+i);                *CurrentValue= *(values+i+1);            }            CurrentValue=(values+n_values-1);            *CurrentValue= LastValue            return  values;        }    }    return values;}
float* suppress_value (float value_to_supress, float* values, int n_values){    int i;    float resultat, LastValue;    float* CurrentValue;    for (i = 0; i < n_values; i++){        if (*(values+i)==value_to_find ){            LastValue=*values;            for (i = 0; i+1 < n_values; i++){                CurrentValue=(values+i);                *CurrentValue= *(values+i+1);            }            CurrentValue=(values+n_values-1);            *CurrentValue= LastValue;            return  values;        }    }    return values;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float* values, int n_values){    int i;    float resultat, LastValue;    float* CurrentValue;    for (i = 0; i < n_values; i++){        if (*(values+i)==value_to_supress ){            LastValue=*values;            for (i = 0; i+1 < n_values; i++){                CurrentValue=(values+i);                *CurrentValue= *(values+i+1);            }            CurrentValue=(values+n_values-1);            *CurrentValue= LastValue;            return  values;        }    }    return values;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++;        }        i++;    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int nb = 0;    for(int i =0; i<n_values; i++){        if (*(values + i) == value_to_supress){            nb++;            break;        }    }        float *newtab = (float*) malloc (n_values-nb * siezof(float));        j = 0    for(int i=0; i < n_values; i++){        if(*(values + i) == value_to_supress){          *(newtab+j) = *(values + i);          j++;        }    }        return newtab; }    
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float tmp;    float * values2 = NULL;    while ((i < n_values) || (*(values+i) != value_to_supress)) {        i++;    }    if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *) malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<(n_values-1);j++)            *(values2+i) = *(values+i+1);    }    return values2;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    int i=0;    while  ((i<n_values)&&(value_to_supress == *(values+i))){        i++;    }    cpt=i;    for(i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    n_values-=1;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    int i=0;    while  ((i<n_values)&&(value_to_supress == *(values+i))){        i++;    }    cpt=i;    for(i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    n_values-=1;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0,n;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i;j<=n_values-1;j++)    {       *(values+j)=*(values+j+1);     }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=0,n;    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    for(j=i;j<=n_values-1;j++)    {       *(values+j)=*(values+j+1);     }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++;        }        i++;    }    for(j=i;j<n_values-1;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++;        }        i++;    }    for(j=i;j<n_values-1;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++;        }        i++;    }    for(j=i;j<n_values-1;j++){        *(values+j)=*(values+j+1);    }}                      
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++;        }        i++;    }    /*for(j=i;j<n_values-1;j++){        *(values+j)=*(values+j+1);    }}                      
float suppress_value (float value_to_supress, float  *values, int n_values){    int j;    float tab = (float) malloc(n_values * sizeof(float));    j=0    for (int i = 0; i < n_values; i++)    {        if (value_to_supress!=*(values+i)&& j=0 )            *(tab+i)=*(values+i);        if(value_to_supress==*(values+i))            j=i;        else            *(tab+i-1)=*(values+i);        }    }    return *tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    free(values+n);}
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int nb = 0;    for(int i =0; i<n_values; i++){        if (*(values + i) == value_to_supress){            nb++;            break;        }    }        float *newtab = (float*) malloc (n_values-nb * siezof(float));        int j = 0    for(int i=0; i < n_values; i++){        if(*(values + i) != value_to_supress){          *(newtab+j) = *(values + i);          j++;        }    }        return newtab; }    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++;        }        i++;    }    /*for(j=i;j<n_values-1;j++){        *(values+j)=*(values+j+1);    }    */}                            
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    int i=0;    while  ((i<n_values)&&(value_to_supress != *(values+i))){        i++;    }    cpt=i;    for(i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    n_values-=1;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    int i=0;    while  ((i<n_values)&&(value_to_supress != *(values+i))){        i++;    }    cpt=i;    for(i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    n_values-=1;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float tmp;    float * values2 = NULL;    while ((i < n_values) || (*(values+i) != value_to_supress)) {        i++;    }    /*if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *) malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<(n_values-1);j++)            *(values2+i) = *(values+i+1);    }    return values2;    */}
float* suppress_value (float value_to_supress, float* values, int n_values){    int i,j;    float resultat, LastValue;    float* CurrentValue;    for (i = 0; i < n_values; i++){        if (*(values+i)==value_to_supress ){            LastValue=*values;            for (j = i+1; j+1 < n_values; j++){                CurrentValue=(values+j);                *CurrentValue= *(values+j+1);            }            CurrentValue=(values+n_values-1);            *CurrentValue= LastValue;            return  values;        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,cpt=0,k;        for(i=0;i<n_values;i++){        if (value_to_supress == *(values+i))            cpt+=1;    }    for(k=cpt;k<n_values;k++)        *(values+k) = *(values+k+1);    n_values-=1;    return values;} 
float* suppress_value (float value_to_supress, float* values, int n_values){    int i,j;    float resultat, LastValue;    float* CurrentValue;    for (i = 0; i < n_values; i++){        if (*(values+i)==value_to_supress ){            LastValue=*values;            for (j = i; j+1 < n_values; j++){                CurrentValue=(values+j);                *CurrentValue= *(values+j+1);            }            CurrentValue=(values+n_values-1);            *CurrentValue= LastValue;            return  values;        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int nb = 0;    for(int i =0; i<n_values; i++){        if (*(values + i) == value_to_supress){            nb++;            break;        }    }        float *newtab = (float*) malloc (n_values-nb * siezof(float));        int j = 0;    int cnt = 0;    for(int i=0; i < n_values; i++){        if(*(values + i) != value_to_supress){          *(newtab+j) = *(values + i);          j++;        }    }        return newtab; }    
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float * values2 = NULL;    if (n_values != NULL) {        while ((i < n_values) || (*(values+i) != value_to_supress)) {            i++;        }    }        /*if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *) malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<(n_values-1);j++)            *(values2+i) = *(values+i+1);    }    return values2;    */}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float * values2 = NULL;    if (n_values not = 0) {        while ((i < n_values) || (*(values+i) != value_to_supress)) {            i++;        }    }        /*if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *) malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<(n_values-1);j++)            *(values2+i) = *(values+i+1);    }    return values2;    */}
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int nb = 0;    for(int i =0; i<n_values; i++){        if (*(values + i) == value_to_supress){            nb++;        }    }        float *newtab = (float*) malloc (n_values-nb * sizeof(float));        int j = 0;    int cnt = 0;    for(int i=0; i < n_values; i++){        if(*(values + i) != value_to_supress){          *(newtab+j) = *(values + i);          j++;        }        else{            cnt++;                    }    }        return newtab; }    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }            }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if (values!=NULL){            while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++;        }        i++;    }    }    return values;    /*for(j=i;j<n_values-1;j++){        *(values+j)=*(values+j+1);    }    */}                            
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int nb = 0;    for(int i =0; i<n_values; i++){        if (*(values + i) == value_to_supress){            nb++;        }    }        float *newtab = (float*) malloc (n_values-nb * sizeof(float));        int j = 0;    for(int i=0; i < n_values; i++){        if(*(values + i) != value_to_supress){          *(newtab+j) = *(values + i);          j++;        }    }        return newtab; }    
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i, j, k;    float * values2 = NULL;    if (n_values != 0) {        while ((i < n_values) || (*(values+i) != value_to_supress)) {            i++;        }    }    return values;    /*if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *) malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<(n_values-1);j++)            *(values2+i) = *(values+i+1);    }    return values;    */}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int j;    float* tab = (float*) malloc(n_values-1 * sizeof(float));    j=0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i)&& j==0 )            *(tab+i)=*(values+i);        if(value_to_supress==*(values+i))            j=i;        else            *(tab+i-1)=*(values+i);        }    return tab;    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0;    while(i<n_values && value_to_supress != *(values+i))        i++;    if (i != n_values){        for(i;i<n_values-1,i++){            *(values+i) = *(values+i+1);        }    }    n_values--;    return values;}
float* suppress_value (float value_to_supress, float *values, int n_values){int suppr = 0;for(int i=0; i<n_values;i++){if (*(values+i) == value_to_supress){suppr++;}}int n = n_values-suppr;float* tab = (float*) malloc(n * sizeof(float));int j = 0;for(int i=0; i<n_values;i++){if (*(values+i) != value_to_supress){*(tab+j)=*(values+i);j++;}}return tab;}
float* suppress_value(float value_to_supress, float* values, int n_values){    if(values!=NULL)    {        int i = 0;        while(i<n_values && value_to_supress = *(values+i))        {            i++;        }        if(i!=n_values)        {            float wait = *(values);            for(i; i<n_values; i++)            {                *(values + i) = *(values + i + 1);                *(values + n_values - 1) = wait;            }            n_values--;        }        return values;    }    else{        return NULL;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0;    while(i<n_values && value_to_supress != *(values+i))        i++;    if (i != n_values){        for(i;i<n_values-1;i++){            *(values+i) = *(values+i+1);        }    }    n_values--;    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0;    while(i<n_values && value_to_supress != *(values+i))        i++;    if (i != n_values){        for(i;i<n_values-1;i++){            *(values+i) = *(values+i+1);        }    }    n_values--;    return values;}
float* suppress_value (float value_to_supress, float  values, int n_values){    float arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = i; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }            return arr;        }    }        return arr;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0; i<n_values; i++)    {        if (value_to_supress = *(values+i))        {            for (int j=i; j<n_values-1; j++)            {                *(values+j) = *(values+j+1);                return realloc(*values, n_values-1);            }        }    }    }
float* suppress_value (float value_to_supress, float  values, int n_values){    float arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = i; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }            return arr;        }    }        return 0;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int j;    float tab = (float*) malloc(n_values-1 * sizeof(float));    j=0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i)&& j==0 )            (tab+i)=(values+i);        if(value_to_supress==*(values+i))            j=i;        else            (tab+i-1)=(values+i);        }    return tab;    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0; i<n_values; i++)    {        if (value_to_supress = *(values+i))        {            for (int j=i; j<n_values-1; j++)            {                *(values+j) = *(values+j+1);                return realloc(values, n_values-1);            }        }    }    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0; i<n_values; i++)    {        if (value_to_supress = *(values+i))        {            for (int j=i; j<n_values-1; j++)            {                *(values+j) = *(values+j+1);                return realloc(values, n_values-1);            }        }    }    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int nb = 0;    for(int i =0; i<n_values; i++){        if (*(values + i) == value_to_supress){            nb++;            break;        }    }        float *newtab = (float*) malloc (n_values-nb * sizeof(float));        int j = 0;    for(int i=0; i < n_values; i++){        if(*(values + i) != value_to_supress){          *(newtab+j) = *(values + i);          j++;        }    }        return newtab; }    
float* suppress_value (float value_to_supress, float  values, int n_values){    float arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = i; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }            return arr;        }    }    return arr;}
float* suppress_value(float value_to_supress, float* values, int n_values){    if(values!=NULL)    {        int i = 0;        while(i<n_values && value_to_supress != *(values+i))        {            i++;        }        if(i!=n_values)        {            float wait = *(values);            for(i; i<n_values; i++)            {                *(values + i) = *(values + i + 1);                *(values + n_values - 1) = wait;            }            n_values--;        }        return values;    }    else{        return NULL;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    values+n = Null}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    int i=0;    while  ((i<n_values)&&(value_to_supress != *(values+i))){        i++;    }    cpt=i;    for(i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    values=realloc(values,n_values-1);}
float* suppress_value (float value_to_supress, float  values, int n_values){    float arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = i; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }            return arr;        }    }    return 0;}
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < --n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if (values!=NULL){            while (i<n_values && s==0){        if (value_to_supress==*(values+i)){            s++;        }        else             i++;    }    }        for(j=i;j<n_values-1;j++){        *(values+j)=*(values+j+1);    }    return values;}                            
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    values+n = Null;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int j;    float tab = (float*) malloc(n_values-1 * sizeof(float));    j=0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i)&& j==0 )            (tab+i)=(values+i);        if(value_to_supress==*(values+i))            j=i;        else            *(tab+i-1)=*(values+i);        }    return tab;    }
float* suppress_value (float value_to_supress, float *values, int n_values){    float arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = i; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }            return arr;        }    }    return 0;}
float* supress_value(float value_to_supress, float *values, int n_values){    int j = 0;    float *tab = (float*) malloc(n_values * sizeof(float));    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i) && j == 0)        {            *(tab+i) = *(values+i);        }        if (value_to_supress == *(values+i))        {            j = i;        }        else        {            *(tab+i-1) = *(values+i);        }    }    return tab;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int j;    float tab = (float*) malloc(n_values-1 * sizeof(float));    j=0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i)&& j==0 )            *(tab+i)=*(values+i);        if(value_to_supress==*(values+i))            j=i;        else            *(tab+i-1)=*(values+i);        }    return tab;    }
float* suppress_value (float value_to_supress, float *values, int n_values){    float arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = i; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }            return arr;        }    }    return arr;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    values+n = NULL;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int j;    float* tab = (float*) malloc(n_values-1 * sizeof(float));    j=0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i)&& j==0 )            *(tab+i)=*(values+i);        if(value_to_supress==*(values+i))            j=i;        else            *(tab+i-1)=*(values+i);        }    return tab;    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    int j;    float tab = (float*) malloc(n_values-1 * sizeof(float));    j=0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i)&& j==0 )            *(tab+i)=*(values+i);        if(value_to_supress==*(values+i))            j=i;        else            *(tab+i-1)=*(values+i);        }    return tab;    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    int nb=0;        for(int i=0; i<n_values; i++)    {        if(*(values+i) == value_ti_supress)        {            nb++;        }    }        float *newtab = (float*) malloc ((n_values-nb)*sizeof(float));        int j=0;    int cpt=0;        for(int i=0; i<n_values; i++)    {        if(*(values+i) != value_to_supress)        {            *(newtab+j) = *(values+i);            j++;        }    }    return newtab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int nb = 0;    for(int i =0; i<n_values; i++){        if (*(values + i) == value_to_supress){            nb++;        }    }        float *newtab = (float*) malloc ((n_values-nb) * sizeof(float));        int j = 0;    for(int i=0; i < n_values; i++){        if(*(values + i) != value_to_supress){          *(newtab+j) = *(values + i);          j++;        }    }        return newtab; }    
float *suppress_value(float value_to_supress, float *values, int n_values){    int i = 0, pos;    while (!pos){        if (value_to_supress == *(values + i)){            pos = i;        }        i++;    }    float *ntab = (float*) calloc(--n_values , sizeof(float *));    for (i = 0; i < --n_values; i++){        if (i != pos)            *(ntab + i) = *(values + i);            }    return ntab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int nb = 0;    for(int i =0; i<n_values; i++){        if (*(values + i) == value_to_supress){            nb++;        }    }        float *newtab = (float*) malloc ((n_values-nb) * sizeof(float));        int j = 0;    for(int i=0; i < n_values; i++){        if(*(values + i) != value_to_supress){          *(newtab+j) = *(values + i);          j++;        }    }        return newtab; }    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int j;    float tab = (float*) malloc(n_values-1 * sizeof(float));    j=0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i)&& j==0 )            *(tab+i)=*(values+i);        if(value_to_supress==*(values+i))            j=i;        else            *(tab+i-1)=*(values+i);        }    return tab;    }
float* suppress_value (float value_to_supress, float *values, int n_values){    float arr=NULL;    for (int i=0; i<=n_values; i++){        if (value_to_supress==*(values+i)){            for (int j = i; j <n_values ; j++){                *(values + j )= *(values + j+1);            }            float *arr = (float *)malloc (n_values-- * sizeof(float));            for (int j=0; j<n_values; j++){                *(arr+j) = *(values+j);            }            return arr;        }    }    return 0;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int nb = 0;    for(int i =0; i<n_values; i++){        if (*(values + i) == value_to_supress){            nb++;        }    }        float *newtab = (float*) malloc ((n_values-nb) * sizeof(float));        int j = 0;    for(int i=0; i < n_values; i++){        if(*(values + i) != value_to_supress){          *(newtab+j) = *(values + i);          j++;        }    }        return newtab; }    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int nb=0;        for(int i=0; i<n_values; i++)    {        if(*(values+i) == value_to_supress)        {            nb++;        }    }        float *newtab = (float*) malloc ((n_values-nb)*sizeof(float));        int j=0;    int cpt=0;        for(int i=0; i<n_values; i++)    {        if(*(values+i) != value_to_supress)        {            *(newtab+j) = *(values+i);            j++;        }    }    return newtab;}
float* supress_value(float value_to_supress, float *values, int n_values){    int j = 0;    float *tab = (float*) malloc(n_values-1 * sizeof(float));    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i) && j == 0)        {            *(tab+i) = *(values+i);        }        if (value_to_supress == *(values+i))        {            j = i;        }        else        {            *(tab+i-1) = *(values+i);        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    int i=0;    while  ((i<n_values)&&(value_to_supress != *(values+i))){        i++;    }    cpt=i;    for(i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    values=realloc(values,n_values-1);    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    int i=0;    while  ((i<n_values)&&(value_to_supress != *(values+i))){        i++;    }    cpt=i;    for(i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    values=realloc(values,n_values-1);    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int j;    float *tab = (float*) malloc(n_values-1 * sizeof(float));    j=0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i)&& j==0 )            *(tab+i)=*(values+i);        if(value_to_supress==*(values+i))            j=i;        else            *(tab+i-1)=*(values+i);        }    return tab;    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    int i=0;    while  ((i<n_values)&&(value_to_supress != *(values+i))){        i++;    }    cpt=i;    for(i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }    values=realloc(values,n_values-1);    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    values+n = NULL;    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    *(values+n) = NULL;    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0; i<n_values; i++)    {        if (value_to_supress = *(values+i))        {            for (int j=i; j<n_values-1; j++)            {                *(values+j) = *(values+j+1);                return (float*)realloc(values, n_values-1);            }        }    }    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    int i=0;    while  ((i<n_values)&&(value_to_supress != *(values+i))){        i++;    }    cpt=i;    for(i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }        values=(float*)realloc(values,n_values-1);    return values;}
float* supress_value (float value_to_supress, float  *values, int n_values){    int j;    float* tab = (float*) malloc(n_values-1 * sizeof(float));    j = 0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i) && j==0)        {            *(tab+i)=*(values+i);        }        if(value_to_supress==*(values+i))        {            j = i;        }        else        {            *(tab+i-1)=*(values+i);        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i = 0, j = 0, s = 0;    float * values2 = NULL;    if (n_values != 0) {        while ((i < n_values) && s==0) {            if ((*values+i)==value_to_supress)                s++;            else                    i++;        }    }        for (j=i; j<n_values-1; j++) {        *(values+j) = *(values+j+1);    }    return values;        /*if (i == n_values-1) {        printf("La valeur n'existe pas dans le tableau.");        exit(0);    }else{        float *values2 = (float *) malloc(n_values*sizeof(float));        for(k=0;k<i;k++)            *(values2+i) = *(values+i);        for (j=i;j<(n_values-1);j++)            *(values2+i) = *(values+i+1);    }    return values;    */}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int j;    float* tab = (float*) malloc(n_values-1 * sizeof(float));    j=0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i)&& j==0 )            *(tab+i)=*(values+i);        if(value_to_supress==*(values+i))            j=i;        else            *(tab+i-1)=*(values+i);        }    return tab;    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    int j;    float* tab = (float*) malloc(n_values-1 * sizeof(float));    j=0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i)&& j==0 )            *(tab+i)=*(values+i);        if(value_to_supress==*(values+i))            j=i;        else            *(tab+i-1)=*(values+i);        }    return tab;    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    int i=0;    while  ((i<n_values)&&(value_to_supress != *(values+i))){        i++;    }    cpt=i;    for(i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }        values=(float*)realloc(values,(n_values-1)*sizeof(float));    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int cpt;    int i=0;    while  ((i<n_values)&&(value_to_supress != *(values+i))){        i++;    }    cpt=i;    for(i=cpt;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }        values=(float*)realloc(values,(n_values-1)*sizeof(float));    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){   int indice;    for(int i=0;i<n_values;i++){        if (*(values+i)==value_to_supress){            *(values+i)=*(values+i+);        }    } }
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0; i<n_values; i++)    {        if (value_to_supress = *(values+i))        {            for (int j=i; j<n_values-1; j++)            {                *(values+j) = *(values+j+1);            }        }    }    values = (float*)realloc(values, (n_values-1)*sizeof(float));    return values}
float* suppress_value (float value_to_supress, float  *values, int n_values){   int indice;    for(int i=0;i<n_values;i++){        if (*(values+i)==value_to_supress){            *(values+i)=*(values+i+1);        }    } }
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0; i<n_values; i++)    {        if (value_to_supress = *(values+i))        {            for (int j=i; j<n_values-1; j++)            {                *(values+j) = *(values+j+1);            }        }    }    values = (float*)realloc(values, (n_values-1)*sizeof(float));    return values;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    /*while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       for(i=value_to_supress;i<=n_values;i++){        if(n_values==i){            *(values+i)='\0';        }        *(values+i)=*(values+i+1);        }    }}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    /*while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       for(i=value_to_supress;i<=n_values;i++){        if(n_values==i){            *(values+i)='\0';        }        *(values+i)=*(values+i+1);        }    }}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    /*while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       for(i=value_to_supress;i<=n_values;i++){        if(n_values==i){            *(values+i)='\0';        }        *(values+i)=*(values+i+1);        }    }}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    /*while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       for(i=value_to_supress;i<=n_values;i++){        if(n_values==i){            *(values+i)='\0';        }        *(values+i)=*(values+i+1);        }    }}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    /*while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       for(i=value_to_supress;i<=n_values;i++){        if(n_values==i){            *(values+i)='\0';        }        *(values+i)=*(values+i+1);        }    }}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    /*while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++        }        i++    }    for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       for(i=value_to_supress;i<=n_values;i++){        if(n_values==i){            *(values+i)='\0';        }        *(values+i)=*(values+i+1);        }    }}    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int j;    float* tab = (float*) malloc(n_values-1 * sizeof(float));    j = 0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i) && j == 0)        {            *(tab+i)=*(values+i);        }        if(value_to_supress==*(values+i))        {            j=i;        }        else        {            *(tab+i-1)=*(values+i);        }    return tab;    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int j;    float* tab = (float*) malloc(n_values-1 * sizeof(float));    j = 0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i) && j == 0)        {            *(tab+i) = *(values+i);        }        if(value_to_supress==*(values+i))        {            j=i;        }        else            *(tab+i-1)=*(values+i);        }    return tab;    }}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if(values!=NULL){    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    }        /*for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       }}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if(values!=NULL){    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    }        /*for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       }}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if(values!=NULL){    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    }        /*for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       }}    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n,t;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    *(values+n) = NULL;    for (i = n_values;i>n+1;i--){        t = *(values+i-1)        *(values+i-1) = *(values+i)        *(values+i) = t    }    return values;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if(values!=NULL){    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i))        {            s++;        }        i++;    }    }        /*for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       }}    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int j;    float* tab = (float*) malloc(n_values-1 * sizeof(float));    j = 0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i) && j == 0)        {            *(tab+i) = *(values+i);        }        if(value_to_supress==*(values+i))        {            j=i;        }        else        {            *(tab+i-1)=*(values+i);        }    }    return tab;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if(values!=NULL){    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s++;        }        i++;    }    }    return values;        /*for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       }}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if(values!=NULL){    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s++;        }        i++;    }    }    return values;        /*for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       }}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if(values!=NULL){    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s++;        }        i++;    }    }    return values;        /*for(j=i;j<n_values;j++){        *(values+j)=*(values+j+1);        */                       }}    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int nb=0;        for(int i=0; i<n_values; i++)    {        if(*(values+i) == value_to_supress)        {            nb++;        }    }        float *newtab = (float*) malloc ((n_values-nb)*sizeof(float));        int j=0;        for(int i=0; i<n_values; i++)    {        if(*(values+i) != value_to_supress)        {            *(newtab+j) = *(values+i);            j++;        }    }    return newtab;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if(values!=NULL){    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s++;        }        i++;    }    }    return values;        /*for(j=i;j<n_values-1;j++){        *(values+j)=*(values+j+1);        */                       }}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if(values!=NULL){    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s++;        }        i++;    }    }    return values;        for(j=i;j<n_values-1;j++){        *(values+j)=*(values+j+1);    }    return values;}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if(values!=NULL){    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s++;        }        i++;    }    }        for(j=i;j<n_values-1;j++){        *(values+j)=*(values+j+1);    }    return values;}    
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if(values!=NULL){    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s++;        }        i++;    }    }        for(j=i;j<n_values-1;j++){        *(values+j)=*(values+j+1);    }    return values;}    
float* suppress_value (float value_to_supress, float  *values, int n_values){    int j;    float* tab = (float*) malloc(n_values-1 * sizeof(float));    j = 0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i) && j == 0)        {            *(tab+i) = *(values+i);        }        if (value_to_supress == *(values+i))        {            j = i;        }        else        {            *(tab+i-1) =*(values+i);        }    }    return tab;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if(values!=NULL){    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s++;        }        else            i++;    }    }        for(j=i;j<n_values-1;j++){        *(values+j)=*(values+j+1);    }    return values;}    
float* suppress_value(float value_to_supress,float*values, int n_values){    for(int i=0;i<n_values;i++){        if (*(values+i)== value_to_supress){            for(int j=i;j<(n_values-1);j++){                *(values+j)=*(values+1+j);            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    float* tmp;    while  ((i<n_values)&&(value_to_supress != *(values+i))){        i++;    }    for(i<n_values-1;i++){        *(values+i)=*(values+i+1);    }        tmp=(float*)realloc(values,(n_values-1)*sizeof(float));    return tmp;}
// Il y a une erreur dans l'énoncé car il ne supprime pas seulement la première apparition mais toutes les occurrencesfloat* suppress_value (float value_to_supress, float  *values, int n_values){    int nb=0;        for(int i=0; i<n_values; i++)    {        if(*(values+i) == value_to_supress)        {            nb++;        }    }        float *newtab = (float*) malloc ((n_values-nb)*sizeof(float));        int j=0;        for(int i=0; i<n_values; i++)    {        if(*(values+i) != value_to_supress)        {            *(newtab+j) = *(values+i);            j++;        }    }    return newtab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    float* tmp;    while  ((i<n_values)&&(value_to_supress != *(values+i))){        i++;    }    for(;i<n_values-1;i++){        *(values+i)=*(values+i+1);    }        tmp=(float*)realloc(values,(n_values-1)*sizeof(float));    return tmp;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if(values!=NULL){    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s++;        }        else            i++;    }    }        for(j=i;j<n_values-1;j++){        *(values+j)=*(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if(values!=NULL){    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s++;        }        else            i++;    }    }        for(j=i;j<n_values-1;j++){        *(values+j)=*(values+j+1);    }    return values;}
float* suppress_value(float value_to_supress,float*values, int n_values){    for(int i=0;i<n_values;i++)    {        if (*(values+i)== value_to_supress)        {            for(int j=i;j<(n_values-1);j++)            {                *(values+j)=*(values+1+j);            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values || a != 1)    {        if (*(values + i) == value_to_supress))        {            for (int j = i; j<n_values-1; j++)                {                    *(val+i) = *(values+i+1);                }            a=0        }        j++;    }    float* suppress_value (float value_to_supress, float  *values, int n_values)}
float* supress_value (float value_to_supress, float *values, int n_values){    int i,j;    i=0;    while (i< n_values)    {        if (*(values+i)==value_to_supress)        {            for (j=0;j<n_values-1;j++)            {                *(values+j)=*(values+j+1);            }            n_values--;        }        else        {            i++;        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values || a != 1)    {        if (*(values + i) == value_to_supress))        {            for (int j = i; j<n_values-1; j++)                {                    *(val+i) = *(values+i+1);                }            a=0        }        i++;    }    float* suppress_value (float value_to_supress, float  *values, int n_values)}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if n != -1{        values2 = (float*) malloc(n_values*sizeof(float));        for(i=0;i<n_values;i++){            if i != n{                *(values2 + i) = *(values+ i);            }        }        for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    }    return values;}
float* suppress_value (float value_to_supress, float *values, int n_values){    int i,j;    i=0;    while (i< n_values)    {        if (*(values+i)==value_to_supress)        {            for (j=0;j<n_values-1;j++)            {                *(values+j)=*(values+j+1);            }            n_values--;        }        else        {            i++;        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if (n != -1){        values2 = (float*) malloc(n_values*sizeof(float));        for(i=0;i<n_values;i++){            if i != n{                *(values2 + i) = *(values+ i);            }        }        for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if (n != -1){        values2 = (float*) malloc(n_values*sizeof(float));        for(i=0;i<n_values;i++){            if (i != n){                *(values2 + i) = *(values+ i);            }        }        for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values || a != 1)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)                {                    *(val+i) = *(values+i+1);                }            a=0        }        i++;    }    float* suppress_value (float value_to_supress, float  *values, int n_values)}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values || a != 1)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)                {                    *(values+i) = *(values+i+1);                }            a=0        }        i++;    }    float* suppress_value (float value_to_supress, float  *values, int n_values)}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values || a != 1)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)                {                    *(values+i) = *(values+i+1);                }            a=0;        }        i++;    }    float* suppress_value (float value_to_supress, float  *values, int n_values)}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values || a != 1)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)                {                    *(values+i) = *(values+i+1);                }            a=0;        }        i++;    }    float* suppress_value (float value_to_supress, float  *values, int n_values);}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if (n != -1){        values2 = (float*) malloc(n_values*sizeof(float));        for(i=0;i<n_values;i++){            if (i != n){                *(values2 + i) = *(values+ i);            }            else{                i -= 1;            }        }        for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    }    return values;}
float *suppresse_value(float value_to_supress, float  *values, int n_values) {    int cpt;    float temp;    int i=0;    while((i<n_values) && (value_to_supress != *(value+i))){        i++;    }    cpt = i-1;    for (i=cpt;n_values-1;i++){        *(values+i)=*(values+i+1);            }    temp=(float*)realloc(values,(n_values-1)*sizeof(float));    return values;}
float *suppresse_value(float value_to_supress, float  *values, int n_values) {    int cpt;    float temp;    int i=0;    while((i<n_values) && (value_to_supress != *(values+i))){        i++;    }    cpt = i-1;    for (i=cpt;n_values-1;i++){        *(values+i)=*(values+i+1);            }    temp=(float*)realloc(values,(n_values-1)*sizeof(float));    return values;}
float *suppress_value(float value_to_supress, float  *values, int n_values) {    int cpt;    float temp;    int i=0;    while((i<n_values) && (value_to_supress != *(values+i))){        i++;    }    cpt = i-1;    for (i=cpt;n_values-1;i++){        *(values+i)=*(values+i+1);            }    temp=(float*)realloc(values,(n_values-1)*sizeof(float));    return values;}
float *suppress_value(float value_to_supress, float  *values, int n_values) {    int cpt;    float temp;    int i=0;    while((i<n_values) && (value_to_supress != *(values+i))){        i++;    }    cpt = i-1;    for (i=cpt;n_values-1;i++){        *(values+i)=*(values+i+1);            }    temp=(float*) realloc(values,(n_values-1)*sizeof(float));    return values;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc((n_values-1)(n_values*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float values[], int n_values){    float * tab;    tab = (float*)malloc(n_values*sizeof(float));    int cpt=0;    for (int i=0 ; i<n_values;i++){        if (*(values+i)!=value_to_supress){         *(tab+cpt) = *(values+i);            cpt++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if (n != -1){        values2 = (float*) malloc(n_values*sizeof(float));        i = 0        while i < n_values{            if (i != n){                *(values2 + i) = *(values+ i);                i += 1;        }        else{                i -= 1;                for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if (n != -1){        values2 = (float*) malloc(n_values*sizeof(float));        i = 0        while (i < n_values){            if (i != n){                *(values2 + i) = *(values+ i);                i += 1;        }        else{                i -= 1;                for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if (n != -1){        values2 = (float*) malloc(n_values*sizeof(float));        i = 0        while (i < n_values){            if (i != n){                *(values2 + i) = *(values+ i);                i += 1;        }        else{                i -= 1;        }        for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if (n != -1){        values2 = (float*) malloc(n_values*sizeof(float));        i = 0        while (i < n_values){            if (i != n){                *(values2 + i) = *(values+ i);                i += 1;        }        else{                i -= 1;        }        }        for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values || a != 1)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)                {                    *(values+i) = *(values+i+1);                }            a=0;        }        i++;    }    values = (float*)realloc(values, n_values*sizeof(float));}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values || a != 1)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)                {                    *(values+i) = *(values+i+1);                }            a=0;        }        i++;    }    values = (float*)realloc(values, n_values*sizeof(float));}
float *suppress_value(float value_to_supress, float  *values, int n_values) {    int cpt;    float temp;    int i=0;    while((i<n_values) && (value_to_supress != *(values+i))){        i++;    }    cpt = i-1;    for (;n_values-1;i++){        *(values+i)=*(values+i+1);    }    temp=(float*) realloc(values,(n_values-1)*sizeof(float));    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if (n != -1){        values2 = (float*) malloc(n_values*sizeof(float));        i = 0        while (i < n_values){            if (i != n){                *(values2 + i) = *(values+ i);                i += 1;        }        else{                i -= 1;        }        }    }        for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int nb=0;    for(int i=0;i<n_values;i++){        nb++;    }}float *newtab=(float*) malloc ((n_values-nb)) *sizeof(float));int j=0;int cnt=0;for(int i=0;i<n_values;i++){    if(*(values+i)!= value_to_supress){        *(newtab+j) = *(values+i);        j++;    }    return newtab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if (n != -1){        values2 = (float*) malloc(n_values*sizeof(float));        i = 0        while (i < n_values){            if (i != n){                *(values2 + i) = *(values+ i);                i += 1;            }            else{                i -= 1;            }        }    }        for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if (n != -1){        values2 = (float*) malloc(n_values*sizeof(float));        i = 0        while (i < n_values){            if (i != n){                *(values2 + i) = *(values+ i);                i += 1;            }            else{                i -= 1;            }        }    }        for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int nb=0;    for(int i=0;i<n_values;i++){        nb++;    }}float *newtab=(float*) malloc ((n_values-nb)) *sizeof(float));int j=0;int cnt=0;for(int i=0;i<n_values;i++){    if(*(values+i)!= value_to_supress){        *(newtab+j) = *(values+i);        j++;    }    }return newtab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int nb=0;    for(int i=0;i<n_values;i++){        if(*values+i) == value_to_supress{        nb++;    }}float *newtab=(float*) malloc ((n_values-nb)) *sizeof(float));int j=0;int cnt=0;for(int i=0;i<n_values;i++){    if(*(values+i)!= value_to_supress){        *(newtab+j) = *(values+i);        j++;    }    }return newtab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values || a != 1)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)                {                    *(values+i) = *(values+i+1);                }            a=0;        }        i++;    }    values = (float*)realloc(values, n_values*sizeof(float));    return values}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0; i<n_values; i++)    {        if (value_to_supress == *(values+i))        {            for (int j=i; j<n_values-1; j++)            {                *(values+j) = *(values+j+1);            }        }    }    values = (float*)realloc(values, (n_values-1)*sizeof(float));    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values || a != 1)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)                {                    *(values+i) = *(values+i+1);                }            a=0;        }        i++;    }    values = (float*)realloc(values, n_values*sizeof(float));    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int nb=0;    for(int i=0;i<n_values;i++){        if(*(values+i) == value_to_supress){        nb++;    }}float *newtab=(float*) malloc ((n_values-nb)) *sizeof(float));int j=0;int cnt=0;for(int i=0;i<n_values;i++){    if(*(values+i)!= value_to_supress){        *(newtab+j) = *(values+i);        j++;    }    }return newtab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int nb=0;    for(int i=0;i<n_values;i++){        if(*(values+i) == value_to_supress){        nb++;    }}float *newtab=(float*) malloc ((n_values-nb)) *sizeof(float));int j=0;int cnt=0;for(int i=0;i<n_values;i++){    if(*(values+i)!= value_to_supress){        *(newtab+j) = *(values+i);        j++;    }    }return newtab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if (n != -1){        values2 = (float*) malloc(n_values*sizeof(float));        i = 0;        while (i < n_values){            if (i != n){                *(values2 + i) = *(values+ i);                i += 1;            }            else{                i -= 1;            }        }    }        for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    }    return values;}
float* suppress_value(float value_to_supress,float*values, int n_values){    for(int i=0;i<n_values;i++){        if (*(values+i)== value_to_supress){            for(int j=i;j<(n_values-1);j++){                *(values+j)=*(values+1+j);            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int nb=0;    for(int i=0;i<n_values;i++){        if(*(values+i) == value_to_supress){        nb++;    }}float *newtab=(float*) malloc ((n_values-nb) *sizeof(float));int j=0;int cnt=0;for(int i=0;i<n_values;i++){    if(*(values+i)!= value_to_supress){        *(newtab+j) = *(values+i);        j++;    }    }return newtab;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float *values, int n_values){    int i = 0;    float *new_tab;    new_tab = (float*) malloc((n_values - 1) * sizeof(float));    if (new_tab == NULL)    {        printf("Mémoire insuffisante.\n");        exit(0);    }    while (i < n_values && *(values + i) != value_to_suppress)    {        *(new_tab + i) = *(values + i);        i++;    }    i++;    while (i < n_values)    {        *(new_tab + i - 1) = *(values + i);        i++;    }    return new_tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if (n != -1){        values2 = (float*) malloc(n_values*sizeof(float));        i = 0;        while (i < n_values){            if (i != n){                *(values2 + i) = *(values+ i);                i += 1;            }            else{                i -= 1;            }        }    }        for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    return values;}
float supress_value(float value_to_suppress, float *values, int n_values){            int * result = (int*) malloc(n_values-1 * sizeof(int));                    int supress = 0        int j=0;        for (int i = 0; i< n_values; i++){                        if (values[i] == value_to_supress && supress == 0){                supress = 1;                continue;            }            result[j] = values[i];            j++;        }                return result;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if (n != -1){        values2 = (float*) malloc(n_values*sizeof(float));        i = 0;        while (i < n_values-1){            if (i != n){                *(values2 + i) = *(values+ i);                i += 1;            }            else{                i -= 1;            }        }    }        for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    return values;}
float* suppress_value(float value_to_suppress, float *values, int n_values){            float * result = (float*) malloc(n_values-1 * sizeof(int));                    int supress = 0;        int j=0;        for (int i = 0; i< n_values; i++){                        if (*(values+i) == value_to_suppress && supress == 0){                supress = 1;                continue;            }            *(result + j)  = *(values +i);            j++;        }                return result;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float* suppress_value(float value_to_suppress, float *values, int n_values){            float * result = (float*) malloc(n_values-1 * sizeof(int));                    int supress = 0;        int j=0;        for (int i = 0; i< n_values; i++){                        if (*(values+i) == value_to_suppress && supress == 0){                supress = 1;                continue;            }            *(result + j)  = *(values +i);            j++;        }                return result;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n,c;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if (n != -1){        values2 = (float*) malloc(n_values*sizeof(float));        i = 0;        c=0;        while (c < n_values){            if (i != n){                *(values2 + i) = *(values+ c);                i += 1;            }            else{                i -= 1;            }            c+=1        }    }        for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i,n,c;    float* values2;    n=-1;    for (i=0;i<n_values;i++){        if (*(values+i)==value_to_supress && n == -1){            n = i;        }    }    if (n != -1){        values2 = (float*) malloc(n_values*sizeof(float));        i = 0;        c=0;        while (c < n_values){            if (i != n){                *(values2 + i) = *(values+ c);                i += 1;            }            else{                i -= 1;            }            c+=1;        }    }        for (i=0;i<n_values;i++){            *(values+i) = *(values2+i);        }    return values;}
float* suppress_value (float value_to_supress, float *values, int n_values){    int i,j;    i=0;    while (i< n_values)    {        if (*(values+i)==value_to_supress)        {            for (j=0;j<n_values-1;j++)            {                *(values+j)=*(values+j+1);            }            n_values--;        }        else        {            i++;        }    }}
float* suppress_value(float value_to_suppress, float *values, int n_values){            float * result = (float*) malloc(n_values-1 * sizeof(float));                    int supress = 0;        int j=0;        for (int i = 0; i< n_values; i++){                        if (*(values+i) == value_to_suppress && supress == 0){                supress = 1;                continue;            }            *(result + j)  = *(values +i);            j++;        }                return result;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float new_values;    for (int i=0; i<n_values; i++)    {        if (value_to_supress == *(values+i))        {            values = (int*)malloc(sizeof(int)*(n_values-i))            for (int j=i; j<n_values-1; j++)            {                *(values+j) = *(values+j+1);            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values)    {        if (*(values + i) == value_to_supress)        {            x = (float*)malloc(sizeof(float)n_values-1)            for (int j = 0; j<n_values; j++)            {                *(x+i) = *(values+i+1)            }            for (int j = i; j<n_values-1; j++)            {                *(x+i) = *(values+i+1);            }            return x        }        i++;    }    return values}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values)    {        if (*(values + i) == value_to_supress)        {            x = (float*)malloc(sizeof(float)n_values-1);            for (int j = 0; j<n_values; j++)            {                *(x+i) = *(values+i+1);            }            for (int j = i; j<n_values-1; j++)            {                *(x+i) = *(values+i+1);            }            return x;        }        i++;    }    return values;}
float* suppress_value(float value_to_supress,floatvalues, int n_values){    for(int i=0;i<n_values;i++){        if ((values+i)== value_to_supress){            for(int j=i;j<(n_values-1);j++){                (values+j)=(values+1+j);            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values)    {        if (*(values + i) == value_to_supress)        {            x = (float*)malloc(sizeof(float) n_values-1);            for (int j = 0; j<n_values; j++)            {                *(x+i) = *(values+i+1);            }            for (int j = i; j<n_values-1; j++)            {                *(x+i) = *(values+i+1);            }            return x;        }        i++;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values)    {        if (*(values + i) == value_to_supress)        {            x = (float*)malloc(sizeof(float) *n_values-1);            for (int j = 0; j<n_values; j++)            {                *(x+i) = *(values+i+1);            }            for (int j = i; j<n_values-1; j++)            {                *(x+i) = *(values+i+1);            }            return x;        }        i++;    }    return values;}
float* suppress_value(float value_to_supress,float *values, int n_values){    for(int i=0;i<n_values;i++){        if (*(values+i)== value_to_supress){            for(int j=i;j<(n_values-1);j++){                *(values+j)=*(values+1+j);            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float *new_values;    for (int i=0; i<n_values; i++)    {        if (value_to_supress == *(values+i))        {            new_values = (int*)malloc(sizeof(int)*(n_values-i))            for (int j=0; j<i; j++)            {                *(new_values+j) = *(values+j);            }            for (int j=i+1; j<n_values; j++)            {                *(new_values+j) = *(values+j);            }        }    }    return new_values;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i=0,s=0,e=0,j=i;    if(values!=NULL){    while (i<n_values && s==0)    {        if (value_to_supress==*(values+i)){            s++;        }        else            i++;    }    }        for(j=i;j<n_values-1;j++){        *(values+j)=*(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float *new_values;    for (int i=0; i<n_values; i++)    {        if (value_to_supress == *(values+i))        {            new_values = (float*)malloc(sizeof(float)*(n_values-i))            for (int j=0; j<i; j++)            {                *(new_values+j) = *(values+j);            }            for (int j=i+1; j<n_values; j++)            {                *(new_values+j) = *(values+j);            }        }    }    return new_values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values)    {        if (*(values + i) == value_to_supress)        {            x = (float*)malloc(sizeof(float) n_values-1);            for (int j = 0; j<n_values; j++)            {                *(x+i) = *(values+i+1);            }            for (int j = i; j<n_values-1; j++)            {                *(x+i) = *(values+i+1);            }            return x;        }        i++;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values)    {        if (*(values + i) == value_to_supress)        {            x = (float*)malloc(sizeof(float) *n_values-1);            for (int j = 0; j<n_values; j++)            {                *(x+i) = *(values+i+1);            }            for (int j = i; j<n_values-1; j++)            {                *(x+i) = *(values+i+1);            }            return x;        }        i++;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float *new_values;    for (int i=0; i<n_values; i++)    {        if (value_to_supress == *(values+i))        {            new_values = (float*)malloc(sizeof(float)*(n_values-i))            for (int j=0; j<i; j++)            {                *(new_values+j) = *(values+j);            }            for (int j=i+1; j<n_values; j++)            {                *(new_values+j) = *(values+j);            }        }    }    return new_values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int a = 1, i = 0;    while (i<n_values)    {        if (*(values + i) == value_to_supress)        {            x = (float*)malloc(sizeof(float) *n_values-1);            for (int j = 0; j<n_values; j++)            {                *(x+j) = *(values+j+1);            }            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            return x;        }        i++;    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int i;        for (i = 0; i < n_values; i ++){        if(*(values + i) == value_to_supress){            *(values + i) = *(values + i + 1)        }    }return *values;    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int i;        for (i = 0; i < n_values; i ++){        if(*(values + i) == value_to_supress){            *(values + i) = *(values + i + 1);        }    }return *values;    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int i;        for (i = 0; i < n_values; i ++){        if(*(values + i) == value_to_supress){            *(values + i) = *(values + i + 1);        }    }return values;    }
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0; i<n_values; i++)    {        if (value_to_supress = *(values+i))        {            for (int j=i; j<n_values-1; j++)            {                *(values+j) = *(values+j+1);            }        }    }    values = (float*)realloc(values, (n_values-1)*sizeof(float));    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    x = (float*)malloc(sizeof(float) *n_values-1);    int a = 1, i = 0;    while (i<n_values)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            return x;        }        *(x+i) = *(values+i+1);        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    x = (float*)malloc(sizeof(float) *n_values-1);    int a = 1, i = 0;    while (i<n_values)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            return x;        }        *(x+i) = *(values+i+1);        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for(int i=0;i<n_values;i++){        if(*(values+i)== value_to_suppres){            for(int j=i;j<(n_values-1);j++){                *(values+j)=*(values+1+j);            }        }    }    }return values;
float* suppress_value (float value_to_supress, float  *values, int n_values){    for(int i=0;i<n_values;i++){        if(*(values+i)== value_to_suppres){            for(int j=i;j<(n_values-1);j++){                *(values+j)=*(values+1+j);            }        }    }return values;  }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            return x;        }        *(x+i) = *(values+i+1);        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            return x;        }        *(x+i) = *(values+i+1);        i++;    }    return x;}
float* suppress_value (float value_to_supress, float *values, int n_values){    int i,j;    i=0;    while (i< n_values-1)    {        if (*(values+i)==value_to_supress)        {            for (j=0;j<n_values-1;j++)            {                *(values+j)=*(values+j+1);            }            n_values--;        }        else        {            i++;        }    }}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float *new_values = (float*)malloc(sizeof(float)*(n_values-1));        for (int i=0; i<n_values; i++)    {        if (value_to_supress == *(values+i))        {            for (int j=0; j<i; j++)            {                *(new_values+j) = *(values+j);            }            for (int j=i+1; j<n_values; j++)            {                *(new_values+j-1) = *(values+j);            }        }    }    return new_values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values)    {        *(x+i) = *(values+i+1);        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            return x;        }                i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values)    {        *(x+i) = *(values+i+1);        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            return x;        }                i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values)    {        *(x+i) = *(values+i+1);        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            return x;        }                i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values)    {        *(x+i) = *(values+i+1);        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            return x;        }                i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            return x;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            return x;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for(int i=0;i<n_values;i++){        if(*(values+i)== value_to_suppres){            for(int j=i;j<(n_values-1);j++){                *(values+j)=*(values+1+j);            }        }    }    return values;  }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            return x;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    float *new_values = (float*)malloc(sizeof(float)*(n_values-1));        for (int i=0; i<n_values; i++)    {        if (value_to_supress == *(values+i))        {            for (int j=0; j<i; j++)            {                *(new_values+j) = *(values+j);            }            for (int j=i+1; j<n_values; j++)            {                *(new_values+j-1) = *(values+j);            }            return new_values;        }    }    return values;}
null
float* suppress_value (float value_to_supress, float  *values, int n_values) {    return null;    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    return NULL;    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a = 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            a = 1        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a = 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j+1) = *(values+j+2);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j+1) = *(values+j+2);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j+1) = *(values+j+2);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j+1) = *(values+j+2);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+2);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+2);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+2);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values+j+1);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<n_values-1; j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value(float value_to_suppress, float *values, int n_values){            float * result = (float*) malloc(n_values-1 * sizeof(float));                    int supress = 0;        int j=0;        for (int i = 0; i< n_values; i++){                        if (*(values+i) == value_to_suppress && supress == 0){                supress = 1;                continue;            }            *(result + j)  = *(values +i);            j++;        }                return result;}
float average(float values[], int n_values) {    float res = 0;    for (int i = 0; i < n_values; i++){        res += values[i];    }    return res;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<(n_values - 1); j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<(n_values - 1); j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values+i+1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<(n_values - 1); j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int i, j;        for (i = 0; i < n_values; i ++){                if(*(values + i) == value_to_supress){                        for (j = i; j < n_values; j ++){                                if(j < n_values - 1){                                       *(values + j) = *(values + j + 1);                 }                                else{                                        *(values + j) = 0                }            }        }    }return values;    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i-1; j<(n_values - 1); j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i-1; j<(n_values - 1); j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int i, j;        for (i = 0; i < n_values; i ++){                if(*(values + i) == value_to_supress){                        for (j = i; j < n_values; j ++){                                if(j < n_values - 1){                                       *(values + j) = *(values + j + 1);                 }                                else{                                        *(values + j) = 0;                }            }        }    }return values;    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i-1; j<(n_values - 1); j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<(n_values - 1); j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<(n_values - 1); j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int i, j;        for (i = 0; i < n_values; i ++){                if(*(values + i) == value_to_supress){                        for (j = i; j < n_values; j ++){                                if(j < n_values - 1){                                       *(values + j) = *(values + j + 1);                 }                                else{                                        *(values + j) = 0;                }            }        }    }return *values;    }
float suppress_value (float value_to_supress, float  *values, int n_values) {        int i, j;        for (i = 0; i < n_values; i ++){                if(*(values + i) == value_to_supress){                        for (j = i; j < n_values; j ++){                                if(j < n_values - 1){                                       *(values + j) = *(values + j + 1);                 }                                else{                                        *(values + j) = 0;                }            }        }    }return *values;    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int i, j;        for (i = 0; i < n_values; i ++){                if(*(values + i) == value_to_supress){                        for (j = i; j < n_values; j ++){                                if(j < n_values - 1){                                       *(values + j) = *(values + j + 1);                 }                                else{                                        *(values + j) = 0;                }            }        }    }return values;    }
void shift_values_to_left(float* values, int n_values, int pos){    float cpt = *values;    for (int i = pos; i<n_values-1; i++)    {        *(values+i) = *(values+i+1);    }    *(values + n_values-1) = cpt;}float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            shift_values_to_left(x, n_values, i)            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
void shift_values_to_left(float* values, int n_values, int pos){    float cpt = *values;    for (int i = pos; i<n_values-1; i++)    {        *(values+i) = *(values+i+1);    }    *(values + n_values-1) = cpt;}float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            shift_values_to_left(x, n_values, i);            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
void shift_values_to_left(float* values, int n_values, int pos){    for (int i = pos; i<n_values-1; i++)    {        *(values+i) = *(values+i+1);    }}float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            shift_values_to_left(x, n_values, i);            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
void shift_values_to_left(float* values, int n_values, int pos){    for (int i = pos; i<n_values-1; i++)    {        *(values+i) = *(values+i+1);    }}float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            shift_values_to_left(x, n_values, i);            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
void shift_values_to_left(float* values, int n_values, int pos){    for (int i = pos; i<n_values-1; i++)    {        *(values+i) = *(values+i+1);    }}float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            shift_values_to_left(x, n_values-1, i);            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
void shift_values_to_left(float* values, int n_values, int pos){    for (int i = pos; i<n_values-1; i++)    {        *(values+i) = *(values+i+1);    }}float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            shift_values_to_left(x, n_values-1, i);            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
void shift_values_to_left(float* values, int n_values, int pos){    for (int i = pos; i<n_values-1; i++)    {        *(values+i) = *(values+i+1);    }}float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            shift_values_to_left(x, n_values-1, *i);            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
void shift_values_to_left(float* values, int n_values, int pos){    for (int i = pos; i<n_values-1; i++)    {        *(values+i) = *(values+i+1);    }}float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            shift_values_to_left(x, n_values-1, i);            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0;i<n_values;i++){        if(*(values+i)== values_to_supress){            for(int j=i;j<(n_values-1);j++){                *(values+j)=*(values+1+j);            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0;i<n_values;i++){        if(*(values+i)==values_to_supress){            for(int j=i;j<(n_values-1);j++){                *(values+j)=*(values+1+j);            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0;i<n_values;i++){        if(*(values+i)==*values_to_supress){            for(int j=i;j<(n_values-1);j++){                *(values+j)=*(values+1+j);            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0;i<n_values;i++){        if(*(values+i)== values_to_supress){            for(int j=i;j<(n_values-1);j++){                *(values+j)=*(values+1+j);            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0;i<n_values;i++){        if (*(values+i)== values_to_supress){            for(int j=i;j<(n_values-1);j++){                *(values+j)=*(values+1+j);            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for (int i=0;i<n_values;i++){        if (*(values+i)== value_to_supress){            for(int j=i;j<(n_values-1);j++){                *(values+j)=*(values+1+j);            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int i, j;        for (i = 0; i < n_values; i ++){                if(*(values + i) == value_to_supress){                        for (j = i; j < n_values; j ++){                                if(j < n_values - 1){                                       *(values + j) = *(values + j + 1);                 }                                else{                                        *(values + j) = 0;                }            }        }    }return values+3;    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int i, j;        for (i = 0; i < n_values; i ++){                if(*(values + i) == value_to_supress){                        for (j = i; j < n_values; j ++){                                if(j < n_values - 1){                                       *(values + j) = *(values + j + 1);                 }                                else{                                        *(values + j) = 0;                }            }        }    }return values;    }
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<(n_values - 1); j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<(n_values - 1); j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<(n_values - 1); j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<(n_values - 1); j++)            {                *(x+j+1) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<(n_values - 1); j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* x;    int i = 0, a=0;    x = (float*)malloc(sizeof(float) *n_values-1);    while (i<n_values || a == 0)    {        if (*(values + i) == value_to_supress)        {            for (int j = i; j<(n_values - 1); j++)            {                *(x+j) = *(values + j + 1);            }            a = 1;        }        else        {            *(x+i) = *(values + i + 1);        }        i++;    }    return x;}
float* suppress_value (float value_to_supress, float  values, int n_values) {    int i, j;    for (i = 0; i < n_values; i ++){        if((values + i) == value_to_supress){            for (j = i; j < n_values; j ++){                if(j < n_values - 1){                   *(values + j) = *(values + j + 1);                 }                else{                    *(values + j) = 0;                }            }        }    }return values;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int i, j;    for (i = 0; i < n_values; i ++){        if((values + i) == value_to_supress){            for (j = i; j < n_values; j ++){                if(j < n_values - 1){                   *(values + j) = *(values + j + 1);                 }                else{                    *(values + j) = 0;                }            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int i, j;    for (i = 0; i < n_values; i ++)    {        if((values + i) == value_to_supress)        {            for (j = i; j < n_values; j ++)            {                if(j < n_values - 1)                {                   *(values + j) = *(values + j + 1);                 }                else                {                    *(values + j) = 0;                }            }        }    }    return values;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int i, j;    for (i = 0; i < n_values; i ++)    {        if((values + i) == value_to_supress)        {            for (j = i; j < n_values; j ++)            {                if(j < n_values - 1)                {                   *(values + j) = *(values + j + 1);                 }                else                {                    *(values + j) = 0;                }            }        }    }    return *values;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int i, j;    for (i = 0; i < n_values; i ++)    {        if (values == value_to_supress)         break;              if (i< n_values)          values= values -1       for (j = i; j < n_values; j ++)       {           *(values + j) = *(values + j + 1);       }                        return *values;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int i, j;    for (i = 0; i < n_values; i ++)    {        if (values == value_to_supress)         break;              if (i< n_values)          values= values -1       for (j = i; j < n_values; j ++)       {           *(values + j) = *(values + j + 1);       }                        return values;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int i, j;    for (i = 0; i < n_values; i ++)    {        if (values == value_to_supress)         break;       }    if (i< n_values)    {       values= values -1       for (j = i; j < n_values; j ++)       {           *(values + j) = *(values + j + 1);       }           }             return n_values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    for(int i=0;i<n_values;i++){        if(*(values+i)== value_to_suppres){            for(int j=i;j<(n_values-1);j++){                *(values+j)=*(values+1+j);            }        }    }    return values;  }
float* suppress_value (float value_to_supress, float  *values, int n_values){    for(int i=0;i<n_values;i++){        if (*(values+i)== value_to_suppres){            for(int j=i;j<(n_values-1);j++){                *(values+j)=*(values+1+j);            }        }    }    return values;  }
float* suppress_value(float value_to_supress, float *values, int n_values){    int cpt =0, trouv = 0;    while(cpt<n_values && trouv ==0)    {        if(value_to_supress == *(values+cpt))        {            trouv =1;        }        else        {            cpt++;        }    }    if (trouv== 0)    {        printf("Pas de valeur\n");    }    else    {         for (int i=cpt;i<n_values-1;i++)        {            *(values+i) = *(values+i+1);        }        n_values--;    }    return values;}
float* suppress_value(float value_to_suppress, float *values, int n_values){            float * result = (float*) malloc(n_values-1 * sizeof(float));                    int supress = 0;        int j=0;        for (int i = 0; i< n_values; i++){                        if (*(values+i) == value_to_suppress && supress == 0){                supress = 1;                continue;            }            *(result + j)  = *(values +i);            j++;        }                return result;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int tab=*values;    for (int i=0; i< n_values; i++)    {        *(values+i)=*(values+(i+1));    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float tab=*values;    for (int i=0; i< n_values; i++)    {        *(values+i)=*(values+(i+1));    }    return tab;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    float tab=*values;    for (int i=0; i< n_values; i++)    {        *(values+i)=*(values+(i+1));    }    return tab;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    float tab;    int j = 0        tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if (*(values+i) !=  value_to_supress)        {                *(tab+j) = *(values+i) ;                j++        }    }    return tab;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    float tab;    int j = 0;        tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if (*(values+i) !=  value_to_supress)        {                *(tab+j) = *(values+i) ;                j++;        }    }    return tab;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    float tab;    int j = 0;        *tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if (*(values+i) !=  value_to_supress)        {                *(tab+j) = *(values+i) ;                j++;        }    }    return tab;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    float *tab;    int j = 0;        tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if (*(values+i) !=  value_to_supress)        {                *(tab+j) = *(values+i) ;                j++;        }    }    return tab;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    float *tab;    int j = 0;        tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if (*(values+i) !=  value_to_supress)        {                *(tab+j) = *(values+i) ;                j++;        }    }    return *tab;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    float *tab;    int j = 0;        tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if (*(values+i) !=  value_to_supress)        {                *(tab+j) = *(values+i) ;                j++;        }    }    return *tab();}
float suppress_value (float value_to_supress, float  *values, int n_values) {    float *tab;    int j = 0;        tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if (*(values+i) !=  value_to_supress)        {                *(tab+j) = *(values+i) ;                j++;        }    }    return *tab;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    float *tab;    int j = 0;        tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if (*(values+i) !=  value_to_supress)        {                *(tab+j) = *(values+i) ;                j++;        }    }    return 1;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    float *tab;    int j = 0;        tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if (*(values+i) !=  value_to_supress)        {                *(tab+j) = *(values+i) ;                j++;        }    }    return 1;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    // float *tab;    float cpt = *values;     float *tab ;    int j = 0;        tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if (*(values+i) !=  value_to_supress)        {                *(tab+j) = *(values+i) ;                j++;        }    }    return 1;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    // float *tab;    float cpt = *values;     float *tab ;    int j = 0;        tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if (*(values+i) !=  value_to_supress)        {                *(tab+j) = *(values+i) ;                j++;        }    }    return 1;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    // float *tab;    float cpt = *values;     float *tab ;    int j = 0;    //    tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if (*(values+i) !=  value_to_supress)        {      //          *(tab+j) = *(values+i) ;                j++;        }    }    return 1;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    // float *tab;    float cpt = *values;     float *tab ;    int j = 0;    //    tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if (*(values+i) !=  value_to_supress)        {      //          *(tab+j) = *(values+i) ;                j++;        }    }    return 1;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    // float *tab;    float cpt = *values;  //   float *tab ;    int j = 0;    //    tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if (*(values+i) !=  value_to_supress)        {      //          *(tab+j) = *(values+i) ;                j++;        }    }    return 1;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    // float *tab;    float cpt = *values;  //   float *tab ;    int j = 0;    //    tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {    //    if (*(values+i) !=  value_to_supress)        {      //          *(tab+j) = *(values+i) ;          //      j++;        }    }    return 1;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    // float *tab;    float cpt = *values;  //   float *tab ;    int j = 0;    //    tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {    //    if (*(values+i) !=  value_to_supress)        {      //          *(tab+j) = *(values+i) ;          //      j++;        }    }    return ;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    // float *tab;    float cpt = *values;  //   float *tab ;    int j = 0;    //    tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {    //    if (*(values+i) !=  value_to_supress)        {      //          *(tab+j) = *(values+i) ;          //      j++;        }    }    return 1;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    // float *tab;//    float cpt = *values;  //   float *tab ;    int j = 0;    //    tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {    //    if (*(values+i) !=  value_to_supress)        {      //          *(tab+j) = *(values+i) ;          //      j++;        }    }    return 1;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    // float *tab;//    float cpt = *values;  //   float *tab ;    int j = 0;    //    tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {    //    if (*(values+i) !=  value_to_supress)        {      //          *(tab+j) = *(values+i) ;          //      j++;        }    }    return value_to_supress;}
float suppress_value (float value_to_supress, float  *values, int n_values) {    // float *tab;//    float cpt = *values;  //   float *tab ;    int j = 0;    //    tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {    //    if (*(values+i) !=  value_to_supress)        {      //          *(tab+j) = *(values+i) ;          //      j++;        }    }    return value_to_supress;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    // float *tab;//    float cpt = *values;  //   float *tab ;    int j = 0;    //    tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {    //    if (*(values+i) !=  value_to_supress)        {      //          *(tab+j) = *(values+i) ;          //      j++;        }    }    return 1;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    // float *tab;//    float cpt = *values;     float *tab ;    int j = 0;        tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if (*(values+i) !=  value_to_supress)        {                *(tab+j) = *(values+i) ;                j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    // float *tab;//    float cpt = *values;     float *tab ;    int j = 0;    int cpt = 0;        tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if ( cpt ==0)        {                if (*(values+i) ==  value_to_supress)            {                cpt = 1;            }            else            {                    *(tab+j) = *(values+i) ;                    j++;            }        }        else            *(tab+j) = *(values+i) ;            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    // float *tab;//    float cpt = *values;     float *tab ;    int j = 0;    int cpt = 0;        tab=(float*)malloc(sizeof(float)*n_values);           for (int i=0; i< n_values; i++)    {        if ( cpt ==0)        {                if (*(values+i) ==  value_to_supress)            {                cpt = 1;            }            else            {                    *(tab+j) = *(values+i) ;                    j++;            }        }        else        {            *(tab+j) = *(values+i) ;            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int i, j;    for (i = 0; i < n_values; i ++)    {        if (values == value_to_supress)         break;       }    if (i< n_values)    {       values= values -1       for (j = i; j < n_values; j ++)       {           *(values + j) = *(values + j + 1);       }           }             return n_values;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int i, j;    for (i = 0; i < n_values; i ++)    {        if (values == value_to_supress)         break;       }    if (i< n_values)    {       values= values -1;       for (j = i; j < n_values; j ++)       {           *(values + j) = *(values + j + 1);       }           }             return n_values;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {        int i, j;        for (i = 0; i < n_values; i ++){                if(*(values + i) == value_to_supress){                        for (j = i; j < n_values; j ++){                                if(j < n_values - 1){                                       *(values + j) = *(values + j + 1);                 }                                else{                                        *(values + j) = 0;                }            }        }    }return values;    }
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j=1;    printf("Value to suppress: %f \n", value_to_suppress);        for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++)  	{  	    for(i=0;i<n_values;i++)            printf("%f \n", *(values+i));                    while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%f \n", *(values+i));    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j=1;    printf("Value to suppress: %f \n", value_to_suppress);        while (i < n && *(arr + i) != val)        i++;    if (*(arr + i) == val) {        new_arr = (int*) malloc ((n - 1) * sizeof(int));        for (j = 0; j < i; j++)            *(new_arr + i) = *(arr + i + 1);        for (j = i; j < n - 1; j++)            *(new_arr + i) = *(arr + i + 1);    }    return values;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j=1;    printf("Value to suppress: %f \n", value_to_suppress);        while (i < n_values && *(values + i) != val)        i++;    if (*(values + i) == value_to_suppress) {        new_arr = (int*) malloc ((n_values - 1) * sizeof(int));        for (j = 0; j < i; j++)            *(new_arr + i) = *(values + i + 1);        for (j = i; j < n_values - 1; j++)            *(new_arr + i) = *(values + i + 1);    }    return new_arr;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j=1;    int new_arr[100];    printf("Value to suppress: %f \n", value_to_suppress);        while (i < n_values && *(values + i) != val)        i++;    if (*(values + i) == value_to_suppress) {        new_arr = (int*) malloc ((n_values - 1) * sizeof(int));        for (j = 0; j < i; j++)            *(new_arr + i) = *(values + i + 1);        for (j = i; j < n_values - 1; j++)            *(new_arr + i) = *(values + i + 1);    }    return new_arr;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j=1;    int new_arr[100];    printf("Value to suppress: %f \n", value_to_suppress);        while (i < n_values && *(values + i) != val)        i++;    if (*(values + i) == value_to_suppress) {        new_arr = (int*) malloc ((n_values - 1) * sizeof(int));        for (j = 0; j < i; j++)            *(new_arr + i) = *(values + i + 1);        for (j = i; j < n_values - 1; j++)            *(new_arr + i) = *(values + i + 1);    }    return new_arr;}
#include <stdio.h>#include <stdlib.h>float* suppress_value(float value_to_suppress, float values[], int n_values){    int i, j=1;    printf("Value to suppress: %f \n", value_to_suppress);        for (i = 0; i < n_values && *(values+i) != value_to_suppress; i++)  	{  	    for(i=0;i<n_values;i++)            printf("%f \n", *(values+i));                    while(j < n_values)        {            *(values+j) = *(values+j+1);            j++;        }    }        printf("The array contains %d values\n", n_values);    for(i=0;i<n_values;i++)        printf("%f \n", *(values+i));    return values;}
float* suppress_value (float value_to_supress, float *values, int n_values){    float*tab;    int j,cpt,i;    j=0;    i=0;    tab= (float*)malloc(sizeof(float)*n_values);    for(i=0;i<n_values;i++)    {        if (cpt==0)        {            if (*(values+i)==value_to_supress)            {                cpt=1;            }            else            {                *(tab+j)=*(values+i);                j++;            }        }        else        {            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float *values, int n_values){    float*tab;    int j,cpt,i;    j=0;    i=0;    tab= (float*)malloc(sizeof(float)*n_values-1);    for(i=0;i<n_values;i++)    {        if (cpt==0)        {            if (*(values+i)==value_to_supress)            {                cpt=1;            }            else            {                *(tab+j)=*(values+i);                j++;            }        }        else        {            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int tab[n_values-1];    for (i=0;i<n_values;i++)    {        while (i!= value_to_supress)        {            tab[i]=*(values+i)        }        }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int tab[n_values-1];    for (i=0;i<n_values;i++)    {        while (i!= value_to_supress)        {            tab[i]=*(values+i)        }        }    return tab}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int tab[n_values-1];    for (i=0;i<n_values;i++)    {        while (i!= value_to_supress)        {            tab[i]=*(values+i)        }        }    return (tab);}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int* tab;    for (i=0;i<n_values;i++)    {        while (i!= value_to_supress)        {            *(tab+i)=*(values+i)        }        }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int* tab;    for (i=0;i<n_values;i++)    {        while (i!= value_to_supress)        {            *(tab+i)=*(values+i);        }        }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int* tab;    for (int i=0;i<n_values;i++)    {        while (i!= value_to_supress)        {            *(tab+i)=*(values+i);        }        }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int* tab;    for (int i=0;i<n_values;i++)    {        while (i!= value_to_supress)        {            *(tab+i)=*(values+i);        }        }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    float* tab;    for (int i=0;i<n_values;i++)    {        while (i!= value_to_supress)        {            *(tab+i)=*(values+i);        }        }}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int tab[n_values-1];    for (i=0;i<n_values;i++)    {        while (i!= value_to_supress)        {            tab[i]=*(values+i)        }        }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int *tab[n_values-1];    for (i=0;i<n_values;i++)    {        while (i!= value_to_supress)        {            *tab[i]=*(values+i)        }        }    return tab;}
float* suppress_value (float value_to_supress, float *values, int n_values){    float*tab;    int j,cpt,i;    j=0;    i=0;    cpt=0;    tab= (float*)malloc(sizeof(float)*n_values-1);    for(i=0;i<n_values;i++)    {        if (cpt==0)        {            if (*(values+i)==value_to_supress)            {                cpt=1;            }            else            {                *(tab+j)=*(values+i);                j++;            }        }        else        {            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    values=(float*)malloc(n_values*sizeof(float));    int i=O;    while(i<n_values && *(values+i) != value_to_supress){        i++;    }    if(i==n_values){        printf("%f n'existe pas dans le tableau", value_to_supress);    }    else        for(i;i<n_values;i++){            *(values+i)=*(values+i+1);            n_values--;        }    return 0;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int j;    float *tab = (float*) malloc(n_values-1 * sizeof(float));    j=0;    for (int i = 0; i < n_values; i++)    {        if (value_to_supress != *(values+i)&& j==0 )            *(tab+i)=*(values+i);        if(value_to_supress==*(values+i))            j=i;        else            *(tab+i-1)=*(values+i);        }    return tab;    }
float* suppress_value (float value_to_supress, float values[], int n_values){    int i=0, j=0;    while(i<n_values && *(values+i)!=value_to_supress){        i++;    }    for(j=i;j<n_values-1;j++){    *(values+j) = *(values+j+1);    }    return values;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    int * T;    T = (int*)malloc(sizeof(int)*n_values-1)    for (j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    for (int j =i;j<n_values;j++)    {        *(T+j)=*(values+j);    }    return T;
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    int * T;    T = (int*)malloc(sizeof(int)*n_values-1);    for (j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    for (int j =i;j<n_values;j++)    {        *(T+j)=*(values+j);    }    return T;
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    int * T;    T = (int*)malloc(sizeof(int)*n_values-1);    for (int j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    for ( j =i;j<n_values;j++)    {        *(T+j)=*(values+j);    }    return T;
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    for ( j =i;j<n_values;j++)    {        *(T+j)=*(values+j);    }    return T;
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    for ( j =i;j<n_values;j++)    {        *(T+j)=*(values+j);    }    return T;}
float* suppress_value (float value_to_supress, float  *values, int n_values) {    int i=0;    if (values != NULL){        while(i < n_values && *(values + i) != value_to_supress)            i++;        if (i != n_values){            for(i ; i < n_values-1 ; i++)                *(values + i) = *(values + i + 1);            n_values--;        }    }    return values;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    for ( j=i-1;j<n_values;j++)    {        *(T+j)=*(values+j);    }    return T;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    i++;    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    for ( j=i;j<n_values;j++)    {        *(T+j)=*(values+j);    }    return T;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    i++;    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    for ( j=i;j<n_values;j++)    {        *(T+j)=*(values+j);    }    return T;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    i++;    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    for ( j=i+1;j<n_values;j++)    {        *(T+j)=*(values+j);    }    return T;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    i++;    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    for ( j=i+1;j<n_values;j++)    {        *(T+j)=*(values+j);    }    return T;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    i++;    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    for ( j=i+1;j<n_values;j++)    {        *(T+j)=*(values+j);    }    return T;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    i++;    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<=i;j++)    {        *(T+j)=*(values+j);    }    for ( j=i+1;j<n_values;j++)    {        *(T+j)=*(values+j);    }    return T;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    i++;    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<=i;j++)    {        *(T+j)=*(values+j);    }    for ( j=i+1;j<n_values-1;j++)    {        *(T+j)=*(values+j);    }    return T;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    i++;    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    for ( j=i+1;j<n_values-1;j++)    {        *(T+j)=*(values+j);    }    return T;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    i++;    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    for ( j=i+1;j<n_values-1;j++)    {        *(T+j)=*(values+j);    }    return T;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    i++;    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    return T;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    i++;    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    return T;}
float* suppress_value (float value_to_supress, float* values, int n_values) {    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    i++;    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<i;j++)    {        *(T+j)=*(values+j);    }    return T;}
float* suppress_value(float value_to_supress, float* values, int n_values){    int i = 0;    int j=0;    while(*(values+i)!=value_to_supress && i<n_values)    {        i++;    }    float * T;    T = (float*)malloc(sizeof(float)*n_values-1);    for (int j=0;j<i;j++)    {        *(T+j)=*(values+j);    }for ( j=i;j<n_values-1;j++)    {        *(T+j)=*(values+j+1);    }    return T;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }    }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }    }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *tableau, int tailleTableau){    for(int i=0; i < tailleTableau; i++){        if (*(tableau + i) == value_to_supress){                            }        }    }    tailleTableau -= 1;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int occ = 0;    int i=0;    while(i<n_values && occ=0){        if (*(values+i) == value_to_supress){            occ=i;        i++        }    }    int n = n_values-1;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<occ ;i++){        *(tab+j)=*(values+i);        j++;        }    for(int i=occ+1; i<n_values-1; i++)        *(tab+j)=*v(values+i);        j++    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int occ = 0;    int i=0;    while(i<n_values && occ=0){        if (*(values+i) == value_to_supress){            occ=i;        i++;        }    }    int n = n_values-1;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<occ ;i++){        *(tab+j)=*(values+i);        j++;        }    for(int i=occ+1; i<n_values-1; i++)        *(tab+j)=*v(values+i);        j++    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int occ = 0;    int i=0;    while(i<n_values && occ=0){        if (*(values+i) == value_to_supress){            occ=i;        i++;        }    }    int n = n_values-1;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<occ ;i++){        *(tab+j)=*(values+i);        j++;        }    for(int i=(occ+1); i<n_values-1; i++)        *(tab+j)=*v(values+i);        j++    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int occ = 0;    int i=0;    while(i<n_values && occ=0){        if (*(values+i) == value_to_supress){            occ=i;        i++;        }    }    int n = n_values-1;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<occ ;i++){        *(tab+j)=*(values+i);        j++;        }    for(int i=(occ+1); i<n_values-1; i++)        *(tab+j)=*(values+i);        j++    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int occ = 0;    int i=0;    while(i<n_values && occ){        if (*(values+i) == value_to_supress){            occ=i;        i++;        }    }    int n = n_values-1;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<occ ;i++){        *(tab+j)=*(values+i);        j++;        }    for(int i=(occ+1); i<n_values-1; i++)        *(tab+j)=*(values+i);        j++    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int occ = 0;    int i=0;    while(i<n_values && occ){        if (*(values+i) == value_to_supress){            occ=i;        i++;        }    int n = n_values-1;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<occ ;i++){        *(tab+j)=*(values+i);        j++;        }    for(int i=(occ+1); i<n_values-1; i++)        *(tab+j)=*(values+i);        j++    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int occ = 0;    int i=0;    while(i<n_values && occ){        if (*(values+i) == value_to_supress){            occ=i;        i++;        }    int n = n_values-1;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<occ ;i++){        *(tab+j)=*(values+i);        j++;        }    for(int i=(occ+1); i<n_values-1; i++)        *(tab+j)=*(values+i);        j++    }    return *tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) == value_to_supress){            suppr++;        }    }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int suppr = 0;    for(int i=0; i<n_values;i++){        if ((values+i) == value_to_supress){            suppr++;        }    }    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            (tab+j)=(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int n = n_values-suppr;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int n = n_values-1;    float* tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            *(tab+j)=*(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int n = n_values-1;    float tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            (tab+j)=(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int n = n_values-1;    float tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            (tab+j)=(values+i);            j++;        }    }    return tab;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int n = n_values-1;    float tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            (tab+j)=(values+i);            return tab;        }    }}
float* suppress_value (float value_to_supress, float  values, int n_values){    int n = n_values-1;    float tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            (tab+j)=(values+i);            return tab;        }    }}
float* suppress_value (float value_to_supress, float  values, int n_values){    int n = n_values-1;    float tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            (tab+j)=(values+i);        }    }     return tab;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0;    while(i<n_values && value_to_supress != *(values+i))        i++;    if (i != n_values){        for(i;i<n_values-1;i++){            *(values+i) = *(values+i+1);        }    }        return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0;    while(i<n_values && value_to_supress != *(values+i))        i++;    if (i != n_values){        for(i;i<n_values-1;i++){            *(values+i) = *(values+i+1);        }    }    n_values--;    return values;}
float* suppress_value (float value_to_supress, float  *values, int n_values){    int i=0;    while(i<n_values && value_to_supress != *(values+i))        i++;    if (i != n_values){        for(i;i<n_values-1;i++){            *(values+i) = *(values+i+1);        }    }    n_values--;    return values;}
float* suppress_value (float value_to_supress, float  values, int n_values){    int n = n_values-1;    float tab = (float*) malloc(n * sizeof(float));    int j = 0;    for(int i=0; i<n_values;i++){        if (*(values+i) != value_to_supress){            (tab+j)=(values+i);        }    }     return tab;}
